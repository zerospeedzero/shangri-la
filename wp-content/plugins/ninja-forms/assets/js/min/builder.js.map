{"version":3,"sources":["../../../config-wrap-start-default.js","../../../node_modules/almond/almond.js","views/app/menuItem.js","views/app/menu.js","views/app/menuButtons.js","views/app/mobileMenuButton.js","views/app/header.js","views/app/subHeader.js","views/app/builderHeader.js","views/app/main.js","views/app/mobileMenuItem.js","views/app/mobileMenu.js","views/app/drawer/contentEmpty.js","views/app/drawer.js","views/app/drawer/mergeTagItem.js","views/app/drawer/mergeTagsSection.js","models/app/mergeTagModel.js","models/app/mergeTagCollection.js","views/app/drawer/mergeTagsContent.js","views/app/builder.js","controllers/app/remote.js","controllers/app/drawer.js","views/app/drawer/headerDefault.js","views/app/drawer/footerDefault.js","models/app/drawerModel.js","models/app/drawerCollection.js","views/fields/drawer/stagedField.js","views/fields/drawer/stagingEmpty.js","views/fields/drawer/stagingCollection.js","models/fields/stagingModel.js","models/fields/stagingCollection.js","views/fields/drawer/typeSection.js","views/fields/drawer/typeSectionCollection.js","views/fields/drawer/addField.js","views/app/drawer/itemSettingCollection.js","views/app/drawer/itemSettingGroup.js","views/app/drawer/itemSettingGroupCollection.js","views/app/drawer/editSettings.js","views/app/drawer/headerEditSettings.js","views/actions/drawer/typeButton.js","views/actions/drawer/typeCollection.js","models/app/settingModel.js","models/app/settingCollection.js","models/app/settingGroupModel.js","models/app/settingGroupCollection.js","models/app/typeModel.js","models/app/typeCollection.js","views/actions/drawer/addAction.js","views/app/drawer/contentViewChangesItem.js","views/app/drawer/contentViewChanges.js","views/app/drawer/headerViewChanges.js","views/app/drawer/settingError.js","views/app/drawer/itemSetting.js","views/app/drawer/contentPublicLink.js","views/app/drawer/headerPublicLink.js","views/app/drawer/contentNewForm.js","views/app/drawer/headerNewForm.js","controllers/app/drawerConfig.js","views/app/drawer/defaultSettingsTitle.js","views/app/empty.js","models/app/domainModel.js","models/app/domainCollection.js","views/fields/subHeader.js","views/fields/mainContentFieldCollection.js","views/fields/drawer/addSavedField.js","views/fields/drawer/settingsTitle.js","views/actions/mainHeader.js","views/actions/subHeader.js","views/app/itemControls.js","views/actions/actionItem.js","views/actions/mainContentEmpty.js","views/actions/mainContent.js","views/advanced/mainHeader.js","views/advanced/subHeader.js","views/advanced/settingItem.js","views/advanced/mainContent.js","models/fields/fieldModel.js","models/fields/fieldCollection.js","controllers/app/domainConfig.js","models/app/appModel.js","controllers/app/data.js","controllers/app/drawerToggleSettingGroup.js","controllers/app/updateDB.js","models/app/formModel.js","controllers/app/formData.js","controllers/app/previewLink.js","controllers/app/menuButtons.js","models/app/changeModel.js","models/app/changeCollection.js","controllers/app/trackChanges.js","controllers/app/undoChanges.js","controllers/app/publishResponse.js","controllers/app/changeDomain.js","controllers/app/pushstate.js","controllers/app/hotkeys.js","controllers/app/cleanState.js","controllers/app/coreUndo.js","controllers/app/cloneModelDeep.js","controllers/app/getSettingChildView.js","controllers/app/changeSettingDefault.js","views/app/drawer/typeSettingFieldset.js","controllers/app/fieldset.js","controllers/app/toggleSetting.js","controllers/app/buttonToggleSetting.js","controllers/app/numberSetting.js","controllers/app/radioSetting.js","controllers/app/itemControls.js","controllers/app/mergeTags.js","models/app/mergeTagLookupCollection.js","views/app/drawer/mergeTag.js","views/app/drawer/mergeTagList.js","views/app/drawer/mergeTagGroup.js","views/app/drawer/mergeTagGroupList.js","views/app/drawer/mergeTagFilter.js","views/app/drawer/mergeTagBox.js","controllers/app/mergeTagBox.js","controllers/app/itemSettingFill.js","controllers/app/confirmPublish.js","controllers/app/rte.js","controllers/app/settingFieldSelect.js","controllers/app/settingFieldList.js","controllers/app/settingHTML.js","controllers/app/settingColor.js","controllers/app/changeMenu.js","controllers/app/mobile.js","controllers/app/notices.js","controllers/app/unloadCheck.js","controllers/app/formContentFilters.js","controllers/app/formContentGutterFilters.js","controllers/app/cloneCollectionDeep.js","controllers/app/trackKeyDown.js","controllers/app/perfectScroll.js","controllers/app/getNewSettingGroupCollection.js","controllers/app/settingMedia.js","controllers/app/publicLink.js","models/fields/typeSectionModel.js","models/fields/typeSectionCollection.js","controllers/fields/types.js","controllers/fields/fieldTypeDrag.js","controllers/fields/stagingDrag.js","controllers/fields/staging.js","controllers/fields/stagingSortable.js","controllers/fields/filterTypes.js","views/fields/preview/element.js","views/fields/preview/repeaterElementEmpty.js","views/fields/preview/repeaterElementCollection.js","views/fields/preview/repeaterElementLayout.js","views/fields/preview/label.js","views/fields/fieldItem.js","controllers/fields/sortable.js","controllers/fields/data.js","models/app/optionRepeaterModel.js","models/app/optionRepeaterCollection.js","views/app/drawer/optionRepeaterError.js","views/app/drawer/optionRepeaterOption.js","views/app/drawer/optionRepeaterEmpty.js","views/app/drawer/optionRepeaterComposite.js","controllers/app/optionRepeater.js","views/app/drawer/imageOptionRepeaterOption.js","views/app/drawer/imageOptionRepeaterComposite.js","controllers/app/imageOptionRepeater.js","controllers/fields/editActive.js","controllers/fields/fieldSettings.js","controllers/fields/fieldCreditCard.js","controllers/fields/fieldList.js","controllers/fields/fieldPassword.js","controllers/fields/fieldQuantity.js","controllers/fields/fieldShipping.js","controllers/fields/key.js","controllers/fields/notices.js","controllers/fields/mobile.js","controllers/fields/savedFields.js","controllers/fields/fieldDatepicker.js","controllers/fields/fieldDisplayCalc.js","controllers/fields/fieldRepeater.js","controllers/actions/types.js","models/actions/actionModel.js","models/actions/actionCollection.js","controllers/actions/data.js","controllers/actions/actionSettings.js","controllers/actions/editActive.js","controllers/actions/emailFromSetting.js","controllers/actions/addActionTypes.js","controllers/actions/typeDrag.js","controllers/actions/droppable.js","models/actions/typeModel.js","models/actions/typeCollection.js","controllers/actions/filterTypes.js","controllers/actions/newsletterList.js","controllers/actions/deleteFieldListener.js","controllers/actions/collectPaymentFields.js","controllers/actions/collectPaymentCalculations.js","controllers/actions/collectPaymentFixed.js","controllers/actions/collectPayment.js","controllers/actions/save.js","controllers/advanced/types.js","models/advanced/settingsModel.js","controllers/advanced/data.js","controllers/advanced/formSettings.js","controllers/advanced/editActive.js","controllers/advanced/clickEdit.js","controllers/advanced/calculations.js","controllers/loadControllers.js","views/fields/mainContentEmpty.js","views/app/formTitle.js","views/loadViews.js","main.js"],"names":["requirejs","require","define","undef","main","req","makeMap","handlers","defined","waiting","config","defining","hasOwn","Object","prototype","hasOwnProperty","aps","slice","jsSuffixRegExp","hasProp","obj","prop","call","normalize","name","baseName","nameParts","nameSegment","mapValue","foundMap","lastIndex","foundI","foundStarMap","starI","i","j","part","baseParts","split","map","starMap","length","nodeIdCompat","test","replace","charAt","concat","splice","join","makeRequire","relName","forceSync","args","arguments","push","apply","makeLoad","depName","value","callDep","Error","splitPrefix","prefix","index","indexOf","substring","makeRelParts","makeConfig","relParts","plugin","parts","relResourceName","f","n","pr","p","exports","e","module","id","uri","deps","callback","cjsModule","ret","usingExports","callbackType","load","undefined","alt","setTimeout","cfg","_defined","amd","jQuery","Marionette","ItemView","extend","tagName","template","initialize","this","listenTo","nfRadio","channel","render","model","on","onRender","$el","children","unwrap","setElement","events","clickAppMenu","trigger","templateHelpers","renderDashicons","dashicons","icon","document","createElement","classList","add","outerHTML","renderClasses","classes","request","get","renderUrl","url","formModel","renderTarget","renderDisabled","disabled","appMenuItemView","CollectionView","childView","onShow","el","find","bounceIcon","that","renderPublish","publishWidth","maybeDisabled","maybeRenderCancel","renderPublicLink","Backbone","Radio","isNaN","publicLink","clickPublish","clickViewChanges","clickPublicLink","changeModel","effect","times","clickMobileMenu","builderEl","toggleClass","appMenuCollectionView","appMenuButtonsView","mobileMenuButtonView","LayoutView","regions","menu","buttons","mobileMenuButton","appDomainCollection","show","collection","clickLogo","appHeaderView","appSubHeaderView","app","formTitle","appSub","changeSubHeader","formSettings","formTitleView","currentDomain","subHeaderView","className","maybeDone","offsetRight","offsetLeft","gutterLeft","body","gutterRight","reply","getMainEl","window","context","resizeBothGutters","setBothGuttersAbsolute","setBothGuttersFixed","updateGutters","bodyView","gutterLeftView","gutterRightView","parent","onAttach","initialGutterResize","onBeforeDestroy","off","resize","resizeGutter","data","leftEl","rightEl","clearTimeout","top","offset","height","topLeft","leftLeft","left","css","position","topRight","leftRight","scrollTop","right","mobileDashicon","mobileMenuItemView","CompositeView","attachHtml","collectionView","append","drawerEmptyView","header","content","footer","getEl","loadContent","emptyContent","perfectScrollbar","drawerID","drawer","contentView","headerView","footerView","empty","clickToggleDrawer","clickTag","active","mergeTagItemView","updateFields","fieldCollection","set","Model","defaults","exclude","mergeTagModel","Collection","mergeTagsSectionView","MergeTagCollection","getMergeTagsView","reRender","settingModel","mergeTagCollection","defaultGroups","where","default_group","calcMergeTagGroup","useMergeTags","_","each","remove","include","models","sectionModel","mainView","mobileMenuView","drawerView","mergeTagsContentView","menuDrawer","mergeTagsContent","getBuilderEl","getBuilderView","mergeTagsClone","clone","openDrawer","closeDrawer","changeDomain","addListener","dataModel","listen","updateSetting","clickExtra","getRemote","settingView","srcElement","addClass","remote","parentValue","action","security","nfAdmin","ajaxNonce","post","ajaxurl","response","JSON","parse","options","clickOpenDrawer","toggleDrawerSize","getClosedDrawerPos","preventClose","enableClose","maybePreventClose","objPreventClose","filterFocused","currentDrawer","removeClass","rightClosed","drawerEl","checkCloseDrawerPos","setInterval","clearInterval","target","currentDomainID","hasFocus","checkOpenDrawerPos","focusFilter","filterEl","focus","width","keys","key","getPreventClose","clearFilter","blurFilter","changeFilter","maybeChangeFilter","keyCode","addObject","trim","val","blur","getFocus","drawerDisabled","defaultHeaderView","defaultFooterView","getHeaderView","getFooterView","drawerModel","removeStagedField","stagedFieldView","stagedFieldsEmptyView","emptyView","activeClass","getStagedFieldsEl","sortable","placeholder","helper","tolerance","over","ui","out","receive","update","start","stop","draggable","opacity","connectToSortable","appendTo","refreshPositions","grid","element","onAddChild","onRemoveChild","hasStagedFields","stagingModel","comparator","bindAll","getTypeSection","dragging","drag","disableSelection","clickFieldType","contains","modalContent","jBox","zIndex","closeButton","overlay","repositionOnOpen","reposition","open","mousedownFieldType","maybeClickFieldType","renderFieldTypes","html","fieldTypes","type","nicename","templateHTML","renderType","savedField","availableField","htmlFragments","createRange","createContextualFragment","appendChild","innerHTML","fieldTypeSectionView","drawerStagingView","StagingCollection","fieldTypeSectionCollectionView","staging","primary","secondary","filterFieldTypes","removeFieldTypeFilter","savedCollection","primaryCollection","fieldTypeSectionCollection","secondaryCollection","stagingCollection","filteredSectionCollection","reset","childViewOptions","getChildView","itemSettingCollectionView","settings","devMode","visibleSettings","setting","style","display","hide","clickToggleGroup","renderLabel","label","groupLabel","renderArrowDir","itemSettingGroupView","itemSettingGroupCollectionView","settingTitle","settingGroups","groupCollection","titleView","maybeRenderTitle","title","renderTypeNicename","domainID","scroll","clickAddAction","image","section","renderStyle","actionTypeButtonView","hasContents","renderNicename","slug","hide_merge_tags","error","maybePreventUI","objectType","updateKey","keyModel","SettingCollection","settingGroupModel","SettingGroupCollection","typeModel","option","actionTypeCollectionView","actionTypeCollection","payments","marketing","management","workflow","notifications","misc","filteractionTypes","removeactionTypeFilter","installedActions","availableActions","updateAvailableActionGroups","paymentsCollection","marketingCollection","managementCollection","workflowCollection","notificationsCollection","miscCollection","filteredInstalled","filteredAvailable","group","nfi18n","paymentsActionNicename","marketingActionNicename","managementActionNicename","workflowActionNicename","notificationsActionNicename","miscActionNicename","undoSingle","viewChangesItem","clickUndoChanges","settingErrorView","renderError","renderWarning","dep","match","labelText","updateIcon","updateLink","labelWrapper","refresh","createTextNode","drawerOpened","drawerClosed","unescape","silent","onBeforeRender","escape","next","maxWidth","theme","closeOnClick","mask","input","attr","autoNumericOptions","digitGroupSeparator","thousands_sep","decimalCharacter","decimal_point","AutoNumeric","currencySymbol","format","console","log","renderVisible","renderSetting","renderLabelClasses","use_merge_tags","renderTooltip","help","helpText","helpTextContainer","helpIcon","helpIconLink","setAttribute","helpTextWrapper","renderEmailFieldOptions","fields","initialOption","select","field","emptyContainer","renderMergeTags","renderMinMax","minMaxStr","min_val","isNumeric","max_val","step","renderMinMaxHelper","minMaxHelperStr","minVal","maxVal","changeSetting","endsWith","regexp","search","unset","foundIndex","foundChar","keyUpSetting","clickSetting","itemSettingView","embedForm","enablePublicLink","copyPublicLink","formSettingsDataModel","allowPublicLinkSettingModel","embedFormSettingModel","public_link_key","publicLinkStructure","publicLinkSettingModel","copyFormEmbedHandler","getElementById","execCommand","copyPublicLinkHandler","confirmResetPublicLinkHandler","parentNode","node","resetPublicLinkHandler","cancelResetPublicLinkHandler","formName","formSubmit","titleSettingModel","addSubmitSettingModel","findWhere","drawerCollection","addFieldView","editSettingsView","editSettingsHeaderView","addActionView","viewChangesView","viewChangesHeaderView","publicLinkView","publicLinkHeaderView","newFormView","newFormHeaderView","mobileItemControlsView","getContentView","view","getDrawerCollection","getDrawer","DefaultSettingsTitleView","EmptyView","hotkeys","getSettingsTitleView","getDefaultSettingsTitleView","getGutterLeftView","getGutterRightView","domainModel","reorderOnSort","getEmptyView","getSortableEl","initSortable","destroySortable","containment","cancel","scrollSensitivity","item","dropping","hasClass","renderAddButton","button","clickAddSavedField","addSavedFieldView","renderjBoxContent","addSaved","addSavedjBox","destroy","x","y","outside","onCreated","setContent","attach","displayName","saved","renderSavedStar","star","actionCollection","clickEdit","singleTapEdit","clickDelete","clickDuplicateField","mouseoverItemControl","itemControlsView","itemControls","maybeDeactivate","click","maybeClickEdit","changeToggle","renderToggle","settingName","actionLabel","actionView","droppable","accept","hoverClass","drop","updateActiveClass","editActive","settingItem","objectDomain","order","idAttribute","fieldType","parentType","listimageGet","listimageSet","updateFieldKey","attributes","changedAttributes","formatLabel","fieldModel","parseInt","tmpNum","addField","removeField","addNewField","appendNewField","removeFieldResponse","newIDs","removedIDs","at","fieldExists","fieldsSubHeaderView","FieldsMainContentFieldCollectionView","fieldsSettingsTitleView","actionsMainHeaderView","actionsSubHeaderView","actionsMainContentView","settingsMainHeaderView","settingsSubHeaderView","settingsMainContentView","FieldCollection","defaultFormContentView","defaultFormContentLoad","defaultFormContentGutterView","domainFormFields","Esc","up","down","getSubHeaderView","getMainContentView","formContentData","formContentLoadFilters","sortedArray","without","first","formContentViewFilters","formContentView","gutterFilters","gutterView","domainActions","domainAdvanced","previewurl","getDomainCollection","getDomainModel","fieldModels","loading","changeStatus","appModel","clean","mobile","isMobile","getData","getSetting","getCurrentDomain","getCurrentDrawer","updateCurrentDomain","updateCurrentDrawer","checkDeps","deps_settings","currentDrawerID","toggleSettingGroup","errors","updateDB","defaultSaveFilter","jsAction","formContentSaveDataFilters","formData","stringify","parent_id","deleted_fields","actions","deleted_actions","autoClose","chunk_size","data_chunks","RegExp","saveChunkedForm","responseData","form","handleFinalResponse","fail","xhr","status","handleFinalFailure","chunks","currentChunk","formId","new_publish","total_chunks","postObj","batch_type","chunk_total","chunk_current","chunk","form_id","batchNonce","then","res","last_request","batch_complete","requesting","exception","alert","pluck","preloadedFormData","getFormModel","disablePreview","enablePreview","changePreviewNicename","publish","viewChanges","changeCollection","cid","ChangeModel","registerChange","getCollection","maybeResetCollection","changes","dashicon","undoChanges","sort","change","dispatchClick","undoAll","cookie","includes","d","Date","setTime","getTime","expires","toUTCString","cname","publishResponse","new_ids","newID","oldID","forms","history","replaceState","changeAppDomain","preventChange","enableChange","objPreventChange","maybePreventChange","mainEl","changePushState","pushState","location","href","newUrl","toString","changeHotkeys","addNewAction","changeDomainFields","changeDomainActions","changeDomainSettings","hotkey","msg","fieldsDomain","actionsDomain","settingsDomain","ignoreAttributes","setAppClean","undoChangeSetting","undoAddObject","undoRemoveObject","undoDuplicateObject","undoSortFields","undoAddListOption","undoRemoveListOption","undoSortListOptions","before","maybeRemoveChange","objectModel","results","objectCollection","objModels","cloneModelDeep","clonedCollection","newModel","getSettingChildView","after","object","fieldsetView","settingCollection","createSettingsCollection","settingTypeModel","deleting","maybeDelete","clickDuplicate","modelID","toLowerCase","inArray","formID","fieldKey","fieldID","done","Array","isArray","forEach","field_has_data","doDeleteFieldModal","modalData","closeOnEsc","fieldDataDeleteMsg","btnPrimary","text","delete","deleteModal","toggleModal","btnSecondary","NinjaModal","tmpID","tagSectionCollection","mergeTags","tagSection","tags","fieldTags","tag","getFieldKeyFormat","calcTags","calcCollection","calcModel","currentElement","clickMergeTag","addFieldTags","deleteFieldTags","updateCalcTags","updateCurrentElement","updateCurrentSetting","getSectionModel","updateID","replaceFieldKey","initMergeTags","mergeTagsView","jBoxes","maxHeight","onOpen","prev","onClose","tagModel","currentValue","newPos","currentPos","caret","substr","summernote","calcTag","getFieldKeyFormatCalc","optionModel","calc","openMergeTags","returnMergeTags","preventDefault","currentModel","upMergeTags","changeActiveTag","downMergeTags","dir","inc","currentIndex","nextModel","userInfo","system","updateOpen","targetTag","oldTag","fieldMergeTag","newKey","oldKey","_previousAttributes","oldVal","oldCalcKey","newCalcKey","re","newVal","insertTag","mergeTagView","sectionFilter","searchFilter","filter","child","fieldsToRemove","excludeFromCalcs","term","blacklist","updateActive","onClick","updateTags","setActive","siblings","mergeTagGroupView","updateFilter","event","firstFilteredTag","sections","MergeTagModel","MergeTagLookupCollection","MergeTagView","MergeTagListView","MergeTagGroupView","MergeTagGroupListView","MergeTagFilterView","MergeTagBoxLayout","old","mergeTagsButtonClick","afterAppStart","beforeRenderSetting","beforeDrawerClose","bind","selector","focusCallback","keyupCallback","closest","layout","tagCollection","mergeTagListView","mergeTagGroupListView","getRegion","rteEditor","posY","outerHeight","tagBoxY","windowHeight","innerHeight","tagBoxHeight","boxHeight","repeaterRow","scrollLeft","posX","$input","str","caretPos","patt","exec","string","childNode","childNodes","nodeValue","range","sel","getSelection","setStart","err","collapse","removeAllRanges","addRange","$this","$inputSetting","autocomplete","$overlayElement","dataID","so","mergetags","mergetag","confirmPublish","initSettingModel","destroySetting","meta_image_frame","icons","align","alignCenter","alignJustify","alignLeft","alignRight","indent","outdent","bold","close","code","eraser","italic","link","unlink","magic","minus","orderedlist","redo","square","table","underline","undo","unorderedlist","currentContext","initRTE","toolbar","linkButton","mediaButton","codemirror","lineNumbers","lineWrapping","callbacks","onBlur","editor","getValue","updateDataModel","prettifyHtml","onFocus","onKeydown","onKeyup","linkMenu","replaceWith","class","removeRTE","linkDropdown","buttonGroup","contents","tooltip","clickLinkButton","toggle","dropdown","mergeTagsButton","openMediaManager","invoke","wp","media","frames","media_attachment","state","toJSON","insertMedia","textEl","urlEl","isNewWindowEl","isNewWindow","filename","trackKeyChanges","beforeRender","maybeSwitchToFieldsDomain","autoOpenDrawer","filterDrawerContents","SwitchToFieldsDomain","updateFieldMap","fieldFilter","bail","fieldTypeModel","rubble","filterDrawer","switchDomain","fieldDomainModel","fieldListSettings","registerFieldListSettings","updateFieldListSettingKeys","changed","actionModel","lastChanged","oldValue","init","changedSettingValue","setRenderFalse","closeColorPickers","initColorPicker","wpColorPicker","color","editFormText","changeMenu","formPublish","isNewForm","highlightAddNew","appendEditForm","editFormLinkText","editFormLink","editFormListItem","closeMobileMenu","addNotice","closeNotice","notices","appDefaults","constructOnInit","stack","animation","openNotice","maybePrompt","viewFilters","saveFilters","loadFilters","addViewFilter","addSaveFilter","addLoadFilter","getViewFilters","getSaveFilters","getLoadFilters","priority","leftFilters","rightFilters","addLeftFilter","addRightFilter","getLeftFilters","getRightFilters","cloneCollectionDeep","constructor","keyDown","keyUp","getKeyDown","movedPos","initPerfectScroll","moveRail","resetRail","suppressScrollX","outerWidth","getNewSettingGroupCollection","validatePublicLink","newPublicLinkKey","Math","random","typeSectionModel","TypeCollection","SectionCollection","fieldTypeSections","registerSection","fieldTypeData","getFieldType","getTypeCollection","getTypeSections","getSavedFields","shiftKey","startDrag","stopDrag","getCurrentDraggableHelperClone","setProperty","draggableHelperClone","stagedFields","num","addStagedField","getStagingCollection","sortStagedFields","clearStagedFields","beforeCloseDrawer","now","tmpField","sortableEl","pos","receiveStagedFields","overStagedFields","outStagedFields","startStagedFields","stopStagedFields","addActiveClass","stagedFieldsEl","removeActiveClass","currentHelper","helperClone","filtered","filterCollection","hiddenFields","found","alias","convertDateFormat","dateFormat","original","moment","locale","locales","defineLocale","months","monthsShort","weekdays","weekdaysShort","weekdaysMin","maybeFilterHTML","filter_esc_status","renderPlaceholder","disable_input","maybeRequired","maybeInputLimit","maybeDisableAutocomplete","maybeChecked","default_value","renderOptions","optionLabel","taxonomy","taxonomyTerms","typeData","settingGroup","enabledTaxonomyTerms","attribute","reduce","enabledTaxonomyTerm","terms","checked","defaultValue","default","defaultOption","renderOtherAttributes","multi_size","renderProduct","renderNumberDefault","renderCurrencyFormatting","renderRatings","ratingOutput","number_of_stars","renderHourOptions","hours","hours_24","renderMinuteOptions","minute_increment","maybeRenderAMPM","maybeRenderTime","date_mode","repeaterFieldModel","emptyViewOptions","getRepeaterFieldsCollection","droppedFieldID","droppedFieldModel","previewRepeaterElementCollectionView","renderDescText","maybeRenderHelp","previewElementView","previewRepeaterElementView","previewLabelView","doingShortcut","previewLabel","previewElement","isFieldTypeTemplateAvailable","itemView","touch","ClassyWiggle","degrees","delay","renderRequired","required","getFieldID","renderIcon","labelPosition","label_pos","renderDescriptionText","desc_text","mousedown","singletap","swipeleft","swiperight","tapend","maybeShortcut","maybeTapEdit","swipeLeft","startEvnt","swipeRight","FieldModel","FieldItemView","receiveFieldsSortable","overfieldsSortable","outFieldsSortable","stopFieldsSortable","startFieldsSortable","updateFieldsSortable","receiveRepeaterField","insertedAt","fieldTypeEl","newHelper","$parentHelper","dragFieldID","dragModel","oldPos","String","adding","removing","getFieldCollection","getField","redrawFieldCollection","getTmpFieldID","deleteField","sortFields","getAdding","setAdding","getRemoving","setRemoving","renderTrigger","savedType","updateFieldSetting","max_options","changeErrors","size","errorsFound","opt","listOptionModel","addOption","renderErrors","ErrorView","columns","parentView","hasErrors","keyup","changeOption","deleteOption","keyupOption","maybeAddOption","findByIndex","getColumns","renderFieldSelect","bottom","renderNonSaveFieldSelect","removeFieldsLookup","column","optionNode","innerText","listOptionView","listEmptyView","listOptionCollection","optionCollection","maybeHideNew","handle","forcePlaceholderSize","setupTooltip","importLink","clickImport","renderHeaders","beforeColumns","afterColumns","valueChars","col","headerText","headerContainer","renderFieldsetClasses","currency_symbol","limit","clickAddOption","textarea","trimLeft","trimRight","lines","line","row","slugify","separator","listCompositeView","updateOptionSortable","stopOptionSortable","startOptionSortable","convertSettings","optionView","triggerDataModel","modelData","new","newOrder","optionContainerDiv","valueEl","imageIdEl","labelEl","img_container","$imgs","new_img","src","image_id","clearEditActive","fieldSettings","getSettingModel","getSettingCollection","dropCreditCardField","newField","stageCreditCardField","ListOptionCollection","updateOptionLabel","updateOptionValue","convertOptions","insertField","productFields","getProductFields","addMask","newFieldKey","updateLabel","valueOf","setError","keyExists","testKey","startWiggle","stopWiggle","initWiggle","updateField","modified","fieldData","created_at","newType","newTypeDefaults","settingDefaults","addDatepicker","datePickerSettings","filteredDatePickerSettings","dateObject","flatpickr","setupCollection","addChildField","receiveFields","getChildField","processStagedFields","sortRepeaterField","overRepeaterField","outRepeaterField","stopRepeaterField","startRepeaterField","updateRepeaterField","maybeDeleteField","elId","repeaterField","sortableElArray","childFieldID","parentFieldModel","childFieldModel","parentID","actionTypeData","installed","available","getType","getInstalledActions","getAvailableActions","actionType","addAction","removeAction","getAction","getTmpID","deleteAction","actionSettings","updateFromAddress","isValidEmail","home_url_host","errorInvalidEmailFromAddress","email","dropActionType","type_slug","actionTypeModel","typeCollection","filterActionTypes","newInstalled","newAvailable","defaultFields","clickListUpdate","maybeRenderFields","maybeRenderGroups","registerFieldsListener","registerGroupsListener","updateFieldMapping","updateInterestGroups","updateLists","lists","always","selectedList","list","groups","registerListener","maybeUpdateSettings","isString","isObject","mapObject","filteredCollection","every","getFields","field_key","returnFields","sortBy","calcModels","calcs","getCalcs","returnCalcs","isEmpty","initCollectPayment","maybeClearTotal","maybeUpdateTotal","maybeError","oldName","initSave","checkFieldAdded","checkFieldDeleted","newFieldModel","formSettingTypeData","settingsModel","getSettings","updateCalc","sortCalc","checkName","checkEQ","checkDec","checkAllCalcs","nameExists","eq","errorSelfRef","errorFutureCalc","calculations","targetCalc","selfRef","futureCalc","dec","errorNonIntDec","abs","nonIntDec","Remote","Drawer","DrawerConfig","DomainConfig","AppData","DrawerToggleSettingGroup","UpdateDB","FormData","PreviewLink","AppMenuButtons","AppTrackChanges","AppUndoChanges","AppPublishResponse","AppChangeDomain","Pushstate","Hotkeys","CleanState","CoreUndo","CloneModelDeep","DrawerSettingChildView","ChangeSettingDefault","Fieldset","ToggleSetting","ButtonToggleSetting","NumberSetting","RadioSetting","ItemControls","MergeTags","MergeTagsBox","ItemSettingFill","ConfirmPublish","RTE","SettingFieldSelect","SettingFieldList","SettingHTML","SettingColor","ChangeMenu","AppMobile","AppNotices","AppUnloadCheck","FormContentFilters","FormContentGutterFilters","CloneCollectionDeep","TrackKeyDown","PerfectScroll","GetNewSettingGroupCollection","SettingMedia","PublicLink","FieldTypes","FieldTypeDrag","FieldStagingDrag","StagedFieldsData","StagedFieldsSortable","DrawerFilterFieldTypes","MainContentFieldsSortable","FieldData","OptionRepeater","imageOptionRepeater","FieldsEditActive","FieldSettings","FieldCreditCard","FieldList","FieldPassword","FieldQuantity","FieldShipping","FieldKey","Notices","FieldsMobile","SavedFields","FieldDatepicker","FieldDisplayCalc","FieldRepeater","ActionTypes","ActionData","ActionSettings","ActionEditActive","ActionEmailFromSetting","ActionAddTypes","ActionTypeDrag","ActionDroppable","ActionFilterTypes","ActionNewsletterList","ActionDeleteFieldListener","ActionCollectPaymentFields","ActionCollectPaymentCalculations","ActionCollectPaymentFixed","ActionCollectPayment","ActionSave","SettingTypes","SettingData","FormSettings","SettingsEditActive","SettingsClickEdit","AdvancedCalculations","renderTitle","fieldItemView","mainContentEmptyView","FormTitleView","getFieldItem","getMainContentEmpty","getFormTitle","ready","$","BuilderView","LoadControllers","LoadViews","Application","Renderer","onStart","evaluate","interpolate","variable"],"mappings":"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A,mCACA,iCACA,6BACA,qCACA,iCACA,8BACA,0BACA,iCACA,sCACA,gCACA,mCACA,qCACA,+BACA,mCACA,mCACA,mCACA,yBACA,6BACA,4BACA,iCACA,qCACA,sCACA,mCAKA,4BACA,2BACA,qCACA,iCACA,uCACA,qCACA,+BACA,gCACA,kCACA,qCACA,0CACA,2CACA,iDACA,0CACA,qCACA,2BAKA,6BACA,4BACA,oCACA,kCACA,iCACA,sCAEA,SAIAgixHAhiD,WAAAlF,OAAAoF,OAAA,CACAG,WAAA,WAIA,IAAAs+C,EACA,IAAAC,EACA,IAAA1B,EACA,IAAAf,EACA,IAAAC,EACA,IAAAC,EACA,IAAAC,EACA,IAAAE,EACA,IAAAG,EACA,IAAAC,EACA,IAAAC,EACA,IAAAC,EACA,IAAAC,EACA,IAAAC,EACA,IAAAG,EACA,IAAAC,EACA,IAAAC,EACA,IAAAQ,EACA,IAAAI,EACA,IAAAC,EACA,IAAAC,EACA,IAAAC,EACA,IAAAC,EACA,IAAAC,EACA,IAAAW,EACA,IAAAV,EACA,IAAAC,EACA,IAAAC,EACA,IAAAC,EACA,IAAAjC,EACA,IAAAoC,EACA,IAAAC,EACA,IAAAC,EACA,IAAAC,EACA,IAAAE,EAQA,IAAA1B,EACA,IAAAmC,GACA,IAAAC,GACA,IAAAT,EACA,IAAAC,EACA,IAAAC,EACA,IAAAC,EACA,IAAAC,EACA,IAAAC,EACA,IAAAC,GACA,IAAAlC,EACA,IAAAE,EACA,IAAAC,EACA,IAAAC,EACA,IAAAC,EACA,IAAAN,EACA,IAAAuC,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GAIA,IAAAU,GACA,IAAAC,GACA,IAAAE,GACA,IAAAE,GACA,IAAAC,GACA,IAAAf,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GACA,IAAAC,GACA,IA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","file":"builder.js","sourcesContent":["(function () {\n","/**\n * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.\n * Released under MIT license, http://github.com/requirejs/almond/LICENSE\n */\n//Going sloppy to avoid 'use strict' string cost, but strict practices should\n//be followed.\n/*global setTimeout: false */\n\nvar requirejs, require, define;\n(function (undef) {\n    var main, req, makeMap, handlers,\n        defined = {},\n        waiting = {},\n        config = {},\n        defining = {},\n        hasOwn = Object.prototype.hasOwnProperty,\n        aps = [].slice,\n        jsSuffixRegExp = /\\.js$/;\n\n    function hasProp(obj, prop) {\n        return hasOwn.call(obj, prop);\n    }\n\n    /**\n     * Given a relative module name, like ./something, normalize it to\n     * a real name that can be mapped to a path.\n     * @param {String} name the relative name\n     * @param {String} baseName a real name that the name arg is relative\n     * to.\n     * @returns {String} normalized name\n     */\n    function normalize(name, baseName) {\n        var nameParts, nameSegment, mapValue, foundMap, lastIndex,\n            foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,\n            baseParts = baseName && baseName.split(\"/\"),\n            map = config.map,\n            starMap = (map && map['*']) || {};\n\n        //Adjust any relative paths.\n        if (name) {\n            name = name.split('/');\n            lastIndex = name.length - 1;\n\n            // If wanting node ID compatibility, strip .js from end\n            // of IDs. Have to do this here, and not in nameToUrl\n            // because node allows either .js or non .js to map\n            // to same file.\n            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {\n                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');\n            }\n\n            // Starts with a '.' so need the baseName\n            if (name[0].charAt(0) === '.' && baseParts) {\n                //Convert baseName to array, and lop off the last part,\n                //so that . matches that 'directory' and not name of the baseName's\n                //module. For instance, baseName of 'one/two/three', maps to\n                //'one/two/three.js', but we want the directory, 'one/two' for\n                //this normalization.\n                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);\n                name = normalizedBaseParts.concat(name);\n            }\n\n            //start trimDots\n            for (i = 0; i < name.length; i++) {\n                part = name[i];\n                if (part === '.') {\n                    name.splice(i, 1);\n                    i -= 1;\n                } else if (part === '..') {\n                    // If at the start, or previous value is still ..,\n                    // keep them so that when converted to a path it may\n                    // still work when converted to a path, even though\n                    // as an ID it is less than ideal. In larger point\n                    // releases, may be better to just kick out an error.\n                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {\n                        continue;\n                    } else if (i > 0) {\n                        name.splice(i - 1, 2);\n                        i -= 2;\n                    }\n                }\n            }\n            //end trimDots\n\n            name = name.join('/');\n        }\n\n        //Apply map config if available.\n        if ((baseParts || starMap) && map) {\n            nameParts = name.split('/');\n\n            for (i = nameParts.length; i > 0; i -= 1) {\n                nameSegment = nameParts.slice(0, i).join(\"/\");\n\n                if (baseParts) {\n                    //Find the longest baseName segment match in the config.\n                    //So, do joins on the biggest to smallest lengths of baseParts.\n                    for (j = baseParts.length; j > 0; j -= 1) {\n                        mapValue = map[baseParts.slice(0, j).join('/')];\n\n                        //baseName segment has  config, find if it has one for\n                        //this name.\n                        if (mapValue) {\n                            mapValue = mapValue[nameSegment];\n                            if (mapValue) {\n                                //Match, update name to the new value.\n                                foundMap = mapValue;\n                                foundI = i;\n                                break;\n                            }\n                        }\n                    }\n                }\n\n                if (foundMap) {\n                    break;\n                }\n\n                //Check for a star map match, but just hold on to it,\n                //if there is a shorter segment match later in a matching\n                //config, then favor over this star map.\n                if (!foundStarMap && starMap && starMap[nameSegment]) {\n                    foundStarMap = starMap[nameSegment];\n                    starI = i;\n                }\n            }\n\n            if (!foundMap && foundStarMap) {\n                foundMap = foundStarMap;\n                foundI = starI;\n            }\n\n            if (foundMap) {\n                nameParts.splice(0, foundI, foundMap);\n                name = nameParts.join('/');\n            }\n        }\n\n        return name;\n    }\n\n    function makeRequire(relName, forceSync) {\n        return function () {\n            //A version of a require function that passes a moduleName\n            //value for items that may need to\n            //look up paths relative to the moduleName\n            var args = aps.call(arguments, 0);\n\n            //If first arg is not require('string'), and there is only\n            //one arg, it is the array form without a callback. Insert\n            //a null so that the following concat is correct.\n            if (typeof args[0] !== 'string' && args.length === 1) {\n                args.push(null);\n            }\n            return req.apply(undef, args.concat([relName, forceSync]));\n        };\n    }\n\n    function makeNormalize(relName) {\n        return function (name) {\n            return normalize(name, relName);\n        };\n    }\n\n    function makeLoad(depName) {\n        return function (value) {\n            defined[depName] = value;\n        };\n    }\n\n    function callDep(name) {\n        if (hasProp(waiting, name)) {\n            var args = waiting[name];\n            delete waiting[name];\n            defining[name] = true;\n            main.apply(undef, args);\n        }\n\n        if (!hasProp(defined, name) && !hasProp(defining, name)) {\n            throw new Error('No ' + name);\n        }\n        return defined[name];\n    }\n\n    //Turns a plugin!resource to [plugin, resource]\n    //with the plugin being undefined if the name\n    //did not have a plugin prefix.\n    function splitPrefix(name) {\n        var prefix,\n            index = name ? name.indexOf('!') : -1;\n        if (index > -1) {\n            prefix = name.substring(0, index);\n            name = name.substring(index + 1, name.length);\n        }\n        return [prefix, name];\n    }\n\n    //Creates a parts array for a relName where first part is plugin ID,\n    //second part is resource ID. Assumes relName has already been normalized.\n    function makeRelParts(relName) {\n        return relName ? splitPrefix(relName) : [];\n    }\n\n    /**\n     * Makes a name map, normalizing the name, and using a plugin\n     * for normalization if necessary. Grabs a ref to plugin\n     * too, as an optimization.\n     */\n    makeMap = function (name, relParts) {\n        var plugin,\n            parts = splitPrefix(name),\n            prefix = parts[0],\n            relResourceName = relParts[1];\n\n        name = parts[1];\n\n        if (prefix) {\n            prefix = normalize(prefix, relResourceName);\n            plugin = callDep(prefix);\n        }\n\n        //Normalize according\n        if (prefix) {\n            if (plugin && plugin.normalize) {\n                name = plugin.normalize(name, makeNormalize(relResourceName));\n            } else {\n                name = normalize(name, relResourceName);\n            }\n        } else {\n            name = normalize(name, relResourceName);\n            parts = splitPrefix(name);\n            prefix = parts[0];\n            name = parts[1];\n            if (prefix) {\n                plugin = callDep(prefix);\n            }\n        }\n\n        //Using ridiculous property names for space reasons\n        return {\n            f: prefix ? prefix + '!' + name : name, //fullName\n            n: name,\n            pr: prefix,\n            p: plugin\n        };\n    };\n\n    function makeConfig(name) {\n        return function () {\n            return (config && config.config && config.config[name]) || {};\n        };\n    }\n\n    handlers = {\n        require: function (name) {\n            return makeRequire(name);\n        },\n        exports: function (name) {\n            var e = defined[name];\n            if (typeof e !== 'undefined') {\n                return e;\n            } else {\n                return (defined[name] = {});\n            }\n        },\n        module: function (name) {\n            return {\n                id: name,\n                uri: '',\n                exports: defined[name],\n                config: makeConfig(name)\n            };\n        }\n    };\n\n    main = function (name, deps, callback, relName) {\n        var cjsModule, depName, ret, map, i, relParts,\n            args = [],\n            callbackType = typeof callback,\n            usingExports;\n\n        //Use name if no relName\n        relName = relName || name;\n        relParts = makeRelParts(relName);\n\n        //Call the callback to define the module, if necessary.\n        if (callbackType === 'undefined' || callbackType === 'function') {\n            //Pull out the defined dependencies and pass the ordered\n            //values to the callback.\n            //Default to [require, exports, module] if no deps\n            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;\n            for (i = 0; i < deps.length; i += 1) {\n                map = makeMap(deps[i], relParts);\n                depName = map.f;\n\n                //Fast path CommonJS standard dependencies.\n                if (depName === \"require\") {\n                    args[i] = handlers.require(name);\n                } else if (depName === \"exports\") {\n                    //CommonJS module spec 1.1\n                    args[i] = handlers.exports(name);\n                    usingExports = true;\n                } else if (depName === \"module\") {\n                    //CommonJS module spec 1.1\n                    cjsModule = args[i] = handlers.module(name);\n                } else if (hasProp(defined, depName) ||\n                           hasProp(waiting, depName) ||\n                           hasProp(defining, depName)) {\n                    args[i] = callDep(depName);\n                } else if (map.p) {\n                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});\n                    args[i] = defined[depName];\n                } else {\n                    throw new Error(name + ' missing ' + depName);\n                }\n            }\n\n            ret = callback ? callback.apply(defined[name], args) : undefined;\n\n            if (name) {\n                //If setting exports via \"module\" is in play,\n                //favor that over return value and exports. After that,\n                //favor a non-undefined return value over exports use.\n                if (cjsModule && cjsModule.exports !== undef &&\n                        cjsModule.exports !== defined[name]) {\n                    defined[name] = cjsModule.exports;\n                } else if (ret !== undef || !usingExports) {\n                    //Use the return value from the function.\n                    defined[name] = ret;\n                }\n            }\n        } else if (name) {\n            //May just be an object definition for the module. Only\n            //worry about defining if have a module name.\n            defined[name] = callback;\n        }\n    };\n\n    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {\n        if (typeof deps === \"string\") {\n            if (handlers[deps]) {\n                //callback in this case is really relName\n                return handlers[deps](callback);\n            }\n            //Just return the module wanted. In this scenario, the\n            //deps arg is the module name, and second arg (if passed)\n            //is just the relName.\n            //Normalize module name, if it contains . or ..\n            return callDep(makeMap(deps, makeRelParts(callback)).f);\n        } else if (!deps.splice) {\n            //deps is a config object, not an array.\n            config = deps;\n            if (config.deps) {\n                req(config.deps, config.callback);\n            }\n            if (!callback) {\n                return;\n            }\n\n            if (callback.splice) {\n                //callback is an array, which means it is a dependency list.\n                //Adjust args if there are dependencies\n                deps = callback;\n                callback = relName;\n                relName = null;\n            } else {\n                deps = undef;\n            }\n        }\n\n        //Support require(['a'])\n        callback = callback || function () {};\n\n        //If relName is a function, it is an errback handler,\n        //so remove it.\n        if (typeof relName === 'function') {\n            relName = forceSync;\n            forceSync = alt;\n        }\n\n        //Simulate async callback;\n        if (forceSync) {\n            main(undef, deps, callback, relName);\n        } else {\n            //Using a non-zero value because of concern for what old browsers\n            //do, and latest browsers \"upgrade\" to 4 if lower value is used:\n            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:\n            //If want a value immediately, use require('id') instead -- something\n            //that works in almond on the global level, but not guaranteed and\n            //unlikely to work in other AMD implementations.\n            setTimeout(function () {\n                main(undef, deps, callback, relName);\n            }, 4);\n        }\n\n        return req;\n    };\n\n    /**\n     * Just drops the config on the floor, but returns req in case\n     * the config return value is used.\n     */\n    req.config = function (cfg) {\n        return req(cfg);\n    };\n\n    /**\n     * Expose module registry for debugging and tooling\n     */\n    requirejs._defined = defined;\n\n    define = function (name, deps, callback) {\n        if (typeof name !== 'string') {\n            throw new Error('See almond README: incorrect module build, no module name');\n        }\n\n        //This module may not have dependencies\n        if (!deps.splice) {\n            //deps is not an array, so probably means\n            //an object literal or factory function for\n            //the value. Adjust args.\n            callback = deps;\n            deps = [];\n        }\n\n        if (!hasProp(defined, name) && !hasProp(waiting, name)) {\n            waiting[name] = [name, deps, callback];\n        }\n    };\n\n    define.amd = {\n        jQuery: true\n    };\n}());\n\ndefine(\"../../../node_modules/almond/almond\", function(){});\n\n","/**\n * Renders an application menu item from a domain model.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/menuItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-app-menu-item',\n\n\t\tinitialize: function() {\n\t\t\t// Listen for domain changes and re-render when we detect one.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\n\t\t\t// When we change the model (to disable it, for example), re-render.\n\t\t\tthis.model.on( 'change', this.render, this );\n\t\t},\n\n\t\t/**\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\t// Listen for clicks on our app menu.\n\t\tevents: {\n\t\t\t'click a': 'clickAppMenu'\n\t\t},\n\n\t\t/**\n\t\t * When we click on a menu item, fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * We pass this.model so that we know what item was clicked.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\te event\n\t\t * @return return\n\t\t */\n\t\tclickAppMenu: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e, this.model );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\t/**\n\t\t\t\t * If we have any dashicons in our model, render them.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderDashicons: function() {\n\t\t\t\t\tif ( ! this.dashicons ) return '';\n\n\t\t\t\t\tvar icon = document.createElement( 'span' );\n\t\t\t\t\ticon.classList.add( 'dashicons' );\n\t\t\t\t\ticon.classList.add( this.dashicons );\n\n\t\t\t\t\treturn icon.outerHTML;\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Render classes for our menu item, including active.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = this.classes;\n\t\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tif ( currentDomain.get( 'id' ) == this.id ) {\n\t\t\t\t\t\tclasses += ' active';\n\t\t\t\t\t}\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * If our menu is a link (like preview), render its url.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderUrl: function() {\n\t\t\t\t\tif ( '' != this.url ) {\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\t\t\t\treturn this.url + formModel.get( 'id' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '#';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * If our menu is a link (like preview), render its target.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderTarget: function() {\n\t\t\t\t\tif ( '' != this.url ) {\n\t\t\t\t\t\treturn '_blank';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '_self';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * If our menu item is disabled, output 'disabled'\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderDisabled: function() {\n\t\t\t\t\tif ( this.disabled ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Collection view that takes our app menu items and renders an individual view for each.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/menu',['views/app/menuItem'], function( appMenuItemView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\tchildView: appMenuItemView,\n\n\t\t/**\n\t\t * When we show this view, get rid of the extra <div> tag added by backbone.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonShow: function() {\n\t\t\tjQuery( this.el ).find( 'li:last' ).unwrap();\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","/**\n * Renders the action buttons to the right of the app menu. i.e. Publish\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/menuButtons',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'span',\n\t\ttemplate: '#tmpl-nf-app-header-action-button',\n\n\t\tinitialize: function() {\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:loading', this.render, this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.bounceIcon, this );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\n\t    \t\t/**\n\t    \t\t * Render our Publish button. If we're loading, render the loading version.\n\t    \t\t *\n\t    \t\t * @since  3.0\n\t    \t\t * @return string\n\t    \t\t */\n\t    \t\trenderPublish: function() {\n\t    \t\t\tif ( that.publishWidth ) {\n\t    \t\t\t\tthis.publishWidth = that.publishWidth + 'px';\n\t    \t\t\t} else {\n\t    \t\t\t\tthis.publishWidth = 'auto';\n\t    \t\t\t}\n\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'loading' ) ) {\n\t    \t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-header-publish-loading' );\n\t    \t\t\t} else {\n\t    \t\t\t\tvar template = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-app-header-publish-button' );\n\t    \t\t\t}\n\t    \t\t\treturn template( this );\n\t    \t\t},\n\n\t    \t\t/**\n\t    \t\t * If our app state is clean, disable publish.\n\t    \t\t * \n\t    \t\t * @since  3.0\n\t    \t\t * @return string\n\t    \t\t */\n\t    \t\tmaybeDisabled: function() {\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t    \t\t\t\treturn 'disabled';\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t},\n\n\t    \t\t/**\n\t    \t\t * [DEPRECATED] If our app isn't clean, render our 'viewChanges' button.\n\t    \t\t * @since  version\n\t    \t\t * @return {[type]} [description]\n\t    \t\t */\n\t    \t\tmaybeRenderCancel: function() {\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\n\t    \t\trenderPublicLink: function() {\n\t\t\t\t\t\t// Don't show public link if the form has a temp ID\n\t\t\t\t\t\tvar formModel = Backbone.Radio.channel('app').request('get:formModel');\n\t\t\t\t\t\tif (isNaN(formModel.get('id'))) { return };\n\t\t\t\t\t\t// Otherwise, display normally\n\t    \t\t\tvar publicLink = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-app-header-public-link' );\n\t    \t\t\t\treturn publicLink( this );\n\t    \t\t},\n\t\t\t};\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tvar publishEL = jQuery( this.el ).find( '.publish' );\n\t\t\t// this.publishWidth = jQuery( publishEL ).outerWidth( true );\n\t\t},\n\n\t\t/**\n\t\t * Listen for clicks on the Publish or view changes button.\n\t\t * @type {Object}\n\t\t */\n\t\tevents: {\n\t\t\t'click .publish': 'clickPublish',\n\t\t\t'click .viewChanges': 'clickViewChanges',\n\t\t\t'click .publicLink': 'clickPublicLink',\n\t\t},\n\n\t\t/**\n\t\t * When we click publish, trigger a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tclickPublish: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:publish', e );\n\t\t},\n\n\t\t/**\n\t\t * When we click view changes, trigger a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tclickViewChanges: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:viewChanges', e );\n\t\t},\n\n\t\tclickPublicLink: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:publicLink', e );\n\t\t},\n\n\t\tbounceIcon: function( changeModel ) {\n\t\t\tjQuery( this.el ).find( '.dashicons-backup' ).effect( 'bounce', { times: 3 }, 600 );\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Renders the action buttons to the right of the app menu. i.e. Publish\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/mobileMenuButton',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'span',\n\t\ttemplate: '#tmpl-nf-mobile-menu-button',\n\n\t\tinitialize: function() {\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\t    \t\t/**\n\t    \t\t * If our app state is clean, disable button.\n\t    \t\t * \n\t    \t\t * @since  3.0\n\t    \t\t * @return string\n\t    \t\t */\n\t    \t\tmaybeDisabled: function() {\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t    \t\t\t\treturn 'disabled';\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t}\n\t\t\t};\n\t\t},\n\n\t\t/**\n\t\t * Listen for clicks on the mobile menu button.\n\t\t * @type {Object}\n\t\t */\n\t\tevents: {\n\t\t\t'click .nf-mobile-menu': 'clickMobileMenu'\n\t\t},\n\n\t\t/**\n\t\t * When we click publish, trigger a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tclickMobileMenu: function( e) {\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).toggleClass( 'nf-menu-expand' );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Main application header. Includes links to all of our domains.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/header',['views/app/menu', 'views/app/menuButtons', 'views/app/mobileMenuButton'], function( appMenuCollectionView, appMenuButtonsView, mobileMenuButtonView ) {\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-app-header',\n\n\t\tregions: {\n\t\t\t// Menu is our main app menu.\n\t\t\tmenu: '.nf-app-menu',\n\t\t\t// Buttons represents the 'view changes' and 'Publish' buttons.\n\t\t\tbuttons: '.nf-app-buttons',\n\t\t\tmobileMenuButton: '.nf-mobile-menu-button'\n\t\t},\n\n\t\t/**\n\t\t * Since this is a layout region, we need to fill the two areas: menu and buttons whenever we show this view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\t// Get our domains\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\t// show the menu area using the appropriate view, passing our domain collection.\n\t\t\tthis.menu.show( new appMenuCollectionView( { collection: appDomainCollection } ) );\n\t\t\tthis.buttons.show( new appMenuButtonsView() );\n\t\t\tthis.mobileMenuButton.show( new mobileMenuButtonView() );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click #nf-logo': 'clickLogo'\n\t\t},\n\n\t\tclickLogo: function( e ) {\n\t\t\t\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n","/**\n * Renders our sub-header. i.e. add new field, add new action, etc.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/subHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-sub-header'\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders our builder header.\n *\n * This is a layout view and handles two regions:\n * app - menu/buttons\n * subapp - title, add new field, etc.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/builderHeader',[ 'views/app/header', 'views/app/subHeader' ], function( appHeaderView, appSubHeaderView ) {\n\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: \"div\",\n\t\ttemplate: \"#tmpl-nf-header\",\n\n\t\tregions: {\n\t\t\tapp: \"#nf-app-header\",\n\t\t\tformTitle: \"#nf-app-form-title\",\n\t\t\tappSub: \"#nf-app-sub-header\"\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.changeSubHeader );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tthis.app.show( new appHeaderView() );\n\n\t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\tvar formSettings = formData.get( 'settings' );\n\n\t\t\tvar formTitleView = nfRadio.channel( 'views' ).request( 'get:formTitle' );\n\t\t\tthis.formTitle.show( new formTitleView( { model: formSettings } ) );\n\n\t\t\tthis.changeSubHeader();\n\t\t},\n\n\t\tchangeSubHeader: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar subHeaderView = currentDomain.get( 'getSubHeaderView' ).call( currentDomain );\n\t\t\tthis.appSub.show( subHeaderView );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders our builder.\n *\n * This is a layout view and handles three regions:\n * gutterLeft - gutter to the left of our main content area\n * body - main content area\n * gutterRight - gutter to the right of our main content area\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/main',[], function() {\n\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main',\n\t\tclassName: 'nf-main-test',\n\t\tmaybeDone: false,\n\n\t\toffsetRight: false,\n\t\toffsetLeft: false,\n\n\t\tregions: {\n\t\t\tgutterLeft: '#nf-main-gutter-left',\n\t\t\tbody: '#nf-main-body',\n\t\t\tgutterRight: '#nf-main-gutter-right'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:mainEl', this.getMainEl, this );\n\n\t\t\t/*\n\t\t\t * Make sure that our gutters resize to match our screen upon resize or drawer open/close.\n\t\t\t */\n\t\t\tjQuery( window ).on( 'resize', { context: this }, this.resizeBothGutters );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:open', this.setBothGuttersAbsolute );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.setBothGuttersFixed );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:close', this.setBothGuttersAbsolute );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.setBothGuttersFixed );\n\t\t\t// ... or Domain Change.\n            this.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', function(){\n                // @todo Using a timeout feels like a hack, but there may be a timing issue here.\n            \tsetTimeout(function(){\n                    nfRadio.channel( 'app' ).request( 'update:gutters' );\n\t\t\t\t}, 300, this );\n\t\t\t}, this );\n\n\n\t\t\t/*\n\t\t\t * Reply to messages requesting that we resize our gutters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:gutters', this.updateGutters, this );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tnfRadio.channel( 'main' ).trigger( 'show:main', this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar bodyView = currentDomain.get( 'getMainContentView' ).call( currentDomain );\n\t\t\tthis.body.show( bodyView );\n\n\t\t\tvar gutterLeftView = currentDomain.get( 'getGutterLeftView' ).call( currentDomain );\n\t\t\tthis.gutterLeft.show( gutterLeftView );\n\n\t\t\tvar gutterRightView = currentDomain.get( 'getGutterRightView' ).call( currentDomain );\n\t\t\tthis.gutterRight.show( gutterRightView );\n\t\t\t\n\t\t\tnfRadio.channel( 'main' ).trigger( 'render:main' );\n\t\t},\n\n\t\tgetMainEl: function() {\n\t\t\treturn jQuery( this.el ).parent();\n\t\t},\n\n\t\tonAttach: function() {\n\t\t\tthis.initialGutterResize();\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tjQuery( window ).off( 'resize', this.resize );\n\t\t},\n\n\t\tinitialGutterResize: function() {\n\t\t\tthis.resizeGutter( this.gutterLeft.el );\n\t\t\tthis.resizeGutter( this.gutterRight.el );\n\t\t\tthis.setBothGuttersFixed( this );\n\t\t},\n\n\t\tresizeBothGutters: function( e ) {\n\t\t\tvar context = ( e ) ? e.data.context : this;\n\n\t\t\tvar leftEl = context.gutterLeft.el;\n\t\t\tvar rightEl = context.gutterRight.el;\n\t\t\t\n\t\t\tcontext.resizeGutter( leftEl, context );\n\t\t\tcontext.resizeGutter( rightEl, context );\n\n\t\t\tcontext.setBothGuttersAbsolute( context );\n\n\t\t\t/*\n\t\t\t * Clear our timeout. If the timeout runs, it means we've stopped resizing.\n\t\t\t */\t\n\t\t\tclearTimeout( context.maybeDone );\n\t\t\t/*\n\t\t\t * Add our timeout.\n\t\t\t */\n\t\t\tcontext.maybeDone = setTimeout( context.setBothGuttersFixed, 100, context );\n\t\t},\n\n\t\tresizeGutter: function( el, context ) {\n\t\t\tvar top = jQuery( el ).offset().top;\n\t\t\tvar viewHeight = jQuery( window ).height();\n\t\t\tvar height = viewHeight - top;\n\t\t\tjQuery( el ).height( height );\n\t\t},\n\n\t\tsetBothGuttersFixed: function( context ) {\n\t\t\tcontext = context || this;\n\n\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\n\t\t\tvar topLeft = offsetLeft.top;\n\t\t\tvar leftLeft = offsetLeft.left;\n\n\t\t\tjQuery( context.gutterLeft.el ).css( { position: 'fixed', left: leftLeft, top: topLeft } );\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\n\t\t\t\n\t\t\tvar offsetRight = jQuery( context.gutterRight.el ).offset();\n\t\t\tvar topRight = offsetRight.top;\n\t\t\tvar leftRight = offsetRight.left;\n\n\t\t\tjQuery( context.gutterRight.el ).css( { position: 'fixed', left: leftRight, top: topRight } );\n\t\t},\n\n\t\tsetBothGuttersAbsolute: function( context ) {\n\t\t\tcontext = context || this;\n\n\t\t\tvar offsetLeft = jQuery( context.gutterLeft.el ).offset();\n\t\t\tvar offsetRight = jQuery( context.gutterRight.el ).offset();\n\n\t\t\tvar scrollTop = jQuery( '#nf-main' ).scrollTop();\n\n\t\t\tjQuery( context.gutterLeft.el ).css( { position: 'absolute', left: 0, top: scrollTop } );\n\t\t\tjQuery( context.gutterRight.el ).css( { position: 'absolute', top: scrollTop, right: 0, left: 'auto' } );\n\t\t},\n\n\t\tupdateGutters: function() {\n\t\t\tthis.resizeBothGutters();\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Renders an application menu item from a domain model.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/mobileMenuItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-mobile-menu-item',\n\n\t\t/**\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\t// Listen for clicks on our app menu.\n\t\tevents: {\n\t\t\t'click a': 'clickAppMenu'\n\t\t},\n\n\t\t/**\n\t\t * When we click on a menu item, fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * We pass this.model so that we know what item was clicked.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\te event\n\t\t * @return return\n\t\t */\n\t\tclickAppMenu: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e, this.model );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\t/**\n\t\t\t\t * If we have any dashicons in our model, render them.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderDashicons: function() {\n\t\t\t\t\tif ( ! this.mobileDashicon ) return '';\n\n                    var icon = document.createElement( 'span' );\n                    icon.classList.add( 'dashicons' );\n                    icon.classList.add( this.mobileDashicon );\n\n                    return icon.outerHTML;\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Render classes for our menu item, including active.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = this.classes;\n\t\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tif ( currentDomain.get( 'id' ) == this.id ) {\n\t\t\t\t\t\tclasses += ' active';\n\t\t\t\t\t}\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * If our menu is a link (like preview), render its url.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderUrl: function() {\n\t\t\t\t\tif ( '' != this.url ) {\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\t\t\t\treturn this.url + formModel.get( 'id' );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '#';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * If our menu is a link (like preview), render its target.\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderTarget: function() {\n\t\t\t\t\tif ( '' != this.url ) {\n\t\t\t\t\t\treturn '_blank';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '_self';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t/**\n\t\t\t\t * If our menu item is disabled, output 'disabled'\n\t\t\t\t * \n\t\t\t\t * @since  3.0\n\t\t\t\t * @return string\n\t\t\t\t */\n\t\t\t\trenderDisabled: function() {\n\t\t\t\t\tif ( this.disabled ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Single item view used for the menu drawer.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/mobileMenu',['views/app/mobileMenuItem'], function( mobileMenuItemView ) {\n\tvar view = Marionette.CompositeView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-mobile-menu',\n\t\tchildView: mobileMenuItemView,\n\n\t\tinitialize: function() {\n\t\t\t// Listen to changes on the app 'clean' state. When it changes, re-render.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.render, this );\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.secondary' ).append( childView.el );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\t/**\n\t    \t\t * If our app state is clean, disable button.\n\t    \t\t * \n\t    \t\t * @since  3.0\n\t    \t\t * @return string\n\t    \t\t */\n\t    \t\tmaybeDisabled: function() {\n\t    \t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t    \t\t\t\treturn 'disabled';\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t}\n\t\t\t};\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-publish': 'clickPublish'\n\t\t},\n\n\t\t/**\n\t\t * When we click publish, trigger a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tclickPublish: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:publish', e );\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).toggleClass( 'nf-menu-expand' );\n\t\t},\n\t});\n\n\treturn view;\n} );\n","/**\n * Empty drawer content view.\n * Called before we close the drawer.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-empty'\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders our drawer region\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer',['views/app/drawer/contentEmpty'], function( drawerEmptyView ) {\n\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttemplate: '#tmpl-nf-drawer',\n\n\t\tregions: {\n\t\t\theader: '#nf-drawer-header',\n\t\t\tcontent: '#nf-drawer-content',\n\t\t\tfooter: '#nf-drawer-footer'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawerEl', this.getEl, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'load:drawerContent', this.loadContent, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'empty:drawerContent', this.emptyContent, this );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tjQuery( this.el ).parent().perfectScrollbar();\n\t\t},\n\n\t\tloadContent: function( drawerID, data ) {\n\t\t\tvar drawer = nfRadio.channel( 'app' ).request( 'get:drawer', drawerID );\n\t\t\tvar contentView = drawer.get( 'getContentView' ).call( drawer, data );\n\t\t\tvar headerView = drawer.get( 'getHeaderView' ).call( drawer, data );\n\t\t\tvar footerView = drawer.get( 'getFooterView' ).call( drawer, data );\n\n\t\t\tthis.header.show( headerView );\n\t\t\tthis.content.show( contentView );\n\t\t\tthis.footer.show( footerView );\n\n\t\t},\n\n\t\temptyContent: function() {\n\t\t\tthis.header.empty();\n\t\t\tthis.content.empty();\n\t\t\tthis.footer.empty();\n\t\t},\n\n\t\tgetEl: function() {\n\t\t\treturn jQuery( this.el ).parent();\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-toggle-drawer': 'clickToggleDrawer'\n\t\t},\n\n\t\tclickToggleDrawer: function() {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:toggleDrawerSize' );\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Single item view used for merge tags.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'li',\n\n\t\ttemplate: '#tmpl-nf-merge-tags-item',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:active', this.render );\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:active', this.render, this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click a': 'clickTag'\n\t\t},\n\n\t\tclickTag: function( e ) {\n\t\t\tnfRadio.channel( 'mergeTags' ).trigger( 'click:mergeTag', e, this.model );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tif ( this.active ) {\n\t\t\t\t\t\treturn 'active';\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Merge tags popup section\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagsSection',['views/app/drawer/mergeTagItem'], function( mergeTagItemView ) {\n\tvar view = Marionette.CompositeView.extend({\n\t\ttagName: 'div',\n\t\tchildView: mergeTagItemView,\n\t\ttemplate: '#tmpl-nf-merge-tags-section',\n\n\t\tinitialize: function() {\n\t\t\tthis.collection = this.model.get( 'tags' );\n\t\t\tthis.model.on( 'change', this.render, this );\n\t\t\tif ( 'fields' == this.model.get( 'id' ) ) {\n\t\t\t\t// var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\t// fieldCollection.on( 'all', this.updateFields, this );\n\t\t\t}\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change', this.render );\n\t\t\tif ( 'fields' == this.model.get( 'id' ) ) {\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\tfieldCollection.off( 'all', this.updateFields, this );\n\t\t\t}\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.merge-tags' ).append( childView.el );\n\t\t},\n\n\t\tupdateFields: function() {\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\tthis.model.set( 'tags', fieldCollection );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Model that represents our merge tags.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/mergeTagModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tactive: false,\n\t\t\texclude: false\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collections of merge tags.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/mergeTagCollection',['models/app/mergeTagModel'], function( mergeTagModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: mergeTagModel\n\t} );\n\treturn collection;\n} );\n","/**\n * Merge tags popup\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagsContent',['views/app/drawer/mergeTagsSection', 'models/app/mergeTagCollection'], function( mergeTagsSectionView, MergeTagCollection ) {\n\tvar view = Marionette.CollectionView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-merge-tags-content',\n\t\tchildView: mergeTagsSectionView,\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:view', this.getMergeTagsView, this );\n\t\t},\n\n\t\treRender: function( settingModel ) {\n\t\t\tvar mergeTagCollection = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\n\t\t\tvar defaultGroups = mergeTagCollection.where( { default_group: true } );\n\n\t\t\t/*\n\t\t\t * For the Actions Domain, Add Calc Merge Tags as a Default Group.\n\t\t\t */\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tif( 'actions' == currentDomain.get( 'id' ) ){\n\t\t\t\tvar calcMergeTagGroup = mergeTagCollection.where( { id: 'calcs' } );\n                defaultGroups = defaultGroups.concat( calcMergeTagGroup );\n            }\n\n\t\t\tthis.collection = new MergeTagCollection( defaultGroups );\n\t\t\tvar that = this;\n\t\t\tvar useMergeTags = settingModel.get( 'use_merge_tags' );\n\t\t\tif ( 'object' == typeof useMergeTags ) {\n\t\t\t\tif ( 'undefined' != typeof useMergeTags.exclude ) {\n\t\t\t\t\t_.each( useMergeTags.exclude, function( exclude ) {\n\t\t\t\t\t\tthat.collection.remove( exclude )\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\tif ( 'undefined' != typeof useMergeTags.include ) {\n\t\t\t\t\t_.each( mergeTagCollection.models, function( sectionModel ) {\n\t\t\t\t\t\tif ( -1 != useMergeTags.include.indexOf( sectionModel.get( 'id' ) ) ) {\n\t\t\t\t\t\t\t// console.log( sectionModel );\n\t\t\t\t\t\t\tthat.collection.add( sectionModel );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.render();\n\t\t},\n\n\t\tgetMergeTagsView: function() {\n\t\t\treturn this;\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Builder view.\n *\n * This layout view has regions that represent our application areas:\n * header\n * main\n * menuDrawer - Mobile side-menu\n * drawer\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/builder',['views/app/builderHeader', 'views/app/main', 'views/app/mobileMenu', 'views/app/drawer', 'views/app/drawer/mergeTagsContent'], function( headerView, mainView, mobileMenuView, drawerView, mergeTagsContentView ) {\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttemplate: \"#tmpl-nf-builder\",\n\t\tel: '#nf-builder',\n\n\t\tregions: {\n\t\t\theader: \"#nf-header\",\n\t\t\tmain: \"#nf-main\",\n\t\t\tmenuDrawer: \"#nf-menu-drawer\",\n\t\t\tdrawer: \"#nf-drawer\",\n\t\t\tmergeTagsContent: '.merge-tags-content'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Respond to requests asking for the builder dom element.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:builderEl', this.getBuilderEl, this );\n\t\t\t// Respond to requests asking for the builder view\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:builderView', this.getBuilderView, this );\n\t\t\t// Layout views aren't self-rendering.\n\t\t\tthis.render();\n\t\t\tvar mergeTags = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\n\t\t\tvar mergeTagsClone = mergeTags.clone();\n\t\t\tthis.mergeTagsContent.show( new mergeTagsContentView( { collection: mergeTagsClone } ) );\n\t\t\t// Show our header.\n\t\t\tthis.header.show( new headerView() );\n\t\t\t// Show our main content.\n\t\t\tthis.main.show( new mainView() );\n\t\t\t// Show our mobile menu\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tthis.menuDrawer.show( new mobileMenuView( { collection: appDomainCollection } ) );\n\t\t\t// Show our drawer.\n\t\t\tthis.drawer.show( new drawerView() );\n\n\n\t\t},\n\n\t\tonRender: function() {\n\n\t\t},\n\n\t\tgetBuilderEl: function() {\n\t\t\treturn this.el;\n\t\t},\n\n\t\tgetBuilderView: function() {\n\t\t\treturn this;\n\t\t},\n\n\t\t// Listen for clicks\n\t\tevents: {\n\t\t\t'click .nf-open-drawer': 'openDrawer',\n\t\t\t'click .nf-change-domain': 'changeDomain',\n\t\t\t'click .nf-close-drawer': 'closeDrawer'\n\t\t},\n\n\t\t/**\n\t\t * Someone clicked to open a drawer, so fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  Object \te \tevent\n\t\t * @return void\n\t\t */\n\t\topenDrawer: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:openDrawer', e );\n\t\t},\n\t\t/**\n\t\t * Someone clicked to close a drawer, so fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t *\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tcloseDrawer: function() {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:closeDrawer' );\n\t\t},\n\t\t/**\n\t\t * Someone clicked to change the domain, so fire a radio event.\n\t\t * This lets us separate the logic from the click event and view.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  Object \te \tevent\n\t\t * @return void\n\t\t */\n\t\tchangeDomain: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:menu', e );\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n\n","\ndefine( 'controllers/app/remote',[], function() {\n    return Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'setting' ), 'remote', this.addListener );\n        },\n\n        addListener: function( model, dataModel ) {\n\n            var listenTo = model.get( 'remote' ).listen;\n\n            // TODO: Change seems to be triggering twice on each update.\n            this.listenTo( nfRadio.channel( 'fieldSetting-' + listenTo ), 'update:setting', this.updateSetting );\n            this.listenTo( nfRadio.channel( 'actionSetting-' + listenTo ), 'update:setting', this.updateSetting );\n\n            this.listenTo( nfRadio.channel( 'setting-type-' + model.get( 'type' ) ), 'click:extra', this.clickExtra );\n\n            model.listenTo( nfRadio.channel( 'setting-remote' ), 'get:remote', this.getRemote, model );\n\n            // Auto-trigger get:remote on drawer load.\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\n        },\n\n        clickExtra: function( e, settingModel, dataModel, settingView ) {\n            jQuery( e.srcElement ).addClass( 'spin' );\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\n        },\n\n        updateSetting: function( dataModel, settingModel ) {\n            nfRadio.channel( 'setting-remote' ).trigger( 'get:remote', dataModel );\n        },\n\n        getRemote: function( dataModel ) {\n\n            var remote = this.get( 'remote' );\n\n            var data = {\n                parentValue: dataModel.get( remote.listen ),\n                action: remote.action,\n                security: ( remote.security ) ? remote.security : nfAdmin.ajaxNonce\n            };\n\n            // TODO: Disable setting and lock drawer while updating.\n            var that = this;\n            jQuery.post( ajaxurl, data, function( response ){\n                var response = JSON.parse( response );\n\n                if( 'textbox' == that.get( 'type' ) ) {\n                    dataModel.set( that.get('name'), response.value );\n                }\n\n                if( 'select' == that.get( 'type' ) ) {\n                    that.set( 'options', response.options );\n                    that.trigger( 'rerender' );\n                }\n            });\n        },\n\n    });\n} );\n","/**\n * Handles opening and closing our drawer. This is where we display settings for fields, actions, and settings.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/drawer',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our drawer-related click events.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:openDrawer', this.clickOpenDrawer );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:closeDrawer', this.closeDrawer );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:toggleDrawerSize', this.toggleDrawerSize );\n\n\t\t\t// Reply to direct requests to open or close the drawer.\n\t\t\tnfRadio.channel( 'app' ).reply( 'open:drawer', this.openDrawer, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'close:drawer', this.closeDrawer, this );\n\n\t\t\t/*\n\t\t\t * When we close the drawer, we have to figure out what the right position should be.\n\t\t\t * This listens to requests from other parts of our app asking what the closed right position is.\n\t\t\t */\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:closedRightPos', this.getClosedDrawerPos, this );\n\n\t\t\t// Reply to requests to prevent our drawer from closing\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'prevent:close', this.preventClose, this );\n\t\t\t// Reply to requests to enable drawer closing\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'enable:close', this.enableClose, this );\n\t\t\t// Reply to requests for our disabled/enabled state.\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:preventClose', this.maybePreventClose, this );\n\n\t\t\t/*\n\t\t\t * Object that holds our array of 'prevent close' values.\n\t\t\t * We use an array so that registered requests can unregister and not affect each other.\n\t\t\t */\n\t\t\tthis.objPreventClose = {};\n\n\t\t\t/*\n\t\t\t *  Listen to focus events on the filter and stop our interval when it happens.\n\t\t\t *  This is to fix a bug that can cause the filter to gain focus every few seconds.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:focused', this.filterFocused );\n\t\t},\n\n\t\t/**\n\t\t * Handles closing our drawer\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tcloseDrawer: function() {\n\t\t\t// Get our current domain.\n\t\t\tvar currentDrawer = nfRadio.channel( 'app' ).request( 'get:currentDrawer' );\n            if ( ! currentDrawer || this.maybePreventClose() ) {\n                return false;\n            }\n\n\t\t\t// Triggers the before close drawer action on our current domain's drawer channel.\n\t\t\tnfRadio.channel( 'drawer-' + currentDrawer.get( 'id' ) ).trigger( 'before:closeDrawer' );\n\t\t\t/*\n\t\t\t * The 'before:closeDrawer' message is deprecated as of version 3.0 in favour of 'before:close'.\n\t\t\t * TODO: Remove this radio message in the future.\n\t\t\t */\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:closeDrawer' );\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:close' );\n\t\t\t// Send a message to our drawer to empty its contents.\n\t\t\tnfRadio.channel( 'drawer' ).request( 'empty:drawerContent' );\n\n\t\t\t// To close our drawer, we have to add our closed class to the builder and remove the opened class.\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).addClass( 'nf-drawer-closed' ).removeClass( 'nf-drawer-opened' );\n\t\t\tjQuery( builderEl ).removeClass( 'disable-main' );\n\n\t\t\t// Get the right position of our closed drawer. Should be container size in -px.\n\t\t\tvar rightClosed = this.getClosedDrawerPos();\n\n\t\t\t// Get our drawer element and give change the 'right' property to our closed position.\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tjQuery( drawerEl ).css( { 'right': rightClosed } );\n\n\t\t\t// In order to access properties in 'this' context in our interval below, we have to set it here.\n\t\t\tvar that = this;\n\n\t\t\t/*\n\t\t\t * Since jQuery can't bind to a CSS change, we poll every .15 seconds to see if we've closed the drawer.\n\t\t\t *\n\t\t\t * Once our drawer is closed, we:\n\t\t\t * clear our interval\n\t\t\t * request that the app change it's current drawer to false\n\t\t\t * trigger a drawer closed message\n\t\t\t */\n\t\t\tthis.checkCloseDrawerPos = setInterval( function() {\n\t        \tif ( rightClosed == jQuery( drawerEl ).css( 'right' ) ) {\n\t        \t\tclearInterval( that.checkCloseDrawerPos );\n\t\t    \t\tnfRadio.channel( 'app' ).request( 'update:currentDrawer', false );\n\t\t    \t\tnfRadio.channel( 'drawer' ).trigger( 'closed' );\n\t\t    \t\t/*\n\t\t    \t\t * Reset the add new button z-index to 98.\n\t\t    \t\t */\n\t\t    \t\tjQuery( '.nf-master-control' ).css( 'z-index', 98 );\n\t\t    \t\tjQuery( '.nf-secondary-control' ).css( 'z-index', 98 );\n\t\t    \t\t// jQuery( drawerEl ).scrollTop( 0 );\n\t        \t}\n\t\t\t}, 150 );\n\t\t},\n\n\t\t/**\n\t\t * Click handler for our 'open drawer' event.\n\t\t * @since  3.0\n\t\t * @param  e jQuery event\n\t\t * @return void\n\t\t */\n\t\tclickOpenDrawer: function( e ) {\n\t\t\tvar drawerID = jQuery( e.target ).data( 'drawerid' );\n\t\t\tthis.openDrawer( drawerID );\n\t\t},\n\n\t\t/**\n\t\t * Open our drawer.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string drawerID \tID of the drawer we want to open.\n\t\t * @param  object data     \tOptional data that we want to pass to the drawer.\n\t\t * @return void\n\t\t */\n\t\topenDrawer: function( drawerID, data ) {\n\t\t\tif ( this.maybePreventClose() ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// If we haven't sent a data object, set the variable to an empty object.\n\t\t\tdata = data || {};\n\n\t\t\t/*\n\t\t\t * If we're dealing with something that has a model, set the proper active state.\n\t\t\t *\n\t\t\t * TODO: Make this more dynamic. I'm not sure that it fits in the drawer controller.\n\t\t\t */\n\t\t\tif ( 'undefined' != typeof data.model ) {\n\t\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\t\t\t\tnfRadio.channel( currentDomainID ).request( 'clear:editActive' );\n\t\t\t\tdata.model.set( 'editActive', true );\n\t\t\t\tthis.dataModel = data.model;\n\t\t\t}\n\n\t\t\t// Send out a message requesting our drawer view to load the content for our drawer ID.\n\t\t\tnfRadio.channel( 'drawer' ).request( 'load:drawerContent', drawerID, data );\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'before:open' );\n\n\t\t\t// To open our drawer, we have to add our opened class to our builder element and remove the closed class.\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).addClass( 'nf-drawer-opened' ).removeClass( 'nf-drawer-closed' );\n\n\t\t\t// To open our drawer, we have to set the right position of our drawer to 0px.\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tjQuery( drawerEl ).css( { 'right': '0px' } );\n\n\t\t\t// In order to access properties in 'this' context in our interval below, we have to set it here.\n\t\t\tvar that = this;\n\n\t\t\t/*\n\t\t\t * Since jQuery can't bind to a CSS change, we poll every .15 seconds to see if we've opened the drawer.\n\t\t\t *\n\t\t\t * Once our drawer is opened, we:\n\t\t\t * clear our interval\n\t\t\t * focus our filter\n\t\t\t * request that the app update its current drawer to the one we opened\n\t\t\t * trigger a drawer opened message\n\t\t\t */\n\t\t\tthis.hasFocus = false;\n\n\t\t\t/*\n\t\t\t * Set our add new button z-index to 0;\n\t\t\t */\n\t\t\tjQuery( '.nf-master-control' ).css( 'z-index', 0 );\n\t\t\tjQuery( '.nf-secondary-control' ).css( 'z-index', 0 );\n\n\t\t\tthis.checkOpenDrawerPos = setInterval( function() {\n\t        \tif ( '0px' == jQuery( drawerEl ).css( 'right' ) ) {\n\t        \t\tclearInterval( that.checkOpenDrawerPos );\n\t\t\t\t\tif ( ! that.hasFocus ) {\n\t\t        \t\tthat.focusFilter();\n\t\t\t\t\t\tthat.hasFocus = true;\n\t\t\t    \t\tnfRadio.channel( 'app' ).request( 'update:currentDrawer', drawerID );\n\t\t\t    \t\tjQuery( drawerEl ).scrollTop( 0 );\n\t\t\t    \t\tnfRadio.channel( 'drawer' ).trigger( 'opened' );\n\t\t\t\t\t}\n\t        \t}\n\t\t\t}, 150 );\n\t\t},\n\n\t\t/**\n\t\t * Toggle the drawer from half to full screen and vise-versa\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\ttoggleDrawerSize: function() {\n\t\t\t// Get our drawer element.\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\t// toggle our drawer size class.\n\t\t\tjQuery( drawerEl ).toggleClass( 'nf-drawer-expand' );\n\t\t},\n\n\t\t/**\n\t\t * Focus our filter\n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n        focusFilter: function() {\n        \t// Get our filter element\n        \tvar filterEl = nfRadio.channel( 'drawer' ).request( 'get:filterEl' );\n        \t// Focus\n        \tjQuery( filterEl ).focus();\n        },\n\n        /**\n         * Get the CSS right position (in px) of the closed drawer element.\n         * This is calculated by:\n         * getting the width of the builder element\n         * add 300 pixels\n         * make it negative\n         *\n         * @since  3.0\n         * @return void\n         */\n        getClosedDrawerPos: function() {\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tvar closedPos = jQuery( builderEl ).width() + 300;\n\t\t\treturn '-' + closedPos + 'px';\n        },\n\n        /**\n         * Check to see if anything has registered a prevent close key.\n         *\n         * @since  3.0\n         * @return boolean\n         */\n        maybePreventClose: function() {\n        \tif ( 0 == Object.keys( this.objPreventClose ).length ) {\n        \t\treturn false;\n        \t} else {\n        \t\treturn true;\n        \t}\n        },\n\n        /**\n         * Register a prevent close key.\n         *\n         * @since  3.0\n         * @param  string \tkey unique id for our 'prevent close' setting.\n         * @return void\n         */\n        preventClose: function( key ) {\n        \tthis.objPreventClose[ key ] = true;\n        \t/*\n        \t * When we disable closing the drawer, add the disable class.\n        \t */\n        \t// Get our current drawer.\n\t\t\tthis.dataModel.set( 'drawerDisabled', true );\n        },\n\n        /**\n         * Remove a previously registered prevent close key.\n         *\n         * @since  3.0\n         * @param  string \tkey unique id for our 'prevent close' setting.\n         * @return void\n         */\n        enableClose: function( key ) {\n        \tdelete this.objPreventClose[ key ];\n        \t /*\n        \t * When we remove all of our disables preventing closing the drawer, remove the disable class.\n        \t */\n        \tif ( ! this.maybePreventClose() && 'undefined' != typeof this.dataModel ) {\n\t        \t// Get our current drawer.\n\t\t\t\tthis.dataModel.set( 'drawerDisabled', false );\n        \t}\n        },\n\n        /**\n         * When we focus our filter, make sure that our open drawer interval is cleared.\n         *\n         * @since  3.0\n         * @return void\n         */\n        filterFocused: function() {\n        \tclearInterval( this.checkOpenDrawerPos );\n        },\n\n        getPreventClose: function() {\n        \treturn this.objPreventClose;\n        }\n\t});\n\n\treturn controller;\n} );\n","/**\n * Default drawer header.\n *\n * Includes our filter/search and 'Done' button.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerDefault',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-default',\n\n\t\tinitialize: function() {\n\t\t\tif ( this.model ) {\n\t\t\t\t// Listen for our drawer being disabled.\n\t\t\t\tthis.model.on( 'change:drawerDisabled', this.render, this );\t\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When we render, remove the extra div added by backbone and add listeners related to our filter.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\t// Remove extra wrapping div.\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t\t// Respond to requests related to our filter.\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'clear:filter', this.clearFilter, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'blur:filter', this.blurFilter, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:filterEl', this.getEl, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tif ( this.model ) {\n\t\t\t\tthis.model.off( 'change:drawerDisabled', this.render );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'keyup .nf-filter'\t: 'maybeChangeFilter',\n\t\t\t'input .nf-filter'\t: 'changeFilter',\n\t\t\t'focus input'\t\t: 'getFocus'\n\t\t},\n\n\t\t/**\n\t\t * When the filter text is changed, trigger an event on our current drawer.\n\t\t * This lets us keep the logic separate from the click event and view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tchangeFilter: function( e ) {\n\t\t\tvar currentDrawer = nfRadio.channel( 'app' ).request( 'get:currentDrawer' );\n\t\t\tnfRadio.channel( 'drawer-' + currentDrawer.get( 'id' ) ).trigger( 'change:filter', e.target.value, e );\n\t\t},\n\n\t\t/**\n\t\t * The user pressed a key. If it's the enter key, then run the change filter function.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te event\n\t\t * @return void\n\t\t */\n\t\tmaybeChangeFilter: function( e ) {\n\t\t\tif ( 13 == e.keyCode ) {\n\t\t\t\te.addObject = true;\n\t\t\t\tthis.changeFilter( e );\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Clear our filter.\n\t\t *\n\t\t * This triggers 'input' on the field, which will trigger a change if necessary.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tclearFilter: function() {\n\t\t\tvar filterEl =  jQuery( this.el ).find( '.nf-filter' );\n\t\t\tif ( '' != jQuery.trim( filterEl.val() ) ) {\n\t\t\t\tfilterEl.val('');\n\t\t\t\tfilterEl.trigger( 'input' );\n\t\t\t\tfilterEl.focus();\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Fire the 'blur' event on our filter. Used to force a change event when the user tabs.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tblurFilter: function() {\n\t\t\tjQuery( this.el ).find( '.nf-filter' ).blur();\n\t\t},\n\n\t\t/**\n\t\t * Return our filter dom element.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\tgetEl: function() {\n\t\t\treturn jQuery( this.el ).find( '.nf-filter' );\n\t\t},\n\n\t\tgetFocus: function() {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'filter:focused' );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderDisabled: function() {\n\t\t\t\t\t// Get our current domain.\n\t\t\t\t\tif ( this.drawerDisabled ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Default drawer footer\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/footerDefault',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-empty'\n\t});\n\n\treturn view;\n} );\n","define( 'models/app/drawerModel',['views/app/drawer/headerDefault', 'views/app/drawer/footerDefault'], function( defaultHeaderView, defaultFooterView ) {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tgetHeaderView: function( data ) {\n\t\t\t\treturn new defaultHeaderView( data );\n\t\t\t},\n\n\t\t\tgetFooterView: function( data ) {\n\t\t\t\treturn new defaultFooterView( data );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds all of our drawer models.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/drawerCollection',['models/app/drawerModel'], function( drawerModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: drawerModel\n\t} );\n\treturn collection;\n} );\n","define( 'views/fields/drawer/stagedField',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-staged-field',\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .dashicons-dismiss': 'removeStagedField'\n\t\t},\n\n\t\tremoveStagedField: function( el ) {\n\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'click:removeStagedField', el, this.model );\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/fields/drawer/stagingEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-staged-fields-empty',\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/fields/drawer/stagingCollection',['views/fields/drawer/stagedField', 'views/fields/drawer/stagingEmpty'], function( stagedFieldView, stagedFieldsEmptyView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\tchildView: stagedFieldView,\n\t\temptyView: stagedFieldsEmptyView,\n\n\t\tactiveClass: 'nf-staged-fields-active', // CSS Class for showing the reservoir.\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:stagedFieldsEl', this.getStagedFieldsEl, this );\n\t\t},\n\n\t\tonShow: function() {\n\n\t\t\tthis.$el = jQuery( this.el ).parent();\n\t\t\tjQuery( this.$el ).find( 'span:first' ).unwrap();\n\t\t\tthis.setElement( this.$el );\n\n\t\t\tvar that = this;\n\n\t\t\tjQuery( this.el ).sortable( {\n\t\t\t\tplaceholder: 'nf-staged-fields-sortable-placeholder',\n\t\t\t\thelper: 'clone',\n\t\t\t\ttolerance: 'pointer',\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'over:stagedFields', e, ui );\n\t\t\t\t},\n\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'out:stagedFields', ui );\n\t\t\t\t},\n\n\t\t\t\treceive: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'receive:stagedFields', ui );\n\t\t\t\t},\n\n\t\t\t\tupdate: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\n\t\t\t\t},\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'start:stagedFields', ui );\n\n\t\t\t\t},\n\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stop:stagedFields', ui );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tjQuery( this.el ).parent().draggable( {\n\t\t\t\topacity: 0.9,\n\t\t\t\tconnectToSortable: '.nf-field-type-droppable',\n\t\t\t\tappendTo: '#nf-main',\n\t\t\t\trefreshPositions: true,\n\t\t\t\tgrid: [ 3, 3 ],\n\t\t\t\ttolerance: 'pointer',\n\n\t\t\t\thelper: function( e ) {\n\t\t\t\t\tvar width = jQuery( e.target ).parent().width();\n\t\t\t\t\tvar height = jQuery( e.target ).parent().height();\n\t\t\t\t\tvar element = jQuery( e.target ).parent().clone();\n\t\t\t\t\tvar left = width / 4;\n\t\t\t\t\tvar top = height / 2;\n\t\t\t\t\tjQuery( this ).draggable( 'option', 'cursorAt', { top: top, left: left } );\n\t\t\t\t\tjQuery( element ).css( 'z-index', 1000 );\n\t\t\t\t\treturn element;\n\t\t\t\t},\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'startDrag:fieldStaging', this, ui );\n\t\t\t\t},\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stopDrag:fieldStaging', this, ui );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tgetStagedFieldsEl: function() {\n\t\t\treturn jQuery( this.el );\n\t\t},\n\n\t\tonAddChild: function() {\n\t\t\tjQuery( this.el ).addClass( this.activeClass );\n\t\t},\n\n\t\tonRemoveChild: function() {\n\t\t\tif( this.hasStagedFields() ) return;\n\t\t\tjQuery( this.el ).removeClass( this.activeClass );\n\t\t},\n\n\t\thasStagedFields: function() {\n\t\t\treturn  0 != this.collection.length;\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n","/**\n * Model for our staged field.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/stagingModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection of staged fields.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/stagingCollection',['models/fields/stagingModel'], function( stagingModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: stagingModel,\n\t\tcomparator: 'order'\n\t} );\n\treturn collection;\n} );\n","define( 'views/fields/drawer/typeSection',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-field-type-section',\n\n\t\tinitialize: function() {\n\t\t\t_.bindAll( this, 'render' );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeSection', this.getTypeSection, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\n\t\t\tthis.dragging = false;\n\t\t\tvar that = this;\n\t\t\t/*\n\t\t\t * If we're on a mobile device, we don't want to enable dragging for our field type buttons.\n\t\t\t */\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( this.el ).find( 'div.nf-field-type-draggable' ).draggable( {\n\t\t\t\t\topacity: 0.9,\n\t\t\t\t\ttolerance: 'pointer',\n\t\t\t\t\tconnectToSortable: '.nf-field-type-droppable',\n\t\t\t\t\trefreshPositions: true,\n\t\t\t\t\tgrid: [ 5, 5 ],\n\t\t\t\t\tappendTo: '#nf-builder',\n\n\t\t\t\t\thelper: function( e ) {\n\t\t\t\t\t\tvar width = jQuery( e.target ).parent().width();\n\t\t\t\t\t\tvar height = jQuery( e.target ).parent().height();\n\t\t\t\t\t\tvar element = jQuery( e.target ).parent().clone();\n\t\t\t\t\t\tvar left = width / 4;\n\t\t\t\t\t\tvar top = height / 2;\n\t\t\t\t\t\tjQuery( this ).draggable( 'option', 'cursorAt', { top: top, left: left } );\n\t\t\t\t\t\tjQuery( element ).css( 'z-index', 1000 );\n\t\t\t\t\t\treturn element;\n\t\t\t\t\t},\n\n\t\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\t\tthat.dragging = true;\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'startDrag:type', this, ui );\n\t\t\t\t\t},\n\n\t\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\t\tthat.dragging = false;\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'stopDrag:type', this, ui );\n\t\t\t\t\t},\n\n\t\t\t\t\tdrag: function(e, ui) {\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'drag:type', this, ui, e );\t\n\t\t\t\t\t}\n\n\t\t\t\t} ).disableSelection();\n\n\t\t\t\tjQuery( this.el ).find( '.nf-item' ).focus( function() {\n\t\t\t    \tjQuery( this ).addClass( 'active' );\n\t\t\t    } ).blur( function() {\n\t\t\t    \tjQuery( this ).removeClass( 'active' );\n\t\t\t    } );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-item': 'clickFieldType',\n\t\t\t'keydown .nf-item': 'maybeClickFieldType',\n\t\t\t'mousedown .nf-item': 'mousedownFieldType'\n\t\t},\n\n\t\tclickFieldType: function( e ) {\n\t\t\tif( e.target.classList.contains('available') ) {\n\t\t\t\tvar id = jQuery( e.target ).data( 'id' );\n\t\t\t\tvar type = nfRadio.channel( 'fields' ).request( 'get:type', id );\n\t\t\t\tvar modalContent = type.get( 'modal_content' );\n\n\t\t\t\tvar fieldModal = new jBox( 'Modal', {\n\t\t\t\t  content: modalContent,\n\t\t\t\t  zIndex:99999999,\n\t\t\t\t  closeButton: 'box',\n\t\t\t\t  overlay: true,\n\t\t\t\t  width: 600,\n\t\t\t\t  repositionOnOpen: true,\n\t\t\t\t  reposition: true\n\t\t\t\t});\n\n\t\t\t\tfieldModal.open();\n\t\t\t} else if ( ! this.dragging ) {\n\t\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:fieldType', e );\n\t\t\t}\n\t\t},\n\n\t\tmousedownFieldType: function( e ) {\n\t\t\tjQuery( e.target).addClass( 'clicked' );\n\t\t\tsetTimeout( function() {\n\t\t\t\tjQuery( e.target ).removeClass( 'clicked' );\n\t\t\t}, 1500 );\n\t\t},\n\n\t\tmaybeClickFieldType: function( e ) {\n\t\t\tif ( 13 == e.keyCode ) {\n\t\t\t\tthis.clickFieldType( e );\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderFieldTypes: function() {\n\t\t\t        var html = document.createElement( 'span' );\n\t\t\t        var that = this;\n\t\t\t        _.each( this.fieldTypes, function( id ) {\n\t\t\t            var type = nfRadio.channel( 'fields' ).request( 'get:type', id );\n\t\t\t            var nicename = type.get( 'nicename' );\n\t\t\t            var icon = type.get( 'icon' );\n\t\t\t            var renderType = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-field-type-button' );\n\t\t\t            var templateHTML = renderType( { id: id, nicename: nicename, icon: icon, type: type, savedField: that.savedField, availableField: that.availableField } );\n                        var htmlFragments = document.createRange().createContextualFragment( templateHTML );\n                        html.appendChild( htmlFragments );\n\t\t\t        } );\n\t\t\t        return html.innerHTML;\n\t\t\t\t},\n\n\t\t\t\tsavedField: function() {\n\t\t\t\t\tif( this.type.get( 'savedField' ) ) {\n\t\t\t\t\t\treturn 'nf-saved';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\tavailableField: function() {\n\t\t\t\t\tif('undefined' !== typeof(this.type.get('modal_content'))) {\n\t\t\t\t\t\treturn 'available';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tgetTypeSection: function() {\n\t\t\treturn this.el;\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/fields/drawer/typeSectionCollection',['views/fields/drawer/typeSection'], function( fieldTypeSectionView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\tchildView: fieldTypeSectionView,\n\n\t\tonShow: function() {\n\t\t\tjQuery( this.el ).find( '.nf-settings' ).unwrap();\n\t\t\tnfRadio.channel( 'fields' ).request( 'clear:editActive' );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","define( 'views/fields/drawer/addField',['views/fields/drawer/stagingCollection', 'models/fields/stagingCollection', 'views/fields/drawer/typeSectionCollection'], function( drawerStagingView, StagingCollection, fieldTypeSectionCollectionView ) {\n\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttemplate: '#tmpl-nf-drawer-content-add-field',\n\n\t\tregions: {\n\t\t\tstaging: '#nf-drawer-staging .nf-reservoir',\n\t\t\tprimary: '#nf-drawer-primary',\n\t\t\tsecondary: '#nf-drawer-secondary'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:fieldTypes', this.filterFieldTypes );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'clear:filter', this.removeFieldTypeFilter );\n\n\t\t\tthis.savedCollection = nfRadio.channel( 'fields' ).request( 'get:savedFields' );\n\t\t\tthis.primaryCollection = this.savedCollection;\n\n\t\t\tthis.fieldTypeSectionCollection = nfRadio.channel( 'fields' ).request( 'get:typeSections' );\n\t\t\tthis.secondaryCollection = this.fieldTypeSectionCollection;\n\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tvar stagingCollection = nfRadio.channel( 'fields' ).request( 'get:staging' );\n\t\t\tthis.staging.show( new drawerStagingView( { collection: stagingCollection } ) );\n\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.primaryCollection } ) );\n\t\t\tthis.secondary.show( new fieldTypeSectionCollectionView( { collection: this.secondaryCollection } ) );\n\t\t},\n\n\t\tgetEl: function() {\n\t\t\treturn jQuery( this.el ).parent();\n\t\t},\n\n\t\tfilterFieldTypes: function( filteredSectionCollection ) {\n\t\t\tthis.primary.reset();\n\t\t\tthis.secondary.reset();\n\t\t\tthis.filteredSectionCollection = filteredSectionCollection;\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.filteredSectionCollection } ) );\n\t\t},\n\n\t\tremoveFieldTypeFilter: function () {\n\t\t\tthis.primary.show( new fieldTypeSectionCollectionView( { collection: this.savedCollection } ) );\n\t\t\tthis.secondary.show( new fieldTypeSectionCollectionView( { collection: this.fieldTypeSectionCollection } ) );\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n","define( 'views/app/drawer/itemSettingCollection',[], function() {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\n\t\t},\n\n\t\tgetChildView: function( model ) {\n\t\t\treturn nfRadio.channel( 'app' ).request( 'get:settingChildView', model );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","define( 'views/app/drawer/itemSettingGroup',['views/app/drawer/itemSettingCollection'], function( itemSettingCollectionView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-field-setting-group',\n\t\t\n\t\tregions: {\n\t\t\tsettings: '.nf-field-settings'\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.model.on( 'change', this.render, this );\n\t\t\tthis.dataModel = data.dataModel;\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change', this.render );\n\t\t},\n\n\t\tonRender: function() {\n\n\t\t\tthis.settings.show( new itemSettingCollectionView( { collection: this.model.get( 'settings' ), dataModel: this.dataModel } ) );\n\n\t\t\tif(!nfAdmin.devMode) {\n\t\t\t\t// Only check if not for calculations.\n\t\t\t\tif(0 == this.$el.find('.calculations').length){\n\t\t\t\t\tvar visibleSettings = false;\n\t\t\t\t\tthis.$el.find('.nf-setting').each(function(index, setting) {\n\t\t\t\t\t\tif( 'none' !== setting.style.display ){\n\t\t\t\t\t\t\tvisibleSettings = true;\n\t\t\t\t\t\t\treturn false; //Exit jQuery each loop.\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tif(!visibleSettings) {\n\t\t\t\t\t\tthis.$el.hide();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( this.model.get( 'display' ) ) {\n\t\t\t\t// ...\n\t\t\t} else {\n\t\t\t\tthis.settings.empty();\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'render:settingGroup', this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .toggle': 'clickToggleGroup'\n\t\t},\n\n\t\tclickToggleGroup: function( e ) {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:toggleSettingGroup', e, this.model );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderLabel: function() {\n\t\t\t\t\tif ( '' != this.label ) {\n\t\t\t\t\t\tvar groupLabel = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-content-edit-setting-group-label' );\n\t\t\t\t\t\treturn groupLabel( this );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\trenderArrowDir: function() {\n\t\t\t\t\tif ( this.display ) {\n\t\t\t\t\t\treturn 'down';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn 'right';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/app/drawer/itemSettingGroupCollection',['views/app/drawer/itemSettingGroup'], function( itemSettingGroupView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\tchildView: itemSettingGroupView,\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","define( 'views/app/drawer/editSettings',['views/app/drawer/itemSettingGroupCollection'], function( itemSettingGroupCollectionView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings',\n\n\t\tregions: {\n\t\t\tsettingTitle: '.nf-setting-title',\n\t\t\tsettingGroups: '.nf-setting-groups'\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.dataModel = data.model;\n\t\t\tthis.groupCollection = data.groupCollection;\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar titleView = currentDomain.get( 'getSettingsTitleView' ).call( currentDomain, { model: this.model } );\n\n\t\t\tthis.settingTitle.show( titleView );\n\t\t\tthis.settingGroups.show( new itemSettingGroupCollectionView( { collection: this.groupCollection, dataModel: this.dataModel } ) );\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\tmaybeRenderTitle: function() {\n\t    \t\t\tif ( 'undefined' !== typeof this.type ) {\n\t    \t\t\t\tvar title = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-drawer-content-edit-settings-title' );\n\t    \t\t\t\treturn title( this );\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t},\n\n\t    \t\trenderTypeNicename: function() {\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\n\t    \t\t\treturn type.get( 'nicename' );\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t});\n\n\treturn view;\n} );\n","/**\n * Edit Settings drawer header.\n *\n * Includes our 'Done' button.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerEditSettings',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-edit-settings',\n\n\t\tinitialize: function() {\n\t\t\tif ( this.model ) {\n\t\t\t\t// Listen for our drawer being disabled.\n\t\t\t\tthis.model.on( 'change:drawerDisabled', this.render, this );\t\t\t\t\n\t\t\t}\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tif ( this.model ) {\n\t\t\t\tthis.model.off( 'change:drawerDisabled', this.render );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderDisabled: function() {\n\t\t\t\t\t// Get our current domain.\n\t\t\t\t\tif ( this.drawerDisabled ) {\n\t\t\t\t\t\treturn 'disabled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Button to add an action to the form.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/drawer/typeButton',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-action-type-button',\n\n\t\tonRender: function() {\n\t\t\t\n\t\t\tjQuery( this.el ).disableSelection();\n\t\t\t\n\t\t\tif ( 'installed' == this.model.get( 'section') ) {\n\t\t\t\tvar that = this;\n\t\t\t\tjQuery( this.el ).draggable( {\n\t\t\t\t\topacity: 0.9,\n\t\t\t\t\ttolerance: 'intersect',\n\t\t\t\t\tscroll: false,\n\t\t\t\t\thelper: 'clone',\n\n\t\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\t\tthat.dragging = true;\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addAction' ).trigger( 'startDrag:type', this, ui );\n\t\t\t\t\t},\n\n\t\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\t\tthat.dragging = false;\n\t\t\t\t\t\tnfRadio.channel( 'drawer-addAction' ).trigger( 'stopDrag:type', this, ui );\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-item': 'clickAddAction'\n\t\t},\n\n\t\tclickAddAction: function( e ) {\n\t\t\tif ( ! this.dragging ) {\n\t\t\t\tif ( 'installed' == this.model.get( 'section' ) ) { // Is this an installed action?\n\t\t\t\t\tnfRadio.channel( 'actions' ).trigger( 'click:addAction', this.model );\n\t\t\t\t} else { // This isn't an installed action\n\t\t\t\t\tvar modalContent = this.model.get( 'modal_content' );\n\n\t\t\t\t\tvar actionModal = new jBox( 'Modal', {\n\t\t\t\t\t  content: modalContent,\n\t\t\t\t\t  zIndex:99999999,\n\t\t\t\t\t  closeButton: 'box',\n\t\t\t\t\t  overlay: true,\n\t\t\t\t\t  width: 600,\n\t\t\t\t\t  repositionOnOpen: true,\n\t\t\t\t\t  reposition: true\n\t\t\t\t\t});\n\n\t\t\t\t\tactionModal.open();\n\t\t\t\t\t// window.open( this.model.get( 'link' ), '_blank' );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = 'nf-item';\n\t\t\t\t\tif ( '' != jQuery.trim( this.image ) ) {\n\t\t\t\t\t\tclasses += ' nf-has-img';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( 'installed' == this.section ) {\n\t\t\t\t\t\tclasses += ' nf-action-type';\n\t\t\t\t\t}\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderStyle: function() {\n\t\t\t\t\tif ( '' != jQuery.trim( this.image ) ) {\n\n\t\t\t\t\t\t// This is being used in a template, so carefully consider the order of double/single quotes.\n\t\t\t\t\t\treturn \"background-image: url('\" + jQuery.trim( this.image ) + \"')\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/actions/drawer/typeCollection',['views/actions/drawer/typeButton'], function( actionTypeButtonView ) {\n\tvar view = Marionette.CompositeView.extend( {\n\t\ttemplate: '#tmpl-nf-drawer-action-type-section',\n\t\tchildView: actionTypeButtonView,\n\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t\t\treturn {\n\t\t\t\thasContents: function() {\n\t\t\t\t\treturn that.collection.length > 0;\n\t\t\t\t},\n\n\t\t\t\trenderNicename: function() {\n\t\t\t\t\treturn that.collection.nicename;\n\t\t\t\t},\n\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\treturn that.collection.slug;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.action-types' ).append( childView.el );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","/**\n * Model that represents our setting.\n *\n * When the model is created, we trigger the init event in two radio channels.\n *\n * This lets specific types of settings modify the model before anything uses it.\n *\n * Fieldset, for instance, uses this hook to instantiate its settings as a collection.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/settingModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tsettings: false,\n\t\t\thide_merge_tags: false,\n\t\t\terror: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Send out two messages saying that we've initialized a setting model.\n\t\t\tnfRadio.channel( 'app' ).trigger( 'init:settingModel', this );\n\t\t\tnfRadio.channel( this.get( 'type' ) ).trigger( 'init:settingModel', this );\n\t\t\tnfRadio.channel( 'setting-name-' + this.get( 'name' ) ).trigger( 'init:settingModel', this );\n\t\t\tthis.on( 'change:error', this.maybePreventUI, this );\n\n\t\t\t/*\n\t\t\t * If we have an objectType set on our collection, then we're creating a model for the generic settings collection.\n\t\t\t * If we're using merge tags in this setting\n\t\t\t */\n\t\t\tif( 'undefined' == typeof this.collection ) return;\n\n\t\t\tif ( this.get( 'use_merge_tags' ) && 'undefined' != typeof this.collection.options.objectType ) {\n\t\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'update:fieldKey', this.updateKey );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When a field key is updated, send out a radio message requesting that this setting be checked for the old key.\n\t\t * We want to send the message on the objectType channel.\n\t\t * This means that if this setting is for fields, it will trigger on the fields channel, actions, etc.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Backbone.Model \tkeyModel data model representing the field for which the key just changed\n\t\t * @return void\n\t\t */\n\t\tupdateKey: function( keyModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'fire:updateFieldKey', keyModel, this );\n\t\t},\n\n\t\tmaybePreventUI: function() {\n\t\t\tif ( this.get( 'error' ) ) {\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'prevent:close', 'setting-' + this.get( 'name' ) + '-error' );\n\t\t\t\tnfRadio.channel( 'app' ).request( 'prevent:changeDomain', 'setting-' + this.get( 'name' ) + '-error' );\t\t\t\t\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'drawer' ).request( 'enable:close', 'setting-' + this.get( 'name' ) + '-error' );\n\t\t\t\tnfRadio.channel( 'app' ).request( 'enable:changeDomain', 'setting-' + this.get( 'name' ) + '-error' );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collections of settings for each field type.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/settingCollection',['models/app/settingModel'], function( settingModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: settingModel,\n\n\t\tinitialize: function( models, options ) {\n\t\t\tthis.options = options || {};\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Model that represents our type settings groups.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/settingGroupModel',[ 'models/app/settingCollection' ], function( SettingCollection ) {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tdisplay: false\n\t\t},\n\n\t\tinitialize: function( options ) {\n\t\t\tif ( false == this.get( 'settings' ) instanceof Backbone.Collection ) {\n\t\t\t\tthis.set( 'settings', new SettingCollection( this.get( 'settings' ) ) );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection of our type settings groups.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/settingGroupCollection',['models/app/settingGroupModel'], function( settingGroupModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: settingGroupModel\n\t} );\n\treturn collection;\n} );\n","/**\n * Model for our field type\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/typeModel',[ 'models/app/settingGroupCollection' ], function( SettingGroupCollection ) {\n\tvar model = Backbone.Model.extend( {\n\t\tinitialize: function() {\n\t\t\tif ( false === this.get( 'settingGroups' ) instanceof Backbone.Collection ) {\n\t\t\t\tthis.set( 'settingGroups', new SettingGroupCollection( this.get( 'settingGroups' ) ) );\n\t\t\t}\n\t\t\t\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'init:typeModel', this );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our field type models. \n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/typeCollection',['models/app/typeModel'], function( typeModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: typeModel,\n\t\ttype: false,\n\n\t\tinitialize: function( models, options ) {\n\t\t\t_.each( options, function( option, key ) {\n\t\t\t\tthis[ key ] = option;\n\t\t\t}, this );\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Add action drawer.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/drawer/addAction',['views/actions/drawer/typeCollection', 'models/app/typeCollection'], function( actionTypeCollectionView, actionTypeCollection ) {\n\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttemplate: '#tmpl-nf-drawer-content-add-action',\n\n\t\tregions: {\n\t\t\tprimary: '#nf-drawer-primary',\n\t\t\t\n\t\t\tpayments: '#nf-drawer-secondary-payments',\n\t\t\tmarketing: '#nf-drawer-secondary-marketing',\n\t\t\tmanagement: '#nf-drawer-secondary-management',\n\t\t\tworkflow: '#nf-drawer-secondary-workflow',\n\t\t\tnotifications: '#nf-drawer-secondary-notifications',\n\t\t\tmisc: '#nf-drawer-secondary-misc',\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'filter:actionTypes', this.filteractionTypes );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'clear:filter', this.removeactionTypeFilter );\n\t\t\n\t\t\tthis.installedActions = nfRadio.channel( 'actions' ).request( 'get:installedActions' );\n\t\t\tthis.primaryCollection = this.installedActions;\n\n\t\t\tthis.availableActions = nfRadio.channel( 'actions' ).request( 'get:availableActions' );\n\t\t\tthis.updateAvailableActionGroups();\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: this.primaryCollection } ) );\n\n\t\t\tthis.payments.show( new actionTypeCollectionView( { collection: this.paymentsCollection } ) );\n\t\t\tthis.marketing.show( new actionTypeCollectionView( { collection: this.marketingCollection } ) );\n\t\t\tthis.management.show( new actionTypeCollectionView( { collection: this.managementCollection } ) );\n\t\t\tthis.workflow.show( new actionTypeCollectionView( { collection: this.workflowCollection } ) );\n\t\t\tthis.notifications.show( new actionTypeCollectionView( { collection: this.notificationsCollection } ) );\n\t\t\tthis.misc.show( new actionTypeCollectionView( { collection: this.miscCollection } ) );\t\t\n\t\t},\n\n\t\tgetEl: function() {\n\t\t\treturn jQuery( this.el ).parent();\n\t\t},\n\n\t\tfilteractionTypes: function( filteredInstalled, filteredAvailable ) {\n\t\t\tthis.primary.reset().show( new actionTypeCollectionView( { collection: filteredInstalled } ) );\n\n\t\t\tthis.availableActions = filteredAvailable;\n\t\t\tthis.updateAvailableActionGroups();\n\t\t\tthis.payments.reset().show( new actionTypeCollectionView( { collection: this.paymentsCollection } ) );\n\t\t\tthis.marketing.reset().show( new actionTypeCollectionView( { collection: this.marketingCollection } ) );\n\t\t\tthis.management.reset().show( new actionTypeCollectionView( { collection: this.managementCollection } ) );\n\t\t\tthis.workflow.reset().show( new actionTypeCollectionView( { collection: this.workflowCollection } ) );\n\t\t\tthis.notifications.reset().show( new actionTypeCollectionView( { collection: this.notificationsCollection } ) );\n\t\t\tthis.misc.reset().show( new actionTypeCollectionView( { collection: this.miscCollection } ) );\t\n\t\t\t\n\t\t},\n\n\t\tremoveactionTypeFilter: function () {\n\t\t\tthis.primary.show( new actionTypeCollectionView( { collection: this.primaryCollection } ) );\n\n\t\t\tthis.availableActions = nfRadio.channel( 'actions' ).request( 'get:availableActions' );\n\t\t\tthis.updateAvailableActionGroups();\n\t\t\tthis.payments.show( new actionTypeCollectionView( { collection: this.paymentsCollection } ) );\n\t\t\tthis.marketing.show( new actionTypeCollectionView( { collection: this.marketingCollection } ) );\n\t\t\tthis.management.show( new actionTypeCollectionView( { collection: this.managementCollection } ) );\n\t\t\tthis.workflow.show( new actionTypeCollectionView( { collection: this.workflowCollection } ) );\n\t\t\tthis.notifications.show( new actionTypeCollectionView( { collection: this.notificationsCollection } ) );\n\t\t\tthis.misc.show( new actionTypeCollectionView( { collection: this.miscCollection } ) );\n\t\t},\n\n\t\tupdateAvailableActionGroups: function() {\n\t\t\tthis.paymentsCollection = new actionTypeCollection(\n\t\t\t\tthis.availableActions.where({group: 'payments'}),\n\t\t\t\t{\n\t\t\t\t\tslug: 'payments',\n\t\t\t\t\tnicename: nfi18n.paymentsActionNicename\n\t\t\t\t} \n\t\t\t);\n\n\t\t\tthis.marketingCollection = new actionTypeCollection(\n\t\t\t\tthis.availableActions.where({group: 'marketing'}),\n\t\t\t\t{\n\t\t\t\t\tslug: 'marketing',\n\t\t\t\t\tnicename: nfi18n.marketingActionNicename\n\t\t\t\t} \n\t\t\t);\n\n\t\t\tthis.managementCollection = new actionTypeCollection(\n\t\t\t\tthis.availableActions.where({group: 'management'}),\n\t\t\t\t{\n\t\t\t\t\tslug: 'management',\n\t\t\t\t\tnicename: nfi18n.managementActionNicename\n\t\t\t\t} \n\t\t\t);\n\n\t\t\tthis.workflowCollection = new actionTypeCollection(\n\t\t\t\tthis.availableActions.where({group: 'workflow'}),\n\t\t\t\t{\n\t\t\t\t\tslug: 'workflow',\n\t\t\t\t\tnicename: nfi18n.workflowActionNicename\n\t\t\t\t} \n\t\t\t);\n\n\t\t\tthis.notificationsCollection = new actionTypeCollection(\n\t\t\t\tthis.availableActions.where({group: 'notifications'}),\n\t\t\t\t{\n\t\t\t\t\tslug: 'notifications',\n\t\t\t\t\tnicename: nfi18n.notificationsActionNicename\n\t\t\t\t} \n\t\t\t);\n\n\t\t\tthis.miscCollection = new actionTypeCollection(\n\t\t\t\tthis.availableActions.where({group: 'misc'}),\n\t\t\t\t{\n\t\t\t\t\tslug: 'misc',\n\t\t\t\t\tnicename: nfi18n.miscActionNicename\n\t\t\t\t} \n\t\t\t);\n\t\t}\n\n\t} );\n\n\treturn view;\n} );\n","/**\n * Individual change item.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentViewChangesItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-view-changes-item',\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:disabled', this.render, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:disabled', this.render );\n\t\t},\n\n\t\t/**\n\t\t * When we render this element, remove the extra wrapping <div> that backbone creates.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .undoSingle': 'undoSingle'\n\t\t},\n\n\t\tundoSingle: function( e ) {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:undoSingle', this.model );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Changes collection view.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentViewChanges',['views/app/drawer/contentViewChangesItem'], function( viewChangesItem ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'table',\n        className: 'nf-changes',\n\t\tchildView: viewChangesItem\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Handles clicks on the 'view changes' button in the header.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerViewChanges',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-view-changes',\n\n\t\tevents: {\n\t\t\t'click .undoChanges': 'clickUndoChanges'\n\t\t},\n\n\t\tclickUndoChanges: function( e ) {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:undoChanges' );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Error view used for settings.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/settingError',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-edit-setting-error'\n\t});\n\n\treturn view;\n} );\n","define( 'views/app/drawer/itemSetting',['views/app/drawer/mergeTagsContent', 'views/app/drawer/settingError'], function( mergeTagsContentView, settingErrorView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-edit-setting-wrap',\n\n\t\tregions: {\n\t\t\terror: '.nf-setting-error'\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.dataModel = data.dataModel;\n\t\t\t/*\n\t\t\t * Send out a request on the setting-type-{type} channel asking if we should render on dataModel change.\n\t\t\t * Defaults to false.\n\t\t\t * This lets specific settings, like RTEs, say that they don't want to be re-rendered when their data model changes.\n\t\t\t */\n\t\t\tvar renderOnChange = ( 'undefined' == typeof nfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).request( 'renderOnChange' ) ) ? false : nfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).request( 'renderOnChange' );\n\t\t\t\n\t\t\tif ( renderOnChange ) {\n\t\t\t\tthis.dataModel.on( 'change:' + this.model.get( 'name' ), this.render, this );\n\t\t\t}\n\n\t\t\tthis.model.on( 'change:error', this.renderError, this );\n\t\t\tthis.model.on( 'change:warning', this.renderWarning, this );\n\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\t// If we don't have a 'settings' property, this is a legacy depdency setup.\n\t\t\t\tif ( 'undefined' == typeof deps.settings ) {\n\t\t\t\t\tdeps.settings = [];\n\t\t\t\t\t_.each(deps, function(dep, name){\n\t\t\t\t\t\tif( 'settings' !== name ) {\n\t\t\t\t\t\t\tdeps.settings.push( { name: name, value: dep } );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tdeps.match = 'all';\n\t\t\t\t}\n\n\t\t\t\tfor (var i = deps.settings.length - 1; i >= 0; i--) {\n\t\t\t\t\tlet name = deps.settings[i].name;\n\t\t\t\t\tthis.dataModel.on( 'change:' + name, this.render, this );\n\t\t\t\t}\n\t\t\t}\n\n            /**\n\t\t\t * For settings that require a remote refresh\n\t\t\t *   add an \"update\"/refresh icon to the label.\n             */\n            var remote = this.model.get( 'remote' );\n\t\t\tif( remote ) {\n                if( 'undefined' != typeof remote.refresh || remote.refresh ) {\n\t\t\t\t\tvar labelText, updateIcon, updateLink, labelWrapper;\n\n                    labelText = document.createTextNode( this.model.get('label') );\n\n                    updateIcon = document.createElement( 'span' );\n                    updateIcon.classList.add( 'dashicons', 'dashicons-update' );\n\n                    updateLink = document.createElement( 'a' );\n                    updateLink.classList.add( 'extra' );\n                    updateLink.appendChild( updateIcon );\n\n                    // Wrap the label text and icon/link in a parent element.\n                    labelWrapper = document.createElement( 'span' );\n                    labelWrapper.appendChild( labelText );\n                    labelWrapper.appendChild( updateLink );\n\n                    // The model expects a string value.\n                    this.model.set('label', labelWrapper.innerHTML );\n                }\n\n\t\t\t\tnfRadio.channel( 'setting' ).trigger( 'remote', this.model, this.dataModel, this );\n\t\t\t\tthis.model.on( 'rerender', this.render, this );\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * When our drawer opens, send out a radio message on our setting type channel.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.drawerOpened );\n\n\t\t\t/*\n\t\t\t * When our drawer closes, send out a radio message on our setting type channel.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.drawerClosed );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.dataModel.off( 'change:' + this.model.get( 'name' ), this.render );\n\t\t\tthis.model.off( 'change:error', this.renderError );\n\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor (var i = deps.settings.length - 1; i >= 0; i--) {\n\t\t\t\t\tlet name = deps.settings[i].name;\n\t\t\t\t\tthis.dataModel.off( 'change:' + name, this.render );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif( this.model.get( 'remote' ) ) {\n\t\t\t\tthis.model.off( 'rerender', this.render, this );\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'destroy:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'destroy:setting', this.model, this.dataModel, this );\n\t\t\n\t\t\t/*\n\t\t\t * Unescape any HTML being saved if we are a textbox.\n\t\t\t */\n\t\t\tif ( 'textbox' == this.model.get( 'type' ) ) {\n\t\t\t\tvar setting = this.model.get( 'name' );\n\t\t\t\tvar value = this.dataModel.get( setting );\n\t\t\t\tthis.dataModel.set( setting, _.unescape( value ), { silent: true } );\n\t\t\t}\n\n\t\t},\n\n\t\tonBeforeRender: function() {\n\t\t\t/*\n\t\t\t * We want to escape any HTML being output if we are a textbox.\n\t\t\t */\n\t\t\tif ( 'textbox' == this.model.get( 'type' ) ) {\n\t\t\t\tvar setting = this.model.get( 'name' );\n\t\t\t\tvar value = this.dataModel.get( setting );\n\t\t\t\tthis.dataModel.set( setting, _.escape( value ), { silent: true } );\n\t\t\t}\n\t\t\t\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:renderSetting', this.model, this.dataModel );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.mergeTagsContentView = false;\n\t\t\tvar that = this;\n\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\n\t\t\tjQuery( this.el ).find( '.nf-help' ).each(function() {\n\t\t\t\tvar content = jQuery(this).next('.nf-help-text');\n\t\t\t\tjQuery( this ).jBox( 'Tooltip', {\n\t\t\t\t\tcontent: content,\n\t\t\t\t\tmaxWidth: 200,\n\t\t\t\t\ttheme: 'TooltipBorder',\n\t\t\t\t\ttrigger: 'click',\n\t\t\t\t\tcloseOnClick: true\n\t\t\t\t})\n\t\t    });\n\t\t\t\n\t\t    if ( this.model.get( 'use_merge_tags' ) ) {\n\t\t    \tnfRadio.channel( 'mergeTags' ).request( 'init', this );\n\t\t    }\n\n\t\t\t/*\n\t\t\t * Apply Setting Field Masks\n\t\t\t */\n\t\t\tvar mask = this.model.get( 'mask' );\n\n\t\t\tif( typeof mask != \"undefined\" ){\n\n\t\t\t\tvar input = jQuery( this.$el ).find( 'input' );\n\t\t\t\tjQuery( input ).attr( 'contentEditable', true );\n\t\t\t\tswitch( mask.type ){\n\t\t\t\t\tcase 'numeric':\n\t\t\t\t\t\tvar autoNumericOptions = {\n\t\t\t\t\t\t\tdigitGroupSeparator: nfi18n.thousands_sep,\n\t\t\t\t\t\t\tdecimalCharacter: nfi18n.decimal_point\n\t\t\t\t\t\t};\n\t\t\t\t\t\tnew AutoNumeric( input[0], autoNumericOptions );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'currency':\n\t\t\t\t\t\tvar autoNumericOptions = {\n\t\t\t\t\t\t\tdigitGroupSeparator: nfi18n.thousands_sep,\n\t\t\t\t\t\t\tdecimalCharacter: nfi18n.decimal_point,\n\t\t\t\t\t\t\tcurrencySymbol: nfi18n.currencySymbol\n\t\t\t\t\t\t};\n\t\t\t\t\t\tnew AutoNumeric( input[0], autoNumericOptions );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'custom':\n\t\t\t\t\t\tif( mask.format ) input.mask( mask.format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\t// TODO: Error Logging.\n\t\t\t\t\t\tconsole.log( 'Notice: Mask type of \"' + mask.type + '\" is not supported.' );\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tthis.renderError();\n\t\t},\n\n\t\tonShow: function() {\t\t\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'show:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'show:setting', this.model, this.dataModel, this );\n\t\t},\n\n\t\tonAttach: function() {\t\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\n\t\t},\n\n\t\trenderError: function() {\n\t\t\tif ( this.model.get( 'error' ) ) {\n\t\t\t\tjQuery( this.el ).find( '.nf-setting' ).addClass( 'nf-error' );\n\t\t\t\tthis.error.show( new settingErrorView( { model: this.model } ) );\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).find( '.nf-setting' ).removeClass( 'nf-error' );\n\t\t\t\tthis.error.empty();\n\t\t\t}\n\t\t},\n\n        renderWarning: function() {\n            if ( this.model.get( 'warning' ) ) {\n                jQuery( this.el ).find( '.nf-setting' ).addClass( 'nf-warning' );\n                this.error.show( new settingErrorView( { model: this.model } ) );\n            } else {\n                jQuery( this.el ).find( '.nf-setting' ).removeClass( 'nf-warning' );\n                this.error.empty();\n            }\n        },\n\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\n\t    \t\trenderVisible: function() {\n\n\t\t\t\t\tif(!nfAdmin.devMode){\n\t\t\t\t\t\tif('Action' == that.dataModel.get('objectType') && 'email' == that.dataModel.get('type')){\n\t\t\t\t\t\t\tif('cc' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\t\tif('bcc' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\t\tif('from_name' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\t\tif('from_address' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\t\tif('email_format' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif('Action' == that.dataModel.get('objectType') && 'save' == that.dataModel.get('type')){\n\t\t\t\t\t\t\tif('submitter_email' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif('label_pos' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\tif('input_limit' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\tif('input_limit_type' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\tif('input_limit_msg' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\tif('help_text' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\tif('disable_input' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\tif('disable_browser_autocomplete' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\tif('mask' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\tif('custom_mask' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\tif('custom_name_attribute' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\tif('personally_identifiable' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\t\n\t\t\t\t\t\t// \"administration\" settings\n\t\t\t\t\t\tif('key' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\tif('admin_label' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\tif('num_sort' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\tif('user_state' == this.name) return 'style=\"display:none;\"';\n\n\t\t\t\t\t\t\n\t\t\t\t\t\tif('checkbox' == that.dataModel.get('type')){\n\t\t\t\t\t\t\tif('checked_value' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\t\tif('unchecked_value' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif('starrating' == that.dataModel.get('type')){\n\t\t\t\t\t\t\tif('default' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// @TODO: This isn't actually working.\n\t\t\t\t\t\t// 'multi_size' is the correct type of datamodel.\n\t\t\t\t\t\tif('listmultiselect' == that.dataModel.get('type')){\n\t\t\t\t\t\t\tif('box_size' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif('date' == that.dataModel.get('type')){\n\t\t\t\t\t\t\tif('year_range_start' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\t\tif('year_range_end' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn nfRadio.channel( 'settings' ).request( 'check:deps', this, that );\n\t    \t\t},\n\n\t    \t\trenderSetting: function(){\n\t    \t\t\tif ( 'undefined' != typeof that.dataModel.get( this.name ) ) {\n\t    \t\t\t\tthis.value = that.dataModel.get( this.name );\n\t    \t\t\t} else if ( 'undefined' == typeof this.value ) {\n\t    \t\t\t\tthis.value = '';\n\t    \t\t\t}\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\n\t\t\t\t\treturn setting( this );\n\t\t\t\t},\n\n\t\t\t\trenderLabelClasses: function() {\n\t\t\t\t\tvar classes = '';\n\t\t\t\t\tif ( this.use_merge_tags ) {\n\t\t\t\t\t\tclasses += ' has-merge-tags';\n\t\t\t\t\t}\n\t\t\t\t\tif ( 'rte' == this.type ) {\n\t\t\t\t\t\tclasses += ' rte';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = 'nf-setting ';\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\n\t\t\t\t\t\tclasses += 'nf-' + this.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclasses += ' nf-one-half';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\tclasses += ' nf-error';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderTooltip: function() {\n\t\t\t\t\tif ( ! this.help ) return '';\n\t\t\t\t\tvar helpText, helpTextContainer, helpIcon, helpIconLink, helpTextWrapper;\n\n\t\t\t\t\thelpText = document.createElement( 'div' );\n\t\t\t\t\thelpText.innerHTML = this.help;\n\t\t\t\t\t\n\t\t\t\t\thelpTextContainer = document.createElement( 'div' );\n\t\t\t\t\thelpTextContainer.classList.add( 'nf-help-text' );\n\t\t\t\t\thelpTextContainer.appendChild( helpText );\n\n\t\t\t\t\thelpIcon = document.createElement( 'span' );\n\t\t\t\t\thelpIcon.classList.add( 'dashicons', 'dashicons-admin-comments' );\n                    helpIconLink = document.createElement( 'a' );\n                    helpIconLink.classList.add( 'nf-help' );\n                    helpIconLink.setAttribute( 'href', '#' );\n                    helpIconLink.setAttribute( 'tabindex', '-1' );\n                    helpIconLink.appendChild( helpIcon );\n\n                    helpTextWrapper = document.createElement( 'span' );\n                    helpTextWrapper.appendChild( helpIconLink );\n                    helpTextWrapper.appendChild( helpTextContainer );\n\n                    // The template expects a string value.\n\t\t\t\t\treturn helpTextWrapper.innerHTML;\n\t\t\t\t},\n\n\t\t\t    /*\n\t\t\t     * Render a select element with only the email fields on the\n\t\t\t      * form\n\t\t\t     */\n\t\t\t    renderEmailFieldOptions: function() {\n\t\t\t\t    var fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\n\t\t\t\t    initialOption = document.createElement( 'option' );\n\t\t\t\t    initialOption.value = '';\n\t\t\t\t    initialOption.label = '--';\n\t\t\t\t    initialOption.innerHTML = '--';\n\n\t\t\t\t    var select_value = '';\n\t\t\t\t    var select = document.createElement( 'select' );\n\t\t\t\t    select.classList.add( 'setting' );\n\t\t\t\t    select.setAttribute( 'data-id', 'my_seledt' );\n\t\t\t\t    select.appendChild( initialOption );\n\n\t\t\t\t    var index = 0;\n\t\t\t\t    var that = this;\n\t\t\t\t    fields.each( function( field ) {\n\t\t\t\t\t    // Check for the field type in our lookup array and...\n\t\t\t\t\t    if( 'email' != field.get( 'type' ) ) {\n\t\t\t\t\t\t    // Return if the type is in our lookup array.\n\t\t\t\t\t\t    return '';\n\t\t\t\t\t    }\n\n\t\t\t\t\t    var option = document.createElement( 'option' );\n\n\t\t\t\t\t    option.value = field.get( 'key' );\n\t\t\t\t\t    option.innerHTML = field.get( 'label' );\n\t\t\t\t\t    option.label = field.get( 'label' );\n\t\t\t\t\t    \n\t\t\t\t\t    if( that.value === field.get( 'key' ) ) {\n\t\t\t\t\t\t    option.setAttribute( 'selected', 'selected' );\n\t\t\t\t\t    }\n\t\t\t\t\t    select.appendChild( option );\n\t\t\t\t\t    index = index + 1;\n\t\t\t\t    });\n\n\t\t\t\t    label = document.createElement( 'label' );\n\t\t\t\t    label.classList.add( 'nf-select' );\n\n\t\t\t\t    label.appendChild( select );\n\n\t\t\t\t    // Select Lists need an empty '<div></div>' for styling purposes.\n\t\t\t\t    emptyContainer = document.createElement( 'div' );\n\t\t\t\t    label.appendChild( emptyContainer );\n\n\t\t\t\t    // The template requires a string.\n\t\t\t\t    return label.innerHTML;\n\t\t\t    },\n\n\t\t\t\trenderMergeTags: function() {\n\t\t\t\t\tif ( this.use_merge_tags && ! this.hide_merge_tags ) {\n\t\t\t\t\t\treturn '<span class=\"dashicons dashicons-list-view merge-tags\"></span>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t    /**\n\t\t\t     * Renders min and/or max attributes for the number input\n\t\t\t     *\n\t\t\t     * @returns {string}\n\t\t\t     */\n\t\t\t    renderMinMax: function() {\n\t\t\t\t\tvar minMaxStr = '';\n\t\t\t\t\t// if we have a min value set, then output it\n\t\t\t\t\tif( 'undefined' != typeof this.min_val && null != this.min_val && jQuery.isNumeric( this.min_val ) ) {\n\t\t\t\t\t\tminMaxStr = minMaxStr + \"min='\" + this.min_val + \"'\";\n\t\t\t\t\t}\n\n\t\t\t\t\t// if we have a max value set, then output it\n\t\t\t\t    if( 'undefined' != typeof this.max_val && '' != this.max_val && jQuery.isNumeric( this.max_val ) ) {\n\t\t\t\t\t    minMaxStr = minMaxStr + \" max='\" + this.max_val + \"'\";\n\t\t\t\t    }\n\n\t\t\t\t    // if we have a step size set, then output it\n\t\t\t\t    if( 'undefined' != typeof this.step && '' != this.step && jQuery.isNumeric( this.step ) ) {\n\t\t\t\t\t    minMaxStr = minMaxStr + \" step='\" + this.step + \"'\";\n\t\t\t\t    }\n\n\t\t\t\t    return minMaxStr;\n\t\t\t    },\n\n\t\t\t    /**\n\t\t\t     * Returns a string to let the user know the min and/or max\n\t\t\t     * value for the field\n\t\t\t     *\n\t\t\t     * @returns {string}\n\t\t\t     */\n\t\t\t    renderMinMaxHelper: function() {\n\t\t\t\t    var minMaxHelperStr = '';\n\t\t\t\t    // if we have a min value output it to the helper text\n\t\t\t\t    if( 'undefined' != typeof this.min_val && null != this.min_val && jQuery.isNumeric( this.min_val ) ) {\n\t\t\t\t    \t// empty string? then add '('\n\t\t\t\t    \tif( 0 == minMaxHelperStr.length ) {\n\t\t\t\t    \t\tminMaxHelperStr = \"(\";\n\t\t\t\t\t    }\n\t\t\t\t\t    minMaxHelperStr = minMaxHelperStr +  nfi18n.minVal + \": \" + this.min_val;\n\t\t\t\t    }\n\n\t\t\t\t    // if we have a max value output it to the helper text\n\t\t\t\t    if( 'undefined' != typeof this.max_val && '' != this.max_val && jQuery.isNumeric( this.max_val ) ) {\n\t\t\t\t\t    // empty string? then add '('\n\t\t\t\t\t    if( 0 == minMaxHelperStr.length ) {\n\t\t\t\t\t\t    minMaxHelperStr = \"(\";\n\t\t\t\t\t    } else {\n\t\t\t\t\t    \t// else, we know we have a min so add a comma\n\t\t\t\t\t    \tminMaxHelperStr = minMaxHelperStr + \", \";\n\t\t\t\t\t    }\n\t\t\t\t\t    minMaxHelperStr = minMaxHelperStr + nfi18n.maxVal + \": \" + this.max_val;\n\t\t\t\t    }\n\n\t\t\t\t    // if not an empty string, then add ')'\n\t\t\t\t    if( 0 < minMaxHelperStr.length ) {\n\t\t\t\t\t    minMaxHelperStr = minMaxHelperStr + \")\";\n\t\t\t\t    }\n\n\t\t\t\t    return minMaxHelperStr;\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'change .setting': 'changeSetting',\n\t\t\t'keyup .setting': 'keyUpSetting',\n\t\t\t'click .setting': 'clickSetting',\n\t\t\t'click .extra': 'clickExtra'\n\t\t},\n\n\t\tchangeSetting: function( e ) {\n\t\t\t//Check characters set in custom classes match sanitize_html_class\n\t\t\tif ( 'textbox' == this.model.get( 'type' ) &&  this.model.get('name').endsWith(\"_class\" )) {\n\t\t\t\tconst regexp = /^[a-zA-Z 0-9-_]+$/;\n\t\t\t\tif(e.target.value.search(regexp) === -1 &&  '' !== e.target.value){\n\t\t\t\t\tthis.model.set('error', \"HTML classes only allow - _ and alphanumeric characters.\" )\n\t\t\t\t} else if(e.target.value.search(regexp) === 0 || '' === e.target.value){\n\t\t\t\t\tthis.model.unset('error');\n\t\t\t\t}\n\t\t\t} else if( 'textbox' == this.model.get( 'type' ) && this.model.get('name') === \"title\" ){\n\t\t\t\tconst regexp = /[/\"<>`]/;\n\t\t\t\tif(e.target.value.search(regexp) !== -1 &&  '' !== e.target.value){\n\t\t\t\t\tconst foundIndex = e.target.value.search(regexp);\n\t\t\t\t\tconst foundChar = e.target.value.charAt(foundIndex);\n\t\t\t\t\tthis.model.set('error', \"The forbidden \" + foundChar + \" character was found. Title must not contain / \\\" < > ` characters.\")\n\t\t\t\t} else if(e.target.value.search(regexp) === -1 || '' === e.target.value){\n\t\t\t\t\tthis.model.unset('error');\n\t\t\t\t}\n\t\t\t}\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:setting', e, this.model, this.dataModel );\n\t\t},\n\n\t\tkeyUpSetting: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'keyup:setting', e, this.model, this.dataModel );\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'keyup:setting', e, this.model, this.dataModel );\n\t\t},\n\n\t\tclickSetting: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:setting', e, this.model, this.dataModel );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'click:setting', e, this.model, this.dataModel, this );\n\t\t},\n\n\t\tclickExtra: function( e ) {\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-name-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.dataModel, this );\n\t\t},\n\n\t\tdrawerOpened: function() {\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'drawer:opened', this.model, this.dataModel, this );\n\t\t},\n\n\t\tdrawerClosed: function() {\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'drawer:closed', this.model, this.dataModel, this );\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Changes collection view.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentPublicLink',['views/app/drawer/itemSetting'], function( itemSettingView) {\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttagName: 'div',\n        template: '#tmpl-nf-drawer-content-public-link',\n        \n\t\tregions: {\n            embedForm: '.embed-form',\n\t\t\tenablePublicLink: '.enable-public-link',\n            copyPublicLink: '.copy-public-link',\n        },\n\n\t\tonRender: function() {\n            var formModel = Backbone.Radio.channel('app').request('get:formModel');\n            var formSettingsDataModel = nfRadio.channel( 'settings' ).request( 'get:settings' );\n\n            var allowPublicLinkSettingModel = nfRadio.channel( 'settings' ).request( 'get:settingModel', 'allow_public_link' );\n            this.enablePublicLink.show( new itemSettingView( { model: allowPublicLinkSettingModel, dataModel: formSettingsDataModel } ) );\n            \n            var embedForm = \"[ninja_form id='{FORM_ID}']\".replace('{FORM_ID}', formModel.get('id'));\n            formSettingsDataModel.set('embed_form', embedForm);\n\n            var embedFormSettingModel = nfRadio.channel( 'settings' ).request( 'get:settingModel', 'embed_form' );\n            this.embedForm.show( new itemSettingView( { model: embedFormSettingModel, dataModel: formSettingsDataModel } ) );\n\n            var public_link_key = formSettingsDataModel.get('public_link_key');\n            \n            /**\n             * Generate a public link key which is follows the format:\n             * Form Id + 4 consecutive base 36 numbers\n             */\n            if (!public_link_key) {\n                public_link_key = nfRadio.channel('app').request('generate:publicLinkKey');\n            }\n\n            // apply public link url to settings (ending with key)\n            var publicLink = nfAdmin.publicLinkStructure.replace('[FORM_ID]', public_link_key);\n            formSettingsDataModel.set('public_link', publicLink);\n            \n            // Display public link\n            var publicLinkSettingModel = nfRadio.channel( 'settings' ).request( 'get:settingModel', 'public_link' );\n            this.copyPublicLink.show(new itemSettingView( { model: publicLinkSettingModel, dataModel: formSettingsDataModel } ));\n        },\n\n\t\tevents: {\n\t\t\t'click #embed_form + .js-click-copytext': 'copyFormEmbedHandler',\n\t\t\t'click #public_link + div > .js-click-copytext': 'copyPublicLinkHandler',\n\t\t\t'click #public_link + div > .js-click-resettext': 'confirmResetPublicLinkHandler',\n\t\t\t'click #public_link + div > .js-click-confirm': 'resetPublicLinkHandler',\n\t\t\t'click #public_link + div > .js-click-cancel': 'cancelResetPublicLinkHandler'\n\t\t},\n\n\t\tcopyFormEmbedHandler: function( e ) {\n\n            document.getElementById('embed_form').select();\n            document.execCommand('copy');\n\n            e.target.innerHTML = 'Copied!';\n            setTimeout(function(){ e.target.innerHTML = 'Copy'; }, 1500);\n\t\t},\n\n\t\tcopyPublicLinkHandler: function( e ) {\n\n            document.getElementById('public_link').select();\n            document.execCommand('copy');\n\n            e.target.innerHTML = 'Copied!';\n            setTimeout(function(){ e.target.innerHTML = 'Copy'; }, 1500);\n        },\n        \n        confirmResetPublicLinkHandler: function( e ) {\n            _.each( e.target.parentNode.children, function( node ) {\n                if ( node.classList.contains( 'js-click-copytext' ) || node.classList.contains( 'js-click-resettext' ) ) {\n                    node.style.display = 'none';\n                } else {\n                    node.style.display = 'inline-block';\n                }\n            } );\n        },\n\n        resetPublicLinkHandler: function ( e ) {\n            // Generate a new link.\n            var public_link_key = nfRadio.channel('app').request('generate:publicLinkKey');\n            var publicLink = nfAdmin.publicLinkStructure.replace('[FORM_ID]', public_link_key);\n            var formSettingsDataModel = nfRadio.channel( 'settings' ).request( 'get:settings' );\n            formSettingsDataModel.set('public_link', publicLink);\n            // Reset the buttons.\n            this.cancelResetPublicLinkHandler( e );\n            _.each( e.target.parentNode.children, function( node ) {\n                if ( node.classList.contains( 'js-click-resettext' ) ) {\n                    node.style.display = 'inline-block';\n                    node.classList.add('primary');\n                    node.classList.remove('secondary');\n                    node.innerHTML = 'Link Reset!';\n                    setTimeout(function(){\n                        node.classList.add('secondary');\n                        node.classList.remove('primary');\n                        node.innerHTML = 'Reset';\n                    }, 1500);\n                } else {\n                    node.style.display = 'none';\n                }\n                if ( node.classList.contains( 'js-click-copytext' ) ) {\n                    setTimeout(function(){\n                        node.style.display = 'inline-block';\n                    }, 1500);\n                }\n            } );\n            // Update the visible public link.\n            jQuery('#public_link').val( publicLink );\n        },\n\n        cancelResetPublicLinkHandler: function ( e ) {\n            _.each( e.target.parentNode.children, function( node ) {\n                if ( node.classList.contains( 'js-click-cancel' ) || node.classList.contains( 'js-click-confirm' ) ) {\n                    node.style.display = 'none';\n                } else {\n                    node.style.display = 'inline-block';\n                }\n            } );\n        }\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Handles clicks on the 'view changes' button in the header.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerPublicLink',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-public-link'\n\t});\n\n\treturn view;\n} );\n","/**\n * Changes collection view.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/contentNewForm',['views/app/drawer/itemSetting'], function( itemSettingView) {\n\tvar view = Marionette.LayoutView.extend( {\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-new-form',\n\n\t\tregions: {\n\t\t\tformName: '.new-form-name',\n\t\t\tformSubmit: '.new-form-submit'\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar titleSettingModel = nfRadio.channel( 'settings' ).request( 'get:settingModel', 'title' );\n\t\t\tvar addSubmitSettingModel = nfRadio.channel( 'settings' ).request( 'get:settingModel', 'add_submit' );\n\t\t\tvar dataModel = nfRadio.channel( 'settings' ).request( 'get:settings' );\n\t\t\tthis.formName.show( new itemSettingView( { model: titleSettingModel, dataModel: dataModel } ) );\n\t\t\t/*\n\t\t\t * If we don't have any submit buttons on the form, prompt the user to add one on publish.\n\t\t\t */\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\tvar submitButtons = fieldCollection.findWhere( { type: 'submit' } );\n\t\t\tif ( 'undefined' == typeof submitButtons ) {\n\t\t\t\tthis.formSubmit.show( new itemSettingView( { model: addSubmitSettingModel, dataModel: dataModel } ) );\n\t\t\t} else {\n\t\t\t\tdataModel.set( 'add_submit', 0 );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .publish': 'clickPublish'\n\t\t},\n\n\t\tclickPublish: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:confirmPublish', e );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Handles clicks on the 'view changes' button in the header.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/headerNewForm',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-header-new-form'\n\t});\n\n\treturn view;\n} );\n","/**\n * Config file for our app drawers.\n *\n * this.collection represents all of our registered drawers.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/drawerConfig',[\n\t'models/app/drawerCollection',\n\t'views/fields/drawer/addField',\n\t'views/app/drawer/editSettings',\n\t'views/app/drawer/headerEditSettings',\n\t'views/actions/drawer/addAction',\n\t'views/app/drawer/contentViewChanges',\n\t'views/app/drawer/headerViewChanges',\n\t'views/app/drawer/contentPublicLink',\n\t'views/app/drawer/headerPublicLink',\n\t'views/app/drawer/contentNewForm',\n\t'views/app/drawer/headerNewForm'\n\t], function(\n\t\tdrawerCollection,\n\t\taddFieldView,\n\t\teditSettingsView,\n\t\teditSettingsHeaderView,\n\t\taddActionView,\n\t\tviewChangesView,\n\t\tviewChangesHeaderView,\n\t\tpublicLinkView,\n\t\tpublicLinkHeaderView,\t\t\n\t\tnewFormView,\n\t\tnewFormHeaderView,\n\t\tmobileItemControlsView\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\n\t\t\tthis.collection = new drawerCollection( [\n\t\t\t\t{\n\t\t\t\t\tid: 'addField',\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new addFieldView( data );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'addAction',\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new addActionView( data );\n\t\t\t\t\t}\n\t\t\t\t},\t\t\t\t\n\t\t\t\t{\n\t\t\t\t\tid: 'editSettings',\n\n\t\t\t\t\t/*\n\t\t\t\t\t * TODO: Add filtering when editing settings. For now, removing them from settings.\n\t\t\t\t\t */\n\t\t\t\t\tgetHeaderView: function( data ) {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Get a custom setting header view if one is set.\n\t\t\t\t\t\t * TODO: Currently, this only works for advanced settings.\n\t\t\t\t\t\t * This could be used to replace the need for a single config file.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif ( 'undefined' != typeof data.typeModel ) {\n\t\t\t\t\t\t\tvar view = nfRadio.channel( data.typeModel.get( 'id' ) ).request( 'get:drawerHeaderView' ) || editSettingsHeaderView;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvar view = editSettingsHeaderView;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn new view( data );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new editSettingsView( data );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'viewChanges',\n\n\t\t\t\t\t// getHeaderView() is defined by default, but we need to override it for the viewChanges drawer.\n\t\t\t\t\tgetHeaderView: function( data ) {\n\t\t\t\t\t\treturn new viewChangesHeaderView( data );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new viewChangesView( data );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'publicLink',\n\n\t\t\t\t\t// getHeaderView() is defined by default, but we need to override it for the publicLink drawer.\n\t\t\t\t\tgetHeaderView: function( data ) {\n\t\t\t\t\t\treturn new publicLinkHeaderView( data );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new publicLinkView( data );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'newForm',\n\n\t\t\t\t\t// getHeaderView() is defined by default, but we need to override it for the newForm drawer.\n\t\t\t\t\tgetHeaderView: function( data ) {\n\t\t\t\t\t\treturn new newFormHeaderView( data );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetContentView: function( data ) {\n\t\t\t\t\t\treturn new newFormView( data );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\t// Listen for requests for our drawer collection.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawerCollection', this.getDrawerCollection, this );\n\t\t\t// Listen for requests for specific drawer models.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:drawer', this.getDrawer, this );\n\t\t},\n\n\t\tgetDrawerCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tgetDrawer: function( id ) {\n\t\t\treturn this.collection.get( id );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Default settings title view.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/defaultSettingsTitle',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings-title-default',\n\n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\trenderTypeNicename: function() {\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\n\t    \t\t\tif ( 'undefined' != typeof type ) {\n\t    \t\t\t\treturn type.get( 'nicename' );\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\t});\n\n\treturn view;\n} );\n","/**\n * Empty view.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/empty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-empty'\n\t});\n\n\treturn view;\n} );\n","/**\n * Model for our individual domains.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/domainModel',[ 'views/app/drawer/defaultSettingsTitle', 'views/app/empty' ], function( DefaultSettingsTitleView, EmptyView ) {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tdashicons: '',\n\t\t\tclasses: '',\n\t\t\tactive: false,\n\t\t\turl: '',\n\t\t\thotkeys: false,\n\t\t\tdisabled: false,\n\n\t\t\tgetSettingsTitleView: function( data ) {\n\t\t\t\treturn new DefaultSettingsTitleView( data );\n\t\t\t},\n\n\t\t\tgetDefaultSettingsTitleView: function( data ) {\n\t\t\t\treturn new DefaultSettingsTitleView( data );\n\t\t\t},\n\n\t\t\tgetGutterLeftView: function( data ) {\n\t\t\t\t/*\n\t\t\t\t * Return empty view\n\t\t\t\t */\n\t\t\t\treturn new EmptyView();\n\t\t\t},\n\n\t\t\tgetGutterRightView: function( data ) {\n\t\t\t\t/* \n\t\t\t\t * Return empty view\n\t\t\t\t */\n\t\t\t\treturn new EmptyView();\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Holds all of our domain models.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/domainCollection',['models/app/domainModel'], function( domainModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: domainModel\n\t} );\n\treturn collection;\n} );\n","define( 'views/fields/subHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-sub-header-fields'\n\t});\n\n\treturn view;\n} );\n","define( 'views/fields/mainContentFieldCollection',[], function() {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\treorderOnSort: true,\n\n\t\tgetChildView: function() {\n\t\t\treturn nfRadio.channel( 'views' ).request( 'get:fieldItem' );\n\t\t},\n\n\t\tgetEmptyView: function() {\n\t\t\treturn nfRadio.channel( 'views' ).request( 'get:mainContentEmpty' );\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:sortableEl', this.getSortableEl, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'init:sortable', this.initSortable, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'destroy:sortable', this.destroySortable, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tif ( this.collection.models.length > 0 ) {\n\t\t\t\tjQuery( this.el ).addClass( 'nf-field-type-droppable' ).addClass( 'nf-fields-sortable' );\n\t\t\t\tvar that = this;\n\t\t\t\t/* TODO: There's a bug with some Android phones and chrome. The fix below hasn't been implement.\n\n\t\t\t\t * Instantiate our sortable field list, but only if we aren't on a mobile device.\n\t\t\t\t *\n\t\t\t\t * On Android, our sortable list isn't scrollable if it's instantiated at render.\n\t\t\t\t * Instead, for mobile, we need to instantiate our sortable when the user tapholds and then\n\t\t\t\t * destroy it when the drag stops.\n\t\t\t\t */\n\t\t\t\t// if ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\t\tthis.initSortable();\n\t\t\t\t// }\n\t\t\t}\n\t\t\tnfRadio.channel( 'app' ).trigger( 'render:fieldsSortable', this );\n\t\t},\n\n\t\tgetSortableEl: function() {\n\t\t\treturn this.el;\n\t\t},\n\n\t\tinitSortable: function() {\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tvar tolerance = 'pointer';\n\t\t\t} else {\n\t\t\t\tvar tolerance = 'intersect';\n\t\t\t}\n\n\t\t\tjQuery( this.el ).sortable( {\n\t\t\t\tcontainment: 'parent',\n\t\t\t\thelper: 'clone',\n\t\t\t\tcancel: '.nf-item-controls',\n\t\t\t\tplaceholder: 'nf-fields-sortable-placeholder',\n\t\t\t\topacity: 0.95,\n\t\t\t\tgrid: [ 5, 5 ],\n\t\t\t\t// scroll: false,\n\t\t\t\tappendTo: '#nf-main',\n\t\t\t\tscrollSensitivity: 10,\n\t\t\t\t//connectWith would allow drag and drop between fields already in the builder and the repeatable fieldset ( this is currently an issue until we deal with existing data stored)\n\t\t\t\t//connectWith: '.nf-fields-sortable', \n\n\t\t\t\treceive: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping || jQuery(ui.item).hasClass(\"nf-over-repeater\") ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'start:fieldsSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tupdate: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:fieldsSortable', ui, this );\n\t\t\t\t},\n\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'stop:fieldsSortable', ui );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tdestroySortable: function() {\n\t\t\tjQuery( this.el ).sortable( 'destroy' );\n\t\t},\n\n\t\tonAddChild: function( childView ) {\n\t\t\tif ( nfRadio.channel( 'fields' ).request( 'get:adding' ) ) {\n\t\t\t\tchildView.$el.hide().show( 'clip' );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'set:adding', false );\n\t\t\t}\n\t\t}\n\t\t\n\t} );\n\n\treturn view;\n} );\n\n","define( 'views/fields/drawer/addSavedField',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-add-saved-field',\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:addSavedLoading', this.renderAddButton, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.renderAddButton();\n\t\t},\n\n\t\trenderAddButton: function() {\n\t\t\tif ( this.model.get( 'addSavedLoading' ) ) {\n\t\t\t\tvar button = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-saved-field-loading' );\n\t\t\t} else {\n\t\t\t\tvar button = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-add-saved-field-button' );\n\t\t\t}\n\t\t\tjQuery( this.el ).find( '.add-button' ).html( button( this ) );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:addSavedLoading', this.render );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-button': 'clickAddSavedField'\n\t\t},\n\n\t\tclickAddSavedField: function( e ) {\n\t\t\tnfRadio.channel( 'drawer' ).trigger( 'click:addSavedField', e, this.model );\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","/**\n * Fields settings title view.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/fields/drawer/settingsTitle',['views/fields/drawer/addSavedField'], function( addSavedFieldView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-drawer-content-edit-settings-title-fields',\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:saved', this.render, this );\n\t\t\tthis.model.on( 'change:label', this.renderjBoxContent, this );\n\t\t},\n\n\t\tregions: {\n\t\t\taddSaved: '.nf-add-saved-field'\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:saved', this.render );\n\t\t\tthis.addSavedjBox.destroy();\n\t\t\tthis.model.unset( 'jBox', { silent: true } );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.renderjBoxContent();\n\t\t\tvar that = this;\n\t\t\tthis.addSavedjBox = new jBox( 'Tooltip', {\n\t\t\t\ttrigger: 'click',\n\t\t\t\ttitle: 'Add to Favorite Fields',\n\t\t\t\tposition: {\n\t\t\t\t\tx:'left',\n\t\t\t\t\ty:'center'\n\t\t\t\t},\n\t\t\t\toutside:'x',\n\t\t\t\tcloseOnClick: 'body',\n\n\t\t\t\tonCreated: function() {\n\t\t\t\t\tthis.setContent( jQuery( that.el ).find( '.nf-add-saved-field' ) );\n\t\t\t\t}\n\t\t\t} );\n\t\t\tthis.addSavedjBox.attach( jQuery( this.el ).find( '.dashicons') );\n\t\t\tthis.model.set( 'jBox', this.addSavedjBox, { silent: true } );\n\t\t},\n\n\t\trenderjBoxContent: function() {\n\t\t\tif ( this.addSaved ) {\n\t\t\t\tthis.addSaved.show( new addSavedFieldView( { model: this.model } ) );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\trenderTypeNicename: function() {\n\t    \t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\t\t\tvar domainID = currentDomain.get( 'id' );\n\t    \t\t\tvar type = nfRadio.channel( domainID ).request( 'get:type', this.type );\n\t    \t\t\tvar displayName = type.get( 'nicename' );\n\n\t    \t\t\tif ( this.saved ) {\n\t    \t\t\t\tvar realType = nfRadio.channel( domainID ).request( 'get:type', type.get( 'type' ) );\n\t    \t\t\t\tdisplayName += ' - ' + realType.get( 'nicename' );\n\t    \t\t\t}\n\t    \t\t\treturn displayName;\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\trenderSavedStar: function() {\n\t\t\t\t\tif ( this.saved ) {\n\t\t\t\t\t\tvar star = 'filled';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar star = 'empty';\n\t\t\t\t\t}\n\t\t\t\t\treturn '<span class=\"dashicons dashicons-star-' + star + '\"></span>'\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Add main header.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/mainHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-header-actions',\n\n\t\tinitialize: function() {\n\t\t\tvar actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\n\t\t\tthis.listenTo( actionCollection, 'add', this.render );\n\t\t\tthis.listenTo( actionCollection, 'remove', this.render );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tvar actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\n\t\t\tif ( actionCollection.models.length == 0 ) {\n\t\t\t\tjQuery( this.el ).hide();\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).show();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Actions subheader view.\n *\n * TODO: make dynamic\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/subHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-sub-header-actions'\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders an application menu item from a domain model.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/itemControls',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-item-controls',\n\n\t\tinitialize: function() {\n\t\t\t// Listen for domain changes and re-render when we detect one.\n\t\t\t// this.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.render );\n\t\t},\n\n\t\t/**\n\t\t * When we render this view, remove the extra <div> tag created by backbone.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tonRender: function() {\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\t\t\t// \n\t\t\tthis.currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t},\n\n\t\tevents: {\n\t\t\t'mouseover .nf-item-control': 'mouseoverItemControl',\n\t\t\t'click .nf-edit-settings': 'clickEdit',\n\t\t\t'singletap .nf-item-control': 'singleTapEdit',\n\t\t\t'click .nf-item-delete': 'clickDelete',\n\t\t\t'click .nf-item-duplicate': 'clickDuplicateField'\n\t\t},\n\n\t\tclickEdit: function( e ) {\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\tsingleTapEdit: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t},\n\n\t\tclickDelete: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:delete', e, this.model );\n\t\t},\n\n\t\tclickDuplicateField: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:duplicate', e, this.model );\n\t\t},\n\n\t\tmouseoverItemControl: function( e ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'mouseover:itemControl', e, this.model );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Single action table row\n *\n * TODO: make dynamic\n *\n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/actionItem',['views/app/itemControls'], function( itemControlsView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'tr',\n\t\ttemplate: '#tmpl-nf-action-item',\n\n\t\tregions: {\n\t\t\titemControls: '.nf-item-controls'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.template = nfRadio.channel( 'actions' ).request( 'get:actionItemTemplate' ) || this.template;\n\t\t\tthis.model.on( 'change:label', this.render, this );\n\t\t\tthis.model.on( 'change:editActive', this.render, this );\n\t\t\tthis.model.on( 'change:active', this.maybeDeactivate, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:label', this.render );\n\t\t\tthis.model.off( 'change:editActive', this.render );\n\t\t\tthis.model.off( 'change:active', this.maybeDeactivate );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tif ( this.model.get( 'editActive' ) ) {\n\t\t\t\tjQuery( this.el ).addClass( 'active' );\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).removeClass( 'active' );\n\t\t\t}\n\n\t\t\tthis.maybeDeactivate();\n\n\t\t\tthis.itemControls.show( new itemControlsView( { model: this.model } ) );\n\t\t},\n\n\t\tmaybeDeactivate: function() {\n\t\t\tif ( 0 == this.model.get( 'active' ) ) {\n\t\t\t\tjQuery( this.el ).addClass( 'deactivated' );\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).removeClass( 'deactivated' );\n\t\t\t}\n\t\t},\n\n\t\tevents: {\n\t\t\t'change input': 'changeToggle',\n\t\t\t'click': 'maybeClickEdit'\n\t\t},\n\n\t\tmaybeClickEdit: function( e ) {\n\t\t\tif ( 'TR' == jQuery( e.target ).parent().prop( 'tagName' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\tchangeToggle: function( e ) {\n\t\t\tvar setting = jQuery( e.target ).data( 'setting' );\n\t\t\tvar settingModel = nfRadio.channel( 'actions' ).request( 'get:settingModel', setting );\n\t\t\tnfRadio.channel( 'app' ).request( 'change:setting', e, settingModel, this.model );\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderToggle: function( settingName ) {\n\t\t\t\t\tthis.settingName = settingName || 'active';\n\t\t\t\t\tvar actionLabel = this.label;\n\t\t\t\t\tthis.label = '';\n\t\t\t\t\tthis.value = this[ this.settingName ];\n\t\t\t\t\tthis.name = this.id + '-' + this.settingName;\n\t\t\t\t\tvar html = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-toggle' );\n\t\t\t\t\thtml = html( this );\n\t\t\t\t\tthis.label = actionLabel;\n\t\t\t\t\treturn html;\n\t\t\t\t},\n\n\t\t\t\trenderTypeNicename: function() {\n\t\t\t\t\tvar type = nfRadio.channel( 'actions' ).request( 'get:type', this.type );\n\t\t\t\t\tif ( 'undefined' == typeof type ) return;\n\n\t\t\t\t\treturn type.get( 'nicename' );\n\t\t\t\t},\n\n                /**\n\t\t\t\t * [Deprecated] Tooltips are not currently implemented in the context of the action list.\n\t\t\t\t *   However, the template uses a nested template which requires the helper method.\n                 * @returns {string}\n                 */\n\t\t\t\trenderTooltip: function() {\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\n\t\t\t\trenderMergeTags: function() {\n\t\t\t\t\tif ( this.use_merge_tags ) {\n\t\t\t\t\t\treturn '<span class=\"dashicons dashicons-list-view merge-tags\"></span>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/actions/mainContentEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-content-actions-empty',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tjQuery( this.el ).parent().parent().removeClass( 'nf-actions-empty' );\n\t\t\t// jQuery( this.el ).parent().removeClass( 'nf-fields-empty-droppable' ).droppable( 'destroy' );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tjQuery( this.el ).parent().parent().addClass( 'nf-actions-empty' );\n\t\t\t// if ( jQuery( this.el ).parent().hasClass( 'ui-sortable' ) ) {\n\t\t\t// \tjQuery( this.el ).parent().sortable( 'destroy' );\n\t\t\t// }\n\t\t\t// jQuery( this.el ).parent().addClass( 'nf-fields-empty-droppable' );\n\t\t\t// jQuery( this.el ).parent().droppable( {\n\t\t\t// \taccept: function( draggable ) {\n\t\t\t// \t\tif ( jQuery( draggable ).hasClass( 'nf-stage' ) || jQuery( draggable ).hasClass( 'nf-field-type-button' ) ) {\n\t\t\t// \t\t\treturn true;\n\t\t\t// \t\t}\n\t\t\t// \t},\n\t\t\t// \thoverClass: 'nf-droppable-hover',\n\t\t\t// \ttolerance: 'pointer',\n\t\t\t// \tover: function( e, ui ) {\n\t\t\t// \t\tui.item = ui.draggable;\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\n\t\t\t// \t},\n\t\t\t// \tout: function( e, ui ) {\n\t\t\t// \t\tui.item = ui.draggable;\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\t// \t},\n\t\t\t// \tdrop: function( e, ui ) {\n\t\t\t// \t\tui.item = ui.draggable;\n\t\t\t// \t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\n\t\t\t// \t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t// \t\tfieldCollection.trigger( 'reset', fieldCollection );\n\t\t\t// \t},\n\t\t\t// } );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Main content view for our actions.\n *\n * TODO: make dynamic\n *\n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/actions/mainContent',['views/actions/actionItem', 'views/actions/mainContentEmpty'], function( actionView, emptyView ) {\n\tvar view = Marionette.CompositeView.extend({\n\t\ttemplate: '#tmpl-nf-action-table',\n\t\tchildView: actionView,\n\t\temptyView: emptyView,\n\n\t\tinitialize: function() {\n\t\t\tthis.template = nfRadio.channel( 'actions' ).request( 'get:mainContentTemplate' ) || this.template;\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tjQuery( this.el ).droppable( {\n\t\t\t\taccept: '.nf-action-type-draggable',\n\t\t\t\tactiveClass: 'nf-droppable-active',\n\t\t\t\thoverClass: 'nf-droppable-hover',\n\t\t\t\tdrop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'drop:actionType', e, ui );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tif ( 'undefined' == typeof nfRadio.channel( 'actions' ).request( 'get:type', childView.model.get( 'type' ) ) ) return;\n\n\t\t\tjQuery( collectionView.el ).find( 'tbody' ).append( childView.el );\n\t\t},\n\t});\n\n\treturn view;\n} );\n\n","define( 'views/advanced/mainHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-header-settings'\n\t});\n\n\treturn view;\n} );\n","define( 'views/advanced/subHeader',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-sub-header-settings'\n\t});\n\n\treturn view;\n} );\n","define( 'views/advanced/settingItem',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-form-setting-type',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:editActive', this.updateActiveClass );\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:editActive', this.updateActiveClass, this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click': 'clickEdit'\n\t\t},\n\n\t\tclickEdit: function( e ) {\n\t\t\tif('undefined' !== typeof this.model.get('modal_content')) {\n\t\t\t\tvar modalContent = this.model.get( 'modal_content' );\n\n\t\t\t\tvar settingsModal = new jBox( 'Modal', {\n\t\t\t\t  content: modalContent,\n\t\t\t\t  zIndex:99999999,\n\t\t\t\t  closeButton: 'box',\n\t\t\t\t  overlay: true,\n\t\t\t\t  width: 600,\n\t\t\t\t  repositionOnOpen: true,\n\t\t\t\t  reposition: true\n\t\t\t\t});\n\n\t\t\t\tsettingsModal.open();\n\t\t\t} else{\n\t\t\t\tnfRadio.channel( 'settings' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = 'nf-setting-wrap ' + this.id;\n\t    \t\t\tif ( this.editActive ) {\n\t    \t\t\t\tclasses += ' active';\n\t    \t\t\t}\n\t    \t\t\treturn classes;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tupdateActiveClass: function() {\n\t\t\tif ( this.model.get( 'editActive' ) ) {\n\t\t\t\tjQuery( this.el ).find( '.nf-setting-wrap' ).addClass( 'active' );\n\t\t\t} else {\n\t\t\t\tjQuery( this.el ).find( '.nf-setting-wrap' ).removeClass( 'active' );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/advanced/mainContent',['views/advanced/settingItem'], function( settingItem ) {\n\tvar view = Marionette.CompositeView.extend({\n\t\tchildView: settingItem,\n\t\ttemplate: '#tmpl-nf-advanced-main-content',\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tif('undefined' != typeof childView.model.get('modal_content')) {\n\t\t\t\tjQuery( collectionView.el ).find( '.available' ).append( childView.el );\n\t\t\t\tjQuery( collectionView.el ).find( '.sub-section-header' ).show();\n\t\t\t} else {\n\t\t\t\tjQuery( collectionView.el ).find( '.installed' ).append( childView.el );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Model that represents our form fields.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/fieldModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tobjectType: 'Field',\n\t\t\tobjectDomain: 'fields',\n\t\t\teditActive: false,\n\t\t\torder: 999,\n\t\t\tidAttribute: 'id'\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tvar type = this.get('type');\n\t\t\tif ( 'undefined' == typeof type ) return;\n\n\t\t\t// Listen for model attribute changes\n\t\t\tthis.on( 'change', this.changeSetting, this );\n\n\t\t\t// Get our parent field type.\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', this.get( 'type' ) );\n\t\t\tvar parentType = fieldType.get( 'parentType' );\n\n\t\t\t// Loop through our field type \"settingDefaults\" and add any default settings.\n\t\t\t_.each( fieldType.get( 'settingDefaults' ), function( val, key ) {\n\t\t\t\tif ( 'undefined' == typeof this.get( key ) ) {\n\t\t\t\t\tthis.set( key, val, { silent: true } );\n\t\t\t\t}\n\t\t\t}, this );\n\n\t\t\t/*\n\t\t\t * If our field type is a saved field, set our field type to the actual field type\n\t\t\t */\n\t\t\tif ( 'saved' == fieldType.get( 'section' ) ) {\n\t\t\t\tthis.set( 'type', fieldType.get( 'type' ) );\n\t\t\t}\n\n\t\t\tif (type === 'listimage') {\n\t\t\t\tthis.get = this.listimageGet;\n\t\t\t\tthis.set = this.listimageSet;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * Trigger an init event on three channels:\n\t\t\t * \n\t\t\t * fields\n\t\t\t * fields-parentType\n\t\t\t * field-type\n\t\t\t *\n\t\t\t * This lets specific field types modify model attributes before anything uses them.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'fields' ).trigger( 'init:fieldModel', this );\n\t\t\tnfRadio.channel( 'fields-' + parentType ).trigger( 'init:fieldModel', this );\n\t\t\tnfRadio.channel( 'fields-' + this.get( 'type' ) ).trigger( 'init:fieldModel', this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\n\t\t},\n\n\t\tlistimageGet: function(attr) {\n            if(attr === 'options') {\n\t\t\t\t\tattr = 'image_options';\n\t\t\t}\n\n            return Backbone.Model.prototype.get.call(this, attr);\n\t\t},\n\t\t\n\t\tlistimageSet: function(attributes, options) {\n\t\t\tif ('options' === attributes) {\n\t\t\t\tattributes = 'image_options';\n\t\t\t}\n\t\t\treturn Backbone.Model.prototype.set.call(this, attributes, options);\n\t\t},\n\n\t\t/**\n\t\t * Fires an event on the fieldSetting-{name} channel saying we've updated a setting.\n\t\t * When we change the model attributes, fire an event saying we've changed something.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeSetting: function( model, options ) {\n\t\t\tnfRadio.channel( 'fieldSetting-' + _.keys( model.changedAttributes() )[0] ).trigger( 'update:setting', this, options.settingModel ) ;\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'update:setting', this, options.settingModel );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\n\t\t},\n\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\n\t\t},\n        \n        /**\n         * Function used to get the formatted lable of the fieldModel.\n         * \n         * @since 3.3.3\n         * @return String\n         */\n        formatLabel: function() {\n            // Try to use admin label.\n            var label = this.get( 'admin_label' );\n            // If our admin label is empty...\n            if ( '' == label ) {\n                // Use the field label instead.\n                label = this.get( 'label' );\n            }\n            return label;\n        }\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our field models.\n * This is the actual field data created by the user.\n *\n * We listen to the add and remove events so that we can push the new id to either the new fields or removed fields property.\n *\n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/fieldCollection',['models/fields/fieldModel'], function( fieldModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: fieldModel,\n\t\tcomparator: function( model ){\n\t\t\treturn parseInt( model.get( 'order' ) );\n\t\t},\n\t\ttmpNum: 1,\n\n\t\tinitialize: function() {\n\t\t\tthis.on( 'add', this.addField, this );\n\t\t\tthis.on( 'remove', this.removeField, this );\n\n\t\t\tthis.listenTo( this, 'add:field', this.addNewField );\n\t\t\tthis.listenTo( this, 'append:field', this.appendNewField );\n\t\t\tthis.listenTo( this, 'remove:field', this.removeFieldResponse );\n\t\t\tthis.newIDs = [];\n\t\t},\n\n\t\t/**\n\t\t * When we add a field, push the id onto our new fields property.\n\t\t * This lets us tell the server that this is a new field to be added rather than a field to be updated.\n\t\t *\n\t\t * @since 3.0\n\t\t * @param void\n\t\t */\n\t\taddField: function( model ) {\n\t\t\tthis.newIDs.push( model.get( 'id' ) );\n\t\t},\n\n\t\t/**\n\t\t * When we remove a field, push the id onto our removed fields property.\n\t\t *\n\t\t * @since 3.0\n\t\t * @param void\n\t\t */\n\t\tremoveField: function( model ) {\n\t\t\tthis.removedIDs = this.removedIDs || {};\n\t\t\tthis.removedIDs[ model.get( 'id' ) ] = model.get( 'id' );\n\t\t},\n\n\t\taddNewField: function( model ) {\n\t\t\tthis.add( model );\n\t\t},\n\n\t\tappendNewField: function( model ) {\n\t\t\tif ( 0 == this.length ) {\n\t\t\t\tvar order = 0;\n\t\t\t} else {\n\t\t\t\tvar order = this.at( this.length -1 ).get( 'order' ) + 1;\n\t\t\t}\n\n\t\t\tmodel.set( 'order', order, { silent: true } );\n\t\t\tthis.add( model );\n\t\t},\n\n\t\tremoveFieldResponse: function( model ) {\n\t\t\tthis.remove( model );\n\t\t},\n\n\t\tfieldExists: function( fieldModel ) {\n\t\t\treturn -1 != this.indexOf( fieldModel );\n\t\t}\n\t} );\n\treturn collection;\n} );\n\n","/**\n * Config file for our app domains.\n * \n * this.collection represents all of our app domain (fields, actions, settings) information.\n *\n * This doesn't store the current domain, but rather all the data about each.\n * \n * This data includes:\n * hotkeys\n * header view\n * subheader view\n * content view\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/domainConfig',[\n\t// Require our domain collection\n\t'models/app/domainCollection',\n\t// Require our fields domain files\n\t'views/fields/subHeader',\n\t'views/fields/mainContentFieldCollection',\n\t'views/fields/drawer/settingsTitle',\n\t// Require our actions domain files\n\t'views/actions/mainHeader', \n\t'views/actions/subHeader',\n\t'views/actions/mainContent',\n\t// Require our settings domain files\n\t'views/advanced/mainHeader',\n\t'views/advanced/subHeader',\n\t'views/advanced/mainContent',\n\t// Empty View\n\t'views/app/empty',\n\t// FieldCollection: used by the default formContentData filter\n\t'models/fields/fieldCollection'\n\t], \n\tfunction( \n\t\tappDomainCollection,\n\t\tfieldsSubHeaderView,\n\t\tFieldsMainContentFieldCollectionView,\n\t\tfieldsSettingsTitleView,\n\t\tactionsMainHeaderView,\n\t\tactionsSubHeaderView,\n\t\tactionsMainContentView,\n\t\tsettingsMainHeaderView,\n\t\tsettingsSubHeaderView,\n\t\tsettingsMainContentView,\n\t\tEmptyView,\n\t\tFieldCollection\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Add our default formContentView filter.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:viewFilter', this.defaultFormContentView, 10, this );\n\t\t\t\n\t\t\t/*\n\t\t\t * Add our default formContentData filter.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:loadFilter', this.defaultFormContentLoad, 10, this );\n\n\t\t\t/*\n\t\t\t * Add our default formContentGutterView filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContentGutters' ).request( 'add:leftFilter', this.defaultFormContentGutterView, 10, this );\n\t\t\tnfRadio.channel( 'formContentGutters' ).request( 'add:rightFilter', this.defaultFormContentGutterView, 10, this );\n\n\t\t\t// Define our app domains\n\t\t\tthis.collection = new appDomainCollection( [\n\t\t\t\t{\n\t\t\t\t\tid: 'fields',\n\t\t\t\t\tnicename: nfi18n.domainFormFields,\n\t\t\t\t\thotkeys: {\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\n\t\t\t\t\t\t'Ctrl+Shift+n'\t\t: 'add:newField',\n\t\t\t\t\t\t'Ctrl+Shift+a'\t\t: 'changeDomain:actions',\n\t\t\t\t\t\t'Ctrl+Shift+s'\t\t: 'changeDomain:settings',\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\n\t\t\t\t\t},\n\t\t\t\t\tmobileDashicon: 'dashicons-menu',\n\n\t\t\t\t\tgetSubHeaderView: function() {\n\t\t\t\t\t\treturn new fieldsSubHeaderView();\n\t\t\t\t\t},\n\n\t\t\t\t\t/**\n\t\t\t\t\t * Get the formContent view that should be used in our builder.\n\t\t\t\t\t * Uses two filters:\n\t\t\t\t\t * 1) One for our formContentData\n\t\t\t\t\t * 2) One for our formContentView\n\t\t\t\t\t *\n\t\t\t\t\t * If we don't have any view filters, we use the default formContentView.\n\t\t\t\t\t * \n\t\t\t\t\t * @since  3.0\n\t\t\t\t\t * @return formContentView backbone view.\n\t\t\t\t\t */\n\t\t\t\t\tgetMainContentView: function( collection ) {\n\t\t\t\t\t\tvar formContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'formContentData' );\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * As of version 3.0, 'fieldContentsData' has deprecated in favour of 'formContentData'.\n\t\t\t\t\t\t * If we don't have this setting, then we check for this deprecated value.\n\t\t\t\t\t\t * \n\t\t\t\t\t\t * Set our fieldContentsData to our form setting 'fieldContentsData'\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * TODO: Remove this backwards compatibility eventually.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif ( ! formContentData ) {\n\t\t\t\t\t\t\tformContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'fieldContentsData' );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * If we don't have a filter for our formContentData, default to fieldCollection.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/* \n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\n\t\t\t\t\t\tformContentData = callback( formContentData, nfRadio.channel( 'app' ).request( 'get:formModel' ), true );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tvar formContentViewFilters = nfRadio.channel( 'formContent' ).request( 'get:viewFilters' );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/* \n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tvar sortedArray = _.without( formContentViewFilters, undefined );\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\n\t\t\t\t\t\tformContentView = callback();\n\n\t\t\t\t\t\tnfRadio.channel( 'settings' ).request( 'update:setting', 'formContentData', formContentData, true );\n\t\t\t\t\t\treturn new formContentView( { collection: formContentData } );\n\t\t\t\t\t},\n\n\t\t\t\t\tgetSettingsTitleView: function( data ) {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * If we are dealing with a field model, return the fields settings view, otherwise, return the default.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tif ( 'fields' == data.model.get( 'objectDomain' ) ) {\n\t\t\t\t\t\t\treturn new fieldsSettingsTitleView( data );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn this.get( 'getDefaultSettingsTitleView' ).call( this, data );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t},\n\n\t\t\t\t\tgetGutterLeftView: function( data ) {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tvar gutterFilters = nfRadio.channel( 'formContentGutters' ).request( 'get:leftFilters' );\n\n\t\t\t\t\t\t/* \n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tvar sortedArray = _.without( gutterFilters, undefined );\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\n\t\t\t\t\t\tgutterView = callback();\n\n\t\t\t\t\t\treturn new gutterView(); \n\t\t\t\t\t},\n\n\t\t\t\t\tgetGutterRightView: function() {\n\t\t\t\t\t\t/*\n\t\t\t\t\t\t * Check our fieldContentViewsFilter to see if we have any defined.\n\t\t\t\t\t\t * If we do, overwrite our default with the view returned from the filter.\n\t\t\t\t\t\t */\n\t\t\t\t\t\tvar gutterFilters = nfRadio.channel( 'formContentGutters' ).request( 'get:rightFilters' );\n\t\t\t\t\t\t\n\t\t\t\t\t\t/* \n\t\t\t\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t\t\t\t*/\n\t\t\t\t\t\tvar sortedArray = _.without( gutterFilters, undefined );\n\t\t\t\t\t\tvar callback = _.first( sortedArray );\n\t\t\t\t\t\tgutterView = callback();\n\n\t\t\t\t\t\treturn new gutterView(); \n\t\t\t\t\t}\n\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'actions',\n\t\t\t\t\tnicename: nfi18n.domainActions,\n\t\t\t\t\thotkeys: {\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\n\t\t\t\t\t\t'Ctrl+Shift+n'\t\t: 'add:newAction',\n\t\t\t\t\t\t'Ctrl+Shift+f'\t\t: 'changeDomain:fields',\n\t\t\t\t\t\t'Ctrl+Shift+s'\t\t: 'changeDomain:settings',\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\n\t\t\t\t\t},\n\t\t\t\t\tmobileDashicon: 'dashicons-external',\n\n\t\t\t\t\tgetSubHeaderView: function() {\n\t\t\t\t\t\treturn new actionsSubHeaderView();\n\t\t\t\t\t},\n\t\t\t\t\t\n\t\t\t\t\tgetMainContentView: function() {\n\t\t\t\t\t\tvar collection = nfRadio.channel( 'actions' ).request( 'get:collection' );\n\t\t\t\t\t\treturn new actionsMainContentView( { collection: collection } );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'settings',\n\t\t\t\t\tnicename: nfi18n.domainAdvanced,\n\t\t\t\t\thotkeys: {\n\t\t\t\t\t\t'Esc'\t\t\t\t: 'close:drawer',\n\t\t\t\t\t\t'Ctrl+Shift+f'\t\t: 'changeDomain:fields',\n\t\t\t\t\t\t'Ctrl+Shift+a'\t\t: 'changeDomain:actions',\n\t\t\t\t\t\t'Alt+Ctrl+t'\t\t: 'open:mergeTags',\n\t\t\t\t\t\t'up'\t\t\t\t: 'up:mergeTags',\n\t\t\t\t\t\t'down'\t\t\t\t: 'down:mergeTags',\n\t\t\t\t\t\t'Shift+return'\t\t: 'return:mergeTags'\n\t\t\t\t\t},\n\t\t\t\t\tmobileDashicon: 'dashicons-admin-generic',\n\n\t\t\t\t\tgetSubHeaderView: function() {\n\t\t\t\t\t\treturn new settingsSubHeaderView();\n\t\t\t\t\t},\n\t\t\t\t\t\n\t\t\t\t\tgetMainContentView: function() {\n\t\t\t\t\t\tvar collection = nfRadio.channel( 'settings' ).request( 'get:typeCollection' );\n\t\t\t\t\t\treturn new settingsMainContentView( { collection: collection } );\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tid: 'preview',\n\t\t\t\t\tnicename: 'Preview Form',\n\t\t\t\t\tclasses: 'preview',\n\t\t\t\t\tdashicons: 'dashicons-visibility',\n\t\t\t\t\tmobileDashicon: 'dashicons-visibility',\n\t\t\t\t\turl: nfAdmin.previewurl\n\t\t\t\t}\n\t\t\t] );\n\n\t\t\t/*\n\t\t\t * Send out a radio message with our domain config collection.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).trigger( 'init:domainCollection', this.collection );\n\n\t\t\t/*\n\t\t\t * Respond to requests to get the app domain collection.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:domainCollection', this.getDomainCollection, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:domainModel', this.getDomainModel, this );\n\t\t},\n\n\t\tgetDomainCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tgetDomainModel: function( id ) {\n\t\t\treturn this.collection.get( id );\n\t\t},\n\n\t\tdefaultFormContentView: function( formContentData ) {\n\t\t\treturn FieldsMainContentFieldCollectionView;\n\t\t},\n\n\t\tdefaultFormContentLoad: function( formContentData ) {\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t/*\n\t\t\t * If we only have one load filter, we can just return the field collection.\n\t\t\t */\n\t\t\tvar formContentLoadFilters = nfRadio.channel( 'formContent' ).request( 'get:loadFilters' );\n\t\t\tvar sortedArray = _.without( formContentLoadFilters, undefined );\n\n\t\t\tif ( 1 == sortedArray.length || 'undefined' == typeof formContentData || true === formContentData instanceof Backbone.Collection ) return fieldCollection;\n\n\t\t\t/*\n\t\t\t * If another filter is registered, we are calling this from somewhere else.\n\t\t\t */\n\n        \tvar fieldModels = _.map( formContentData, function( key ) {\n        \t\treturn fieldCollection.findWhere( { key: key } );\n        \t}, this );\n\n        \treturn new FieldCollection( fieldModels );\n\t\t},\n\n\t\tdefaultFormContentGutterView: function( formContentData ) {\n\t\t\treturn EmptyView;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model for our app data.\n * Listens for changes to the 'clean' attribute and triggers a radio message when the state changes.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/appModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tloading: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Listen to changes to our 'clean' attribute.\n\t\t\tthis.on( 'change:clean', this.changeStatus, this );\n\t\t},\n\n\t\tchangeStatus: function() {\n\t\t\t// Send out a radio message when the 'clean' attribute changes.\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:clean', this.get( 'clean' ) );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Creates and stores a model that represents app-wide data. i.e. current domain, current drawer, clean, etc.\n *\n * clean is a boolean that represents whether or not changes have been made.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/data',['models/app/appModel'], function( appModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Get the collection that represents all the parts of our application.\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\t// Setup our initial model.\n\t\t\tthis.model = new appModel( {\n\t\t\t\tcurrentDrawer: false,\n\t\t\t\tcurrentDomain: appDomainCollection.get( 'fields' ),\n\t\t\t\tclean: true\n\t\t\t} );\n\n\t\t\t/*\n\t\t\t * Set the mobile setting used to track whether or not we're on a mobile device.\n\t\t\t */\n\t\t\tvar mobile = ( 1 == nfAdmin.mobile ) ? true : false;\n\t\t\tthis.model.set( 'mobile', mobile );\n\n\t\t\t/*\n\t\t\t * Respond to requests to see if we are on mobile.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'is:mobile', this.isMobile, this );\n\n\t\t\t/*\n\t\t\t * Respond to app channel requests for information about the state of our app.\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:data', this.getData, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:setting', this.getSetting, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:currentDomain', this.getCurrentDomain, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:currentDrawer', this.getCurrentDrawer, this );\n\t\t\tnfRadio.channel( 'drawer' ).reply( 'get:current', this.getCurrentDrawer, this );\n\n\t\t\t/*\n\t\t\t * Respond to app channel requests to update app settings.\n\t\t\t */\t\t\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:currentDomain', this.updateCurrentDomain, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:currentDrawer', this.updateCurrentDrawer, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:setting', this.updateSetting, this );\n\n\t\t\tnfRadio.channel( 'settings' ).reply( 'check:deps', this.checkDeps, this );\n\n\t\t},\n\t\t\n\t\t/**\n\t\t * A more robust settings dependency system.\n\t\t * This allows you to have a setting only show when X AND Y are met or when X OR Y are met.\n\t\t * \n\t\t * @since  \n\t\t * @param  {object} setting Setting object\n\t\t * @param  {object} context Object context for where this is being called.\n\t\t * @return {bool}/{string}\n\t\t */\n\t\tcheckDeps: function( setting, context ) {\n\t\t\tif ( ! setting.deps ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t// If we do have a \"settings\" property, then this is a new dependency format.\n\t\t\tlet deps_settings = setting.deps.settings;\n\t\t\tlet match = setting.deps.match;\n\t\t\t\n\t\t\tlet hide = false;\n\t\t\t\n\t\t\tfor (var i = deps_settings.length - 1; i >= 0; i--) {\n\t\t\t\tlet name = deps_settings[i].name;\n\t\t\t\tlet value = deps_settings[i].value;\n\n\t\t\t\t// Use == here instead of === in order to avoid string => int comparison.\n\t\t\t    if ( context.dataModel.get( name ) == value ) {\n\t\t        \t// If we're looking for \"any\" match, we can go ahead and return here. \n\t\t        \tif ( 'any' == match ) {\n\t\t        \t\thide = false;\n\t\t        \t\tbreak;\n\t\t        \t}\n\t\t        } else {\n\t        \t\thide = true;\n\t\t        }\n\t\t\t}\n\n\t\t\tif ( hide ) {\n\t\t\t\treturn 'style=\"display:none;\"';\n\t\t\t}\n\t\t\t\n\t\t\treturn '';\n\t\t},\n\n\t\tupdateCurrentDomain: function( model ) {\n\t\t\tthis.updateSetting( 'currentDomain', model );\n\t\t},\n\n\t\tupdateSetting: function( setting, value ) {\n\t\t\tthis.model.set( setting, value );\n\t\t\treturn true;\n\t\t},\n\n\t\tgetSetting: function( setting ) {\n\t\t\treturn this.model.get( setting );\n\t\t},\n\n\t\tgetData: function() {\n\t\t\treturn this.model;\n\t\t},\n\n\t\tgetCurrentDomain: function() {\n\t\t\treturn this.model.get( 'currentDomain' );\n\t\t},\n\n\t\tupdateCurrentDrawer: function( drawerID ) {\n\t\t\tthis.updateSetting( 'currentDrawer', drawerID );\n\t\t\treturn true;\n\t\t},\n\n\t\tgetCurrentDrawer: function() {\n\t\t\tvar currentDrawerID = this.model.get( 'currentDrawer' );\n\t\t\treturn nfRadio.channel( 'app' ).request( 'get:drawer', currentDrawerID );\n\t\t},\n\n\t\tisMobile: function() {\n\t\t\treturn this.model.get( 'mobile' );\n\t\t}\n\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens for click events to expand/collapse setting groups.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/drawerToggleSettingGroup',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for click events on our settings group.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:toggleSettingGroup', this.toggleSettingGroup );\n\t\t},\n\n\t\t/**\n\t\t * Set the 'display' attribute of our group model to true or false to toggle.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \tgroup setting model\n\t\t * @return void\n\t\t */\n\t\ttoggleSettingGroup: function( e, model ) {\n\t\t\tif ( model.get( 'display' ) ) {\n\t\t\t\t/*\n\t\t\t\t * Make sure that none of our settings have errors\n\t\t\t\t */\n\t\t\t\tvar errors = false;\n\t\t\t\t_.each( model.get( 'settings' ).models, function( setting ) {\n\t\t\t\t\tif ( setting.get( 'error' ) ) {\n\t\t\t\t\t\terrors = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tif ( ! errors ) {\n\t\t\t\t\tmodel.set( 'display', false );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmodel.set( 'display', true );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Updates our database with our form data.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/updateDB',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\n\t\tinitialize: function() {\n\t\t\t// Listen for the closing of the drawer and update when it's closed.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.updateDB );\n\t\t\t// Respond to requests to update the database.\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:db', this.updateDB, this );\n\t\t\t/*\n\t\t\t * Register our default formContent save filter.\n\t\t\t * This converts our collection into an array of keys.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).request( 'add:saveFilter', this.defaultSaveFilter, 10, this );\n\t\t},\n\n\t\t/**\n\t\t * Update our database.\n\t\t * If action isn't specified, assume we're updating the preview.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string \taction preview or publish\n\t\t * @return void\n\t\t */\n\t\tupdateDB: function( action ) {\n\n\t\t\t// If our app is clean, dont' update.\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Default action to preview.\n\t\t\taction = action || 'preview';\n\n\t\t\t// Setup our ajax actions based on the action we're performing\n\t\t\tif ( 'preview' == action ) {\n\t\t\t\tvar jsAction = 'nf_preview_update';\n\t\t\t} else if ( 'publish' == action ) {\n\t\t\t\tvar jsAction = 'nf_save_form';\n\t\t\t\t// now using a different ajax action\n\t\t\t\t// var jsAction = 'nf_batch_process';\n\t\t\t}\n\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\n\t\t\t/*\n\t\t\t * There are pieces of data that are only needed for the builder and not for the front-end.\n\t\t\t * We need to unset those.\n\t\t\t * TODO: Make this more dynamic/filterable.\n\t\t\t */\n\t\t\t_.each( formModel.get( 'fields' ).models, function( fieldModel, index ) {\n\t\t\t\tfieldModel.unset( 'jBox', { silent: true } );\n\t\t\t} );\n\n\t\t\t/*\n\t\t\t * The main content of our form is called the formContent.\n\t\t\t * In this next section, we check to see if any add-ons want to modify that contents before we save.\n\t\t\t * If there aren't any filters found, we default to the field collection.\n\t\t\t * \n\t\t\t */\n\t\t\t\n\t\t\tvar formContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'formContentData' );\n\t\t\t/*\n\t\t\t * As of version 3.0, 'fieldContentsData' has deprecated in favour of 'formContentData'.\n\t\t\t * If we don't have this setting, then we check for this deprecated value.\n\t\t\t * \n\t\t\t * Set our fieldContentsData to our form setting 'fieldContentsData'\n\t\t\t *\n\t\t\t * TODO: Remove this backwards compatibility eventually.\n\t\t\t */\n\t\t\tif ( ! formContentData ) {\n\t\t\t\tformContentData = nfRadio.channel( 'settings' ).request( 'get:setting', 'fieldContentsData' );\n\t\t\t}\n\n\t\t\tvar formContentSaveDataFilters = nfRadio.channel( 'formContent' ).request( 'get:saveFilters' );\n\t\t\t\t\t\t\n\t\t\t/* \n\t\t\t* Get our first filter, this will be the one with the highest priority.\n\t\t\t*/\n\t\t\tvar sortedArray = _.without( formContentSaveDataFilters, undefined );\n\t\t\tvar callback = _.first( sortedArray );\n\t\t\t/*\n\t\t\t * Set our formContentData to the callback specified in the filter, passing our current formContentData.\n\t\t\t */\n\t\t\tformContentData = callback( formContentData );\n\t\t\t\n\t\t\tif ( 'publish' == action && formModel.get( 'show_publish_options' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'newForm' );\n\t\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\t\tjQuery( builderEl ).addClass( 'disable-main' );\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Get our form data\n\t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\n\t\t\t// Turn our formData model into an object\n\t\t\tvar data = JSON.parse( JSON.stringify( formData ) );\n\t\t\tdata.settings.formContentData = formContentData;\n\n\t\t\t/**\n\t\t\t * Prepare fields for submission.\n\t\t\t */\n\t\t\t\n\t\t\t// Get the field IDs that we've deleted.\n\t\t\tvar removedIDs = formData.get( 'fields' ).removedIDs;\n\n\t\t\t/*\n\t\t\t * data.fields is an array of objects like:\n\t\t\t * field.label = blah\n\t\t\t * field.label_pos = blah\n\t\t\t * etc.\n\t\t\t *\n\t\t\t * And we need that format to be:\n\t\t\t * field.settings.label = blah\n\t\t\t * field.settings.label_pos = blah\n\t\t\t *\n\t\t\t * So, we loop through our fields and create a field.settings object.\n\t\t\t */\n\t\t\t_.each( data.fields, function( field ) {\n\t\t\t\tvar id = field.id;\n\t\t\t\t// We dont' want to update id or parent_id\n\t\t\t\tdelete field.id;\n\t\t\t\tdelete field.parent_id;\n\t\t\t\tvar settings = {};\n\t\t\t\t// Loop through all the attributes of our fields\n\t\t\t\tfor (var prop in field) {\n\t\t\t\t    if ( field.hasOwnProperty( prop ) ) {\n\t\t\t\t    \t// If our field property isn't null, then...\n                        if ( null !== field[ prop ] ) {\n                            // Set our settings.prop value.\n                            settings[prop] = field[prop];\n                        }\n                        // Delete the property from the field.\n                        delete field[ prop ];\n                    }\n\t\t\t\t}\n\n\t\t\t\tfor( var setting in settings ){\n\t\t\t\t\tif( null === settings[ setting ] ) {\n\t\t\t\t\t\tdelete settings[setting];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Update our field object.\n\t\t\t\tfield.settings = settings;\n\t\t\t\tfield.id = id;\n\t\t\t} );\n\n\t\t\t// Set our deleted_fields object so that we can know which fields were removed.\n\t\t\tdata.deleted_fields = removedIDs;\n\n\t\t\t/**\n\t\t\t * Prepare actions for submission.\n\t\t\t */\n\t\t\t\n\t\t\t// Get the action IDs that we've deleted.\n\t\t\tvar removedIDs = formData.get( 'actions' ).removedIDs;\n\n\t\t\t/*\n\t\t\t * data.actions is an array of objects like:\n\t\t\t * action.label = blah\n\t\t\t * action.label_pos = blah\n\t\t\t * etc.\n\t\t\t *\n\t\t\t * And we need that format to be:\n\t\t\t * action.settings.label = blah\n\t\t\t * action.settings.label_pos = blah\n\t\t\t *\n\t\t\t * So, we loop through our actions and create a field.settings object.\n\t\t\t */\n\t\t\t_.each( data.actions, function( action ) {\n\t\t\t\tvar id = action.id;\n\t\t\t\t// We dont' want to update id or parent_id\n\t\t\t\tdelete action.id;\n\t\t\t\tdelete action.parent_id;\n\t\t\t\tvar settings = {};\n\t\t\t\t// Loop through all the attributes of our actions\n\t\t\t\tfor (var prop in action) {\n\t\t\t\t    if ( action.hasOwnProperty( prop ) ) {\n\t\t\t\t    \t//Removing null values\n\t\t\t\t\t    if( null !== action[ prop ] ) {\n\t\t\t\t\t\t    // Set our settings.prop value.\n\t\t\t\t\t\t    settings[ prop ] = action[ prop ];\n\t\t\t\t\t    }\n\t\t\t\t        // Delete the property from the action.\n\t\t\t\t        delete action[ prop ];\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t\t// Update our action object.\n\t\t\t\taction.settings = settings;\n\t\t\t\taction.id = id;\n\t\t\t} );\n\n\t\t\tfor ( var setting in data.settings ) {\n\t\t\t\tif ( null === data.settings[ setting ] ) {\n\t\t\t\t\tdelete data.settings[ setting ];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Set our deleted_actions object so that we can know which actions were removed.\n\t\t\tdata.deleted_actions = removedIDs;\n\n\t\t\t// Turn our object into a JSON string.\n\t\t\tdata = JSON.stringify( data );\n\n\t\t\t// Run anything that needs to happen before we update.\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:updateDB', data );\n\n\t\t\tif ( 'publish' == action ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'loading', true );\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'change:loading' );\t\n\n\t\t\t\t// If we're on mobile, show a notice that we're publishing\n\t\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'publishing', 'Your Changes Are Being Published', { autoClose: false } );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( 'nf_save_form' === jsAction ) {\n\t\t\t\t// if the form string is long than this, chunk it\n\t\t\t\tvar chunk_size = 100000;\n\t\t\t\tvar data_chunks = [];\n\n\t\t\t\t// Let's chunk this\n\t\t\t\tif( chunk_size < data.length ) {\n\t\t\t\t\tdata_chunks = data.match(new RegExp('.{1,' + chunk_size + '}', 'g'));\n\t\t\t\t}\n\t\t\t\t// if we have chunks send them via the step processor\n\t\t\t\tif( 1 < data_chunks.length ) {\n\t\t\t\t\t// this function will make the ajax call for chunks\n\t\t\t\t\tthis.saveChunkedForm(\n\t\t\t\t\t\tdata_chunks,\n\t\t\t\t\t\t0,\n\t\t\t\t\t\t'nf_batch_process',\n\t\t\t\t\t\taction,\n\t\t\t\t\t\tformModel.get('id'),\n\t\t\t\t\t\ttrue\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// otherwise send it the regular way.\n\t\t\t\t\tvar context = this;\n\t\t\t\t\tvar responseData = null;\n\n\t\t\t\t\tjQuery.post( ajaxurl,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\taction: jsAction,\n\t\t\t\t\t\t\tform: data,\n\t\t\t\t\t\t\tsecurity: nfAdmin.ajaxNonce\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfunction( response ) {\n\t\t\t\t\t\t\tresponseData = response;\n\t\t\t\t\t\t\tcontext.handleFinalResponse( responseData, action );\n\t\t\t\t\t\t}\n\t\t\t\t\t).fail( function( xhr, status, error ) {\n\t\t\t\t\t\tcontext.handleFinalFailure( xhr, status, error, action )\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t} else if ( 'nf_preview_update' === jsAction ) {\n\t\t\t\tvar context = this;\n\t\t\t\tvar responseData = null;\n\t\t\t\tjQuery.post( ajaxurl,\n\t\t\t\t\t{\n\t\t\t\t\t\taction: jsAction,\n\t\t\t\t\t\tform: data,\n\t\t\t\t\t\tsecurity: nfAdmin.ajaxNonce\n\t\t\t\t\t},\n\t\t\t\t\tfunction( response ) {\n\t\t\t\t\t\tresponseData = response;\n\t\t\t\t\t\tcontext.handleFinalResponse( responseData, action );\n\t\t\t\t\t}\n\t\t\t\t).fail( function( xhr, status, error ) {\n\t\t\t\t\tcontext.handleFinalFailure( xhr, status, error, action )\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\t/**\n\t\t * Function to recursively send chunks until all chunks have been sent\n\t\t *\n\t\t * @param chunks\n\t\t * @param currentIndex\n\t\t * @param currentChunk\n\t\t * @param jsAction\n\t\t * @param action\n\t\t */\n\t\tsaveChunkedForm: function( chunks, currentChunk, jsAction, action, formId, new_publish ) {\n\t\t\tvar total_chunks = chunks.length;\n\t\t\tvar postObj = {\n\t\t\t\taction: jsAction,\n\t\t\t\tbatch_type: 'chunked_publish',\n\t\t\t\tdata: {\n\t\t\t\t\tnew_publish: new_publish,\n\t\t\t\t\tchunk_total: total_chunks,\n\t\t\t\t\tchunk_current: currentChunk,\n\t\t\t\t\tchunk: chunks[ currentChunk ],\n\t\t\t\t\tform_id: formId\n\t\t\t\t},\n\t\t\t\tsecurity: nfAdmin.batchNonce\n\t\t\t};\n\n\t\t\tvar that = this;\n\t\t\tjQuery.post( ajaxurl, postObj )\n\t\t\t\t.then( function ( response ) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar res = JSON.parse(response);\n\t\t\t\t\t\tif ( 'success' === res.last_request && ! res.batch_complete) {\n\t\t\t\t\t\t\tconsole.log('Chunk ' + currentChunk + ' processed');\n\n\t\t\t\t\t\t\t// send the next chunk\n\t\t\t\t\t\t\tthat.saveChunkedForm(chunks, res.requesting, jsAction, action, formId, false);\n\t\t\t\t\t\t} else if ( res.batch_complete ) {\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * We need to respond with data to make the\n\t\t\t\t\t\t\t * publish button return to gray\n                             */\n\t\t\t\t\t\t\tthat.handleFinalResponse(response, action);\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch ( exception ) {\n\t\t\t\t\t\tconsole.log( 'There was an error in parsing the' +\n\t\t\t\t\t\t\t' response');\n\t\t\t\t\t\tconsole.log( exception );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t).fail( function( xhr, status, error ) {\n\t\t\t\t\tconsole.log( 'There was an error sending form data' );\n\t\t\t\t\tconsole.log( error );\n\t\t\t\t\tthat.handleFinalFailure( xhr, status, error, action );\n\t\t\t\t});\n\t\t},\n\n\t\thandleFinalResponse: function( response, action ) {\n\t\t\ttry {\n\t\t\t\tresponse = JSON.parse( response );\n\t\t\t\tresponse.action = action;\n\n\t\t\t\t// Run anything that needs to happen after we update.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'response:updateDB', response );\n\t\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) && 'preview' == action ) {\n\t\t\t\t\t// nfRadio.channel( 'notices' ).request( 'add', 'previewUpdate', 'Preview Updated'\t);\n\t\t\t\t}\n\t\t\t} catch( exception ) {\n\t\t\t\tconsole.log( 'Something went wrong!' );\n\t\t\t\tconsole.log( exception );\n\t\t\t}\n\t\t},\n\n\t\thandleFinalFailure: function( xhr, status, error, action ) {\n\t\t\t// For previews, only log to the console.\n\t\t\tif( 'preview' == action ) {\n\t\t\t\tconsole.log( error );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// @todo Convert alert to jBox Modal.\n\t\t\talert(xhr.status + ' ' + error + '\\r\\n' + 'An error on the server caused your form not to publish.\\r\\nPlease contact Ninja Forms Support with your PHP Error Logs.\\r\\nhttps://ninjaforms.com/contact');\n\t\t},\n\n\t\tdefaultSaveFilter: function( formContentData ) {\n\t\t\treturn formContentData.pluck( 'key' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Model that represents our form data.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/formModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tinitialize: function() {\n\t\t\tif ( ! jQuery.isNumeric( this.get( 'id' ) ) ) {\n\t\t\t\tthis.set( 'show_publish_options', true, { silent: true } );\n\t\t\t} else {\n\t\t\t\tthis.set( 'show_publish_options', false, { silent: true } );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Stores our form data and responds to requests for it.\n * Form data stores fields, actions, and settings.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/formData',['models/app/formModel'], function( formModel) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Instantiate Form Model\n\t\t\tthis.model = new formModel( { id: preloadedFormData.id } );\n\t\t\t// Set our field collection\n\t\t\tthis.model.set( 'fields', nfRadio.channel( 'fields' ).request( 'get:collection' ) );\n\t\t\t// Set our actions collection\n\t\t\tthis.model.set( 'actions', nfRadio.channel( 'actions' ).request( 'get:collection' ) );\n\t\t\t// Set our settings collection\n\t\t\tthis.model.set( 'settings', nfRadio.channel( 'settings' ).request( 'get:settings' ) );\n\t\t\t// Respond to requests for form data.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:formModel', this.getFormModel, this );\n\t\t},\n\n\t\t/**\n\t\t * Return form data model.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return backbone.model\n\t\t */\n\t\tgetFormModel: function() {\n\t\t\treturn this.model;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles changing our preview link when we change the 'clean' state of our app.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/previewLink',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for events that would change our preview link\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:sendChanges', this.disablePreview, this );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:sendChanges', this.enablePreview, this );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.changePreviewNicename, this );\n\t\t},\n\n\t\t/**\n\t\t * Disable our preview link before we send data to update our preview.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tdisablePreview: function() {\n\t\t\t// Get our preview domain\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar preview = appDomains.get( 'preview' );\n\t\t\t// Set disabled to true. This will trigger the preview link view to redraw.\n\t\t\tpreview.set( 'disabled', true );\n\t\t},\n\n\t\t/**\n\t\t * Change the preview link text from \"Preview Form\" to \"Preview Changes\" or vice-versa\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  boolean \tclean app data state\n\t\t * @return void\n\t\t */\n\t\tchangePreviewNicename: function( clean ) {\n\t\t\t// Get our preview domain\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar preview = appDomains.get( 'preview' );\n\n\t\t\t// If we have unsaved changes, set our text to 'changes' otherwise, set it to 'form'\n\t\t\tif ( ! clean ) {\n\t\t\t\tvar nicename = 'Preview Changes';\n\t\t\t} else {\n\t\t\t\tvar nicename = 'Preview Form';\n\t\t\t}\n\n\t\t\tpreview.set( 'nicename', nicename );\n\t\t},\n\n\t\t/**\n\t\t * Enable our preview button.\n\t\t * This is triggered when we get a response from our preview update.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tenablePreview: function() {\n\t\t\t// Get our preview domain\n\t\t\tvar appDomains = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar preview = appDomains.get( 'preview' );\n\t\t\t// Set disabled to false. This will trigger the preview link view to redraw.\n\t\t\tpreview.set( 'disabled', false );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for requests to change the current domain.\n *\n * The app menu and the main submenu both contain clickable links that change the current domain.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/menuButtons',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:publish', this.publish );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:viewChanges', this.viewChanges );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:publicLink', this.publicLink );\n\t\t},\n\n\t\tpublish: function() {\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db', 'publish' );\n\t\t},\n\n\t\tviewChanges: function() {\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'viewChanges', { collection: changeCollection } );\n\t\t},\n\n\t\tpublicLink: function() {\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'publicLink' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model that represents our change data.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/changeModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tdisabled: false\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Holds all of our change models.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/changeCollection',['models/app/changeModel'], function( domainModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: domainModel,\n\n\t\tcomparator: function( model ) {\n\t\t\tvar id = parseInt( model.cid.replace( 'c', '' ) );\n\t\t\treturn -id;\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Track settings changes across our app.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/trackChanges',['models/app/changeCollection', 'models/app/changeModel'], function( changeCollection, ChangeModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.collection = new changeCollection();\n\t\t\t// Respond to any requests to add a change directly.\n\t\t\tnfRadio.channel( 'changes' ).reply( 'register:change', this.registerChange, this );\n\t\t\t// Respond to requests for the change collection\n\t\t\tnfRadio.channel( 'changes' ).reply( 'get:collection', this.getCollection, this );\n\t\t\t// Listen for changes in our clean state. If it goes to clean, clear our collection.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:clean', this.maybeResetCollection );\n\t\t},\n\n\t\tregisterChange: function( action, model, changes, label, data ) {\n\t\t\tvar data = typeof data !== 'undefined' ? data : {};\n\t\t\tif ( 'undefined' == typeof label.dashicon ) {\n\t\t\t\tlabel.dashicon = 'admin-generic';\n\t\t\t}\n\t\t\tvar changeModel = new ChangeModel({\n\t\t\t\taction: action,\n\t\t\t\tmodel: model,\n\t\t\t\tchanges: changes,\n\t\t\t\tlabel: label,\n\t\t\t\tdata: data\t\t\n\t\t\t} );\n\t\t\tthis.collection.add( changeModel );\n\n\t\t\t//loop through repeater fields to reset active state if needed\n\t\t\tnfRadio.channel( 'fields-repeater' ).trigger( 'clearEditActive', model );\n\t\t\t\n\t\t\treturn changeModel;\n\t\t},\n\n\t\tgetCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tmaybeResetCollection: function( clean ) {\n\t\t\tif ( clean ) {\n\t\t\t\tthis.collection.reset();\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define( 'controllers/app/undoChanges',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:undoChanges', this.undoChanges, this );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:undoSingle', this.undoSingle, this );\n\t\t},\n\n\t\tundoChanges: function() {\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tchangeCollection.sort();\n\t\t\tvar that = this;\n\t\t\t_.each( changeCollection.models, function( change ) {\n\t\t\t\tthat.undoSingle( change, true );\n\t\t\t} );\n\t\t\tchangeCollection.reset();\n\t\t\t// Update preview.\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\t\t\t\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\n\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n            this.dispatchClick();\n\t\t},\n\n\t\tundoSingle: function( change, undoAll ) {\n\t\t\tnfRadio.channel( 'changes' ).request( 'undo:' + change.get( 'action' ), change, undoAll );\n            this.dispatchClick();\n\t\t},\n        \n        dispatchClick: function() {\n            // If we already have a cookie, exit.\n            if ( document.cookie.includes( 'nf_undo' ) ) return;\n            // Otherwise, prepare our cookie.\n            var cname = \"nf_undo\";\n            var d = new Date();\n            // Set expiration at 1 week.\n            d.setTime( d.getTime() + ( 7*24*60*60*1000 ) );\n            var expires = \"expires=\"+ d.toUTCString();\n            // Bake the cookie.\n            document.cookie = cname + \"=1;\" + expires + \";path=/\";\n            var data = {\n                action: 'nf_undo_click',\n                security: nfAdmin.ajaxNonce\n            }\n            // Make our AJAX call.\n            jQuery.post( ajaxurl, data );\n        }\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens for our update:db response and replaces tmp ids with new ids if we were performing the publish action.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/publishResponse',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our app channel for the updateDB response.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.publishResponse );\n\t\t},\n\n\t\tpublishResponse: function( response ) {\n\t\t\t// If we aren't performing a publish action, bail.\n\t\t\tif ( 'publish' !== response.action ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t// Check to see if we have any new ids. \n\t\t\tif ( 'undefined' != typeof response.data.new_ids ) {\n\n\t\t\t\t// If we have any new fields, update their models with the new id.\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.fields ) {\n\t\t\t\t\t_.each( response.data.new_ids.fields, function( newID, oldID ) {\n\t\t\t\t\t\tvar field = nfRadio.channel( 'fields' ).request( 'get:field', oldID );\n\t\t\t\t\t\tif ( field ) {\n\t\t\t\t\t\t\tfield.set( 'id', newID );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfield = nfRadio.channel( 'fields-repeater' ).request( 'get:childField', oldID, null, newID );\n\t\t\t\t\t\t\tfield.set( 'id', newID );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// If we have any new actions, update their models with the new id.\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.actions ) {\n\t\t\t\t\t_.each( response.data.new_ids.actions, function( newID, oldID ) {\n\t\t\t\t\t\tvar action = nfRadio.channel( 'actions' ).request( 'get:action', oldID );\n\t\t\t\t\t\tif ( action ) {\n\t\t\t\t\t\t\taction.set( 'id', newID );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// If we have a new form id, update the model with the new id.\n\t\t\t\tif ( 'undefined' != typeof response.data.new_ids.forms ) {\n\t\t\t\t\t_.each( response.data.new_ids.forms, function( newID, oldID ) {\n\t\t\t\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\t\t\t\tformModel.set( 'id', newID );\n\t\t\t\t\t\thistory.replaceState( '', '', 'admin.php?page=ninja-forms&form_id=' + newID );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'loading', false );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'change:loading' );\n\n\t\t\t// If we're on mobile, show a notice that we're publishing\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tnfRadio.channel( 'notices' ).request( 'close', 'publishing' );\n\t\t\t}\n\t\t\t// Add a notice that we've published.\n//\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'published', 'Changes Published' );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'app:published', response );\n\n\t\t\t// Mark our app as clean. This will disable the publish button and fire anything else that cares about the state.\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\n\t\t}\n\t\t\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for requests to change the current domain.\n *\n * The app menu and the main submenu both contain clickable links that change the current domain.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/changeDomain',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for both menu and submenu clicks.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:menu', this.changeAppDomain );\n\t\t\t// Reply to specific requests to change the domain\n\t\t\tnfRadio.channel( 'app' ).reply( 'change:currentDomain', this.changeAppDomain, this );\n\n\t\t\t// Reply to requests to prevent our drawer from closing\n\t\t\tnfRadio.channel( 'app' ).reply( 'prevent:changeDomain', this.preventChange, this );\n\t\t\t// Reply to requests to enable drawer closing\n\t\t\tnfRadio.channel( 'app' ).reply( 'enable:changeDomain', this.enableChange, this );\n\n\t\t\t/*\n\t\t\t * Object that holds our array of 'prevent change' values.\n\t\t\t * We use an array so that registered requests can unregister and not affect each other.\n\t\t\t */\n\t\t\tthis.objPreventChange = {};\n\t\t},\n\n\t\tchangeAppDomain: function( e, model ) {\n\t\t\t/*\n\t\t\t * If we have disabled movement between domains, return false.\n\t\t\t */\n\t\t\tif ( this.maybePreventChange() ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * If we are passed a model, use that model.\n\t\t\t * Otherwise, get the domain from the event target data.\n\t\t\t */ \n\t\t\tif ( 'undefined' == typeof model ) {\n\t\t\t\tvar domainID = jQuery( e.target ).data( 'domain' );\n\t\t\t\tvar model = nfRadio.channel( 'app' ).request( 'get:domainModel', domainID );\n\t\t\t}\n\t\t\t// If a drawer is open, close it.\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t}\n\t\t\t/*\n\t\t\t * If we aren't dealing with an external url (such as preview), update our app data\n\t\t\t * and trigger a radio message saying we've changed the domain.\n\t\t\t */ \n\t\t\tif ( 0 == model.get( 'url' ).length ) {\n\t\t\t\tvar mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:currentDomain', model );\n\t\t\t\tjQuery( mainEl ).scrollTop( 0 );\t\t\t\t\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'change:currentDomain', model );\n\t\t\t}\n\t\t},\n\n\t\t/**\n         * Check to see if anything has registered a key to prevent changing the domain.\n         * \n         * @since  3.0\n         * @return boolean\n         */\n        maybePreventChange: function() {\n        \tif ( 0 == Object.keys( this.objPreventChange ).length ) {\n        \t\treturn false;\n        \t} else {\n        \t\treturn true;\n        \t}\n        },\n\n        /**\n         * Register a key to prevent changing the domain.\n         * \n         * @since  3.0\n         * @param  string \tkey unique id for our 'prevent change domain' setting.\n         * @return void\n         */\n        preventChange: function( key ) {\n        \tthis.objPreventChange[ key ] = true;\n        },\n\n        /**\n         * Remove a previously registered key that is preventing our domain from changing.\n         * \n         * @since  3.0\n         * @param  string \tkey unique id for our 'prevent change domain' setting.\n         * @return void\n         */\n        enableChange: function( key ) {\n        \tdelete this.objPreventChange[ key ];\n        },\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Modify the user's browser history when they click on a domain\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/pushstate',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.changePushState );\n\t\t},\n\n\t\tchangePushState: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\thistory.pushState( null, null, window.location.href + '&domain=' + currentDomain.get( 'id' ) );\n\t\t\tvar reExp = /domain=\\\\d+/;\n\t\t\tvar url = window.location.toString();\n\t\t\tvar newUrl = url.replace( reExp, '' );\n\t\t\tconsole.log( newUrl );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles our hotkey execution. Needs to be cleaned up and made more programmatic.\n * \n * Our hotkeys are defined by the domain that we're currently viewing. In each domain's model, there is a hotkey object.\n * \n * Currently too much hotkey data is hard-coded here.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/hotkeys',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// When we change our domain, change the hotkeys to those within that object.\n\t\t\tthis.listenTo( nfRadio.channel( 'main' ), 'render:main', this.changeHotkeys );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.changeHotkeys );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'render:settingGroup', this.changeHotkeys );\n\t\t\t// Currently, these are the functions that run when the new field or new action hotkey is pressed.\n\t\t\t// TODO: move these into a config module or into something more programmatic and scalable.\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'add:newField', this.addNewField );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'add:newAction', this.addNewAction );\n\t\t\t// Same as above, these functions need to be moved into a more modular/programmatic solution.\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:fields', this.changeDomainFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:actions', this.changeDomainActions );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'changeDomain:settings', this.changeDomainSettings );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'close:drawer', this.closeDrawer );\n\t\t},\n\n\t\tchangeHotkeys: function() {\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tjQuery( document ).off( '.nfDomainHotkeys' );\n\t\t\tjQuery( 'input' ).off( '.nfDomainHotkeys' );\n\t\t\tif ( currentDomain.get( 'hotkeys' ) ) {\n\t\t\t\tjQuery.each( currentDomain.get( 'hotkeys' ), function( hotkey, msg ) {\n\t\t\t\t\tjQuery( document ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\n\t\t\t\t\t} );\n\t\t\t\t\tjQuery( 'input' ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\n\t\t\t\t\t} );\n\t\t\t\t\tjQuery( 'textarea' ).on( 'keydown.nfDomainHotkeys', null, hotkey, function( e ) {\n\t\t\t\t\t\tnfRadio.channel( 'hotkeys' ).trigger( msg, e );\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\taddNewField: function() {\n\t\t\tif ( 'addField' != nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'addField' );\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\taddNewAction: function() {\n\t\t\tif ( 'addAction' != nfRadio.channel( 'app' ).request( 'get:currentDrawer' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'addAction' );\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t}\n\t\t},\n\n\t\tchangeDomainFields: function() {\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar fieldsDomain = appDomainCollection.get( 'fields' );\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, fieldsDomain );\n\t\t},\n\n\t\tchangeDomainActions: function() {\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar actionsDomain = appDomainCollection.get( 'actions' );\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, actionsDomain );\n\t\t},\n\n\t\tchangeDomainSettings: function() {\n\t\t\tvar appDomainCollection = nfRadio.channel( 'app' ).request( 'get:domainCollection' );\n\t\t\tvar settingsDomain = appDomainCollection.get( 'settings' );\n\t\t\tnfRadio.channel( 'app' ).request( 'change:currentDomain', {}, settingsDomain );\n\t\t},\n\n\t\tcloseDrawer: function() {\n\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Change the clean state of our app when settings are changed.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/cleanState',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Set an array of field model attributes to ignore.\n\t\t\t * This list will be filtered just before we ignore anything.\n\t\t\t */ \n\t\t\tthis.ignoreAttributes = [\n\t\t\t\t'editActive'\n\t\t\t];\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'update:setting', this.setAppClean );\n\t\t},\n\n\t\tsetAppClean: function( model ) {\n\t\t\tfor( var attr in model.changedAttributes() ) {\n\t\t\t\tvar changedAttr = attr;\n\t\t\t\tvar after = model.changedAttributes()[ attr ];\n\t\t\t}\n\n\t\t\tvar ignoreAttributes = nfRadio.channel( 'undo-' + model.get( 'type' ) ).request( 'ignore:attributes', this.ignoreAttributes ) || this.ignoreAttributes;\n\t\t\t\n\t\t\tif ( -1 != this.ignoreAttributes.indexOf( attr ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\n\t\t\t//loop through repeater fields to reset active state if needed\n\t\t\tnfRadio.channel( 'fields-repeater' ).trigger( 'clearEditActive', model );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * All of the core undo functions. Listens on the 'changes' channel for an undo request.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/coreUndo',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:changeSetting', this.undoChangeSetting, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:addObject', this.undoAddObject, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:removeObject', this.undoRemoveObject, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:duplicateObject', this.undoDuplicateObject, this );\n\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:sortFields', this.undoSortFields, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:addListOption', this.undoAddListOption, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:removeListOption', this.undoRemoveListOption, this );\n\t\t\tnfRadio.channel( 'changes' ).reply( 'undo:sortListOptions', this.undoSortListOptions, this );\n\t\t},\n\n\t\t/**\n\t\t * Undo settings that have been changed.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoChangeSetting: function( change, undoAll ) {\n\t\t\tvar fieldModel = change.get( 'model' );\n\t\t\tvar changes = change.get( 'changes' );\n\t\t\tvar attr = changes.attr;\n\t\t\tvar before = changes.before;\n\t\t\tfieldModel.set( attr, before );\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * Undo adding a field or an action.\n\t\t * Loops through our change collection and removes any change models based upon the one we're removing.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoAddObject: function( change, undoAll ) {\n\t\t\tvar objectModel = change.get( 'model' );\n\t\t\tvar collection = change.get( 'data' ).collection;\n\n\t\t\tif ( 'undefined' != typeof collection.newIDs ) {\n\t\t\t\tdelete collection.newIDs[ objectModel.get( 'id' ) ];\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: objectModel } );\n\n\t\t\t\t_.each( results, function( model ) {\n\t\t\t\t\tif ( model !== change ) {\n\t\t\t\t\t\tchangeCollection.remove( model );\n\t\t\t\t\t}\n\t\t\t\t} );\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\tcollection.remove( objectModel );\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\t\t\n\n\t\t/**\n\t\t * Undo adding a field or an action.\n\t\t * Loops through our change collection and removes any change models based upon the one we're removing.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoDuplicateObject: function( change, undoAll ) {\n\t\t\tvar objectModel = change.get( 'model' );\n\t\t\tvar objectCollection = change.get( 'data' ).collection;\n\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: objectModel } );\n\n\t\t\t\t_.each( results, function( model ) {\n\t\t\t\t\tif ( model !== change ) {\n\t\t\t\t\t\tchangeCollection.remove( model );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tobjectCollection.remove( objectModel );\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * Undo removing a field or an action.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoRemoveObject: function( change, undoAll ) {\n\t\t\tvar dataModel = change.get( 'model' );\n\t\t\tvar collection = change.get( 'data' ).collection;\n\n\t\t\tnfRadio.channel( dataModel.get( 'objectDomain' ) ).request( 'add', dataModel );\n\n\t\t\tdelete collection.removedIDs[ dataModel.get( 'id' ) ];\n\t\t\t\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: dataModel } );\n\n\t\t\t\t_.each( results, function( model ) {\n\t\t\t\t\tif ( model !== change ) {\n\t\t\t\t\t\tmodel.set( 'disabled', false );\n\t\t\t\t\t}\n\t\t\t\t} );\t\t\t\t\n\t\t\t}\n\n\t\t\t// Trigger a reset on our field collection so that our view re-renders\n\t\t\tcollection.trigger( 'reset', collection );\n\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * Undo field sorting.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tundoAll are we in the middle of an undo all action?\n\t\t * @return void\n\t\t */\n\t\tundoSortFields: function( change, undoAll ) {\n\t\t\tvar data = change.get( 'data' );\n\t\t\tvar fields = data.fields;\n\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fields, function( changeModel ) {\n\t\t\t\tvar before = changeModel.before;\n\t\t\t\tvar fieldModel = changeModel.model;\n\t\t\t\tfieldModel.set( 'order', before );\n\t\t\t\t// console.log( 'set ' + fieldModel.get( 'label' ) + ' to ' + before );\n\t\t\t} );\n\t\t\t// console.log( fieldCollection.where( { label: 'Name' } ) );\n\t\t\t// console.log( fieldCollection.where( { label: 'Email' } ) );\n\n\n\t\t\tfieldCollection.sort();\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\tundoAddListOption: function( change, undoAll ) {\n\t\t\tvar model = change.get( 'model' );\n\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: model } );\n\n\t\t\t\t_.each( results, function( changeModel ) {\n\t\t\t\t\tif ( changeModel !== change ) {\n\t\t\t\t\t\tchangeCollection.remove( changeModel );\n\t\t\t\t\t}\n\t\t\t\t} );\t\t\t\t\n\t\t\t}\n\n\t\t\tmodel.collection.remove( model );\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\tundoRemoveListOption: function( change, undoAll ) {\n\t\t\tvar model = change.get( 'model' );\n\t\t\tvar collection = change.get( 'data' ).collection;\n\t\t\tcollection.add( model );\n\n\t\t\tif ( ! undoAll ) {\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tvar results = changeCollection.where( { model: model } );\n\n\t\t\t\t_.each( results, function( model ) {\n\t\t\t\t\tif ( model !== change ) {\n\t\t\t\t\t\tmodel.set( 'disabled', false );\n\t\t\t\t\t}\n\t\t\t\t} );\t\t\t\t\n\t\t\t}\n\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\tundoSortListOptions: function( change, undoAll ) {\n\t\t\tvar data = change.get( 'data' );\n\t\t\tvar collection = data.collection;\n\t\t\t\n\t\t\tvar objModels = data.objModels;\n\n\t\t\t_.each( objModels, function( changeModel ) {\n\t\t\t\tvar before = changeModel.before;\n\t\t\t\tvar optionModel = changeModel.model;\n\t\t\t\toptionModel.set( 'order', before );\n\t\t\t} );\t\t\t\t\n\n\n\t\t\tcollection.sort();\n\t\t\tthis.maybeRemoveChange( change, undoAll );\n\t\t},\n\n\t\t/**\n\t\t * If our undo action was requested to 'remove' the change from the collection, remove it.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tchange \tmodel of our change\n\t\t * @param  boolean \t\t\tremove \tshould we remove this item from our change collection\n\t\t * @return void\n\t\t */\n\t\tmaybeRemoveChange: function( change, undoAll ) {\t\t\t\n\t\t\tvar undoAll = typeof undoAll !== 'undefined' ? undoAll : false;\n\t\t\tif ( ! undoAll ) {\n\t\t\t\t// Update preview.\n\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\t\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\t\tchangeCollection.remove( change );\n\t\t\t\tif ( 0 == changeCollection.length ) {\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', true );\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'close:drawer' );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Returns a clone of a backbone model with all the attributes looped through so that collections contained within are propely cloned.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/cloneModelDeep',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'app' ).reply( 'clone:modelDeep', this.cloneModelDeep, this );\n\t\t},\n\n\t\tcloneModelDeep: function( model ) {\n\t\t\t// Temporary value used to store any new collections.\n\t\t\tvar replace = {};\n\t\t\t// Loop over every model attribute and if we find a collection, clone each model and instantiate a new collection.\n\t\t\t_.each( model.attributes, function( val, key ) {\n\t\t\t\tif( val instanceof Backbone.Collection ) { // Is this a backbone collection?\n\t\t\t\t\tvar clonedCollection = nfRadio.channel( 'app' ).request( 'clone:collectionDeep', val );\n\t\t\t\t\treplace[ key ] = clonedCollection;\n\t\t\t\t} else if ( val instanceof Backbone.Model ) { // Is this a backbone model?\n\t\t\t\t\treplace[ key ] = this.cloneModelDeep( val );\n\t\t\t\t}\n\t\t\t}, this );\n\n\t\t\t// Clone our original model\n\t\t\tvar newModel = model.clone();\n\t\t\t// Overwrite any collections we created above.\n\t\t\t_.each( replace, function( val, key ) {\n\t\t\t\tnewModel.set( key, val );\n\t\t\t} );\n\n\t\t\treturn newModel;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Returns the appropriate child view for our settings drawer.\n *\n * This enables settings types to register custom childviews for their settings.\n * The option-repeater setting for the list field is an example.\n * \n * @package Ninja Forms builder\n * @subpackage App - Edit Settings Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/getSettingChildView',['views/app/drawer/itemSetting'], function( itemSettingView ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests for field settings child views.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:settingChildView', this.getSettingChildView, this );\n\t\t},\n\n\t\t/**\n\t\t * Return the appropriate child setting view.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  backbone.model\tmodel \tField setting\n\t\t * @return backbone.view\n\t\t */\n\t\tgetSettingChildView: function( model ) {\n\t\t\t// Get our setting type.\n\t\t\tvar type = model.get( 'type' );\n\t\t\t// Request a setting childview from our setting type channel. (Setting type, not field type)\n\t\t\tvar settingChildView = nfRadio.channel( type ).request( 'get:settingChildView', model ) || itemSettingView;\n\t\t\t\n\t\t\treturn settingChildView\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Updates our model when the user changes a setting.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/changeSettingDefault',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests to update settings.\n\t\t\tnfRadio.channel( 'app' ).reply( 'change:setting', this.changeSetting, this );\n\n\t\t\t// Listen on our app channel for the change setting event. Fired by the setting view.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'change:setting', this.changeSetting, this );\n\t\t},\n\n\t\t/**\n\t\t * When we change our setting, update the model.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \t\t\te                event\n\t\t * @param  backbone.model \tsettingModel model that holds our field type settings info\n\t\t * @param  backbone.model \tdataModel       model that holds our field settings\n\t\t * @return void\n\t\t */\n\t\tchangeSetting: function( e, settingModel, dataModel, value ) {\n\t\t\tvar name = settingModel.get( 'name' );\n\t\t\tvar before = dataModel.get( name );\n\t\t\tvar value = value || null;\n\t\t\tif ( ! value ) {\n\t\t\t\t// Sends out a request on the fields-type (fields-text, fields-checkbox, etc) channel to see if that field type needs to return a special value for saving.\n\t\t\t\tvalue = nfRadio.channel( settingModel.get( 'type' ) ).request( 'before:updateSetting', e, dataModel, name, settingModel );\n\t\t\t}\n\n\t\t\tif( 'undefined' == typeof value ){\n\t\t\t    value = jQuery( e.target ).val();\n            }\n\t\t\t\n\t\t\t// Update our field model with the new setting value.\n\t\t\tdataModel.set( name, value, { settingModel: settingModel } );\n\t\t\tnfRadio.channel( 'setting-' + name ).trigger( 'after:updateSetting', dataModel, settingModel );\n\t\t\t// Register our setting change with our change tracker\n\t\t\tvar after = value;\n\t\t\t\n\t\t\tvar changes = {\n\t\t\t\tattr: name,\n\t\t\t\tbefore: before,\n\t\t\t\tafter: after\n\t\t\t}\n\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Changed ' + settingModel.get( 'label' ) + ' from ' + before + ' to ' + after\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', dataModel, changes, label );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define( 'views/app/drawer/typeSettingFieldset',['views/app/drawer/itemSetting'], function( itemSettingView ) {\n\tvar view = Marionette.CompositeView.extend( {\n\t\ttemplate: '#tmpl-nf-edit-setting-wrap',\n\t\tchildView: itemSettingView,\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.collection = this.model.get( 'settings' );\n\t\t\tthis.childViewOptions = { dataModel: data.dataModel };\n\t\t\tthis.dataModel = data.dataModel;\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\t// If we don't have a 'settings' property, this is a legacy depdency setup.\n\t\t\t\tif ( 'undefined' == typeof deps.settings ) {\n\t\t\t\t\tdeps.settings = [];\n\t\t\t\t\t_.each(deps, function(dep, name){\n\t\t\t\t\t\tif( 'settings' !== name ) {\n\t\t\t\t\t\t\tdeps.settings.push( { name: name, value: dep } );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tdeps.match = 'all';\n\t\t\t\t}\n\n\t\t\t\tfor (var i = deps.settings.length - 1; i >= 0; i--) {\n\t\t\t\t\tlet name = deps.settings[i].name;\n\t\t\t\t\tthis.dataModel.on( 'change:' + name, this.render, this );\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.model.on( 'rerender', this.render, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor (var i = deps.settings.length - 1; i >= 0; i--) {\n\t\t\t\t\tname = deps.settings[i].name;\n\t\t\t\t\tthis.dataModel.off( 'change:' + name, this.render );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tonBeforeRender: function() {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'before:renderSetting', this.model, this.dataModel );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'before:renderSetting', this.model, this.dataModel, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\t    \treturn {\n\t    \t\trenderVisible: function() {\n\n\t\t\t\t\tif(!nfAdmin.devMode){\n\t\t\t\t\t\tif('help' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\tif('classes' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\tif('input_limit_set' == this.name) return 'style=\"display:none;\"';\n\n\t\t\t\t\t\tif('checkbox' == that.dataModel.get('type')){\n\t\t\t\t\t\t\tif('checkbox_values' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif('date' == that.dataModel.get('type')){\n\t\t\t\t\t\t\tif('year_range' == this.name) return 'style=\"display:none;\"';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn nfRadio.channel( 'settings' ).request( 'check:deps', this, that );\n\t    \t\t},\n\t    \t\trenderSetting: function(){\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\n\t\t\t\t\treturn setting( this );\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = '';\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\n\t\t\t\t\t\tclasses += this.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclasses += ' one-half';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\tclasses += ' nf-error';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderError: function() {\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\treturn this.error;\n\t\t\t\t\t}\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.nf-field-sub-settings' ).append( childView.el );\n\t\t}\n\t} );\n\n\treturn view;\n} );\n","/**\n * Handles actions related to field settings that use a fieldset\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/fieldset',['views/app/drawer/typeSettingFieldset','models/app/settingCollection'], function( fieldsetView, settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'fieldset' ).reply( 'get:settingChildView', this.getSettingChildView, this );\n\t\t\t// When a list type field is initialized, create an option collection.\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldset' ), 'init:settingModel', this.createSettingsCollection );\n\t\t},\n\n\t\tgetSettingChildView: function( model ) {\n\t\t\treturn fieldsetView;\n\t\t},\n\n\t\t/**\n\t\t * Instantiate settings collection when a fieldset type is initialized.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \tfield model being initialized\n\t\t * @return void\n\t\t */\n\t\tcreateSettingsCollection: function( model ) {\n\t\t\tmodel.set( 'settings', new settingCollection( model.get( 'settings' ) ) );\n\t\t},\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles actions related to our toggle field.\n * When we change the toggle, the setting value will be 'on' or ''.\n * We need to change this to 1 or 0.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/toggleSetting',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// We don't want the RTE setting to re-render when the value changes.\n\t\t\tnfRadio.channel( 'setting-type-toggle' ).reply( 'renderOnChange', function(){ return false } );\n\n\t\t\t// Respond to requests for field setting filtering.\n\t\t\tnfRadio.channel( 'toggle' ).reply( 'before:updateSetting', this.updateSetting, this );\n\t\t},\n\n\t\t/**\n\t\t * Return either 1 or 0, depending upon the toggle position.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \t\t\te                event\n\t\t * @param  backbone.model \tfieldModel       field model\n\t\t * @param  string \t\t\tname             setting name\n\t\t * @param  backbone.model \tsettingTypeModel field type model\n\t\t * @return int              1 or 0\n\t\t */\n\t\tupdateSetting: function( e, fieldModel, name, settingTypeModel ) {\n\t\t\tif ( jQuery( e.target ).prop( 'checked' ) ) {\n\t\t\t\tvar value = 1;\n\t\t\t} else {\n\t\t\t\tvar value = 0;\n\t\t\t}\n\n\t\t\treturn value;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles actions related to our toggle field.\n * When we change the toggle, the setting value will be 'on' or ''.\n * We need to change this to 1 or 0.\n *\n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/buttonToggleSetting',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// We don't want the RTE setting to re-render when the value changes.\n\t\t\tnfRadio.channel( 'setting-type-button-toggle' ).reply( 'renderOnChange', function(){ return false; } );\n\n\t\t\t// Respond to requests for field setting filtering.\n\t\t\tnfRadio.channel( 'button-toggle' ).reply( 'before:updateSetting', this.updateSetting, this );\n\t\t},\n\n\t\t/**\n\t\t * Return either 1 or 0, depending upon the toggle position.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  Object \t\t\te                event\n\t\t * @param  backbone.model \tfieldModel       field model\n\t\t * @param  string \t\t\tname             setting name\n\t\t * @param  backbone.model \tsettingTypeModel field type model\n\t\t * @return int              1 or 0\n\t\t */\n\t\tupdateSetting: function( e, fieldModel, name, settingTypeModel ) {\n\t\t\treturn e.target.value;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles actions related to number field settings.\n *\n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/numberSetting',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests for field setting filtering.\n\t\t\tnfRadio.channel( 'number' ).reply( 'before:updateSetting', this.updateSetting, this );\n\t\t},\n\n\t\t/**\n\t\t * Resets value if user enters value below min value or above max value\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  Object \t\t\te                event\n\t\t * @param  backbone.model \tfieldModel       field model\n\t\t * @param  string \t\t\tname             setting name\n\t\t * @param  backbone.model \tsettingTypeModel field type model\n\t\t * @return int              1 or 0\n\t\t */\n\t\tupdateSetting: function( e, fieldModel, name, settingTypeModel ) {\n\t\t\tvar minVal = settingTypeModel.get( 'min_val' );\n\t\t\tvar maxVal = settingTypeModel.get( 'max_val' );\n\n\t\t\t/*\n\t\t\t * if we gave a min value set, revert to that if the user enters\n\t\t\t * a lower number\n\t\t\t*/\n\t\t\tif( 'undefined' != typeof minVal && null !== minVal ){\n\t\t\t\tif ( e.target.value < minVal ) {\n\t\t\t\t\tfieldModel.set('value', minVal);\n\t\t\t\t\te.target.value = minVal;\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*\n\t\t\t * if we gave a max value set, revert to that if the user enters\n\t\t\t * a higher number\n\t\t\t*/\n\t\t\tif( 'undefined' != typeof maxVal && null !== maxVal ){\n\t\t\t\tif ( e.target.value > maxVal ) {\n\t\t\t\t\tfieldModel.set('value', maxVal);\n\t\t\t\t\te.target.value = maxVal;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn e.target.value;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","\ndefine( 'controllers/app/radioSetting',[], function() {\n    var controller = Marionette.Object.extend({\n        initialize: function () {\n            // Respond to requests for field setting filtering.\n\n            console.log( nfRadio.channel( 'radio' ) );\n            nfRadio.channel('radio').reply( 'before:updateSetting', this.updateSetting, this);\n        },\n\n\n        updateSetting: function( e, fieldModel, name, settingTypeModel ) {\n            console.log( 'test' );\n        }\n    });\n    return controller;\n} );\n","/**\n * Listens for clicks on our action item action buttons.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Main Sortable\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/itemControls',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\n\t\tdeleting: false, // block edit functionality while deleting field\n\n\t\tinitialize: function() {\n\t\t\t// Listen for clicks to edit, delete, duplicate actions.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:edit', this.clickEdit );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:delete', this.maybeDelete );\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:duplicate', this.clickDuplicate );\n\n\t\t\t// Listen for our drawer close and remove our active edit state\n\t\t},\n\n\t\t/**\n\t\t * Open a drawer with our action model for editing settings.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \taction model\n\t\t * @return void\n\t\t */\n\t\tclickEdit: function( e, model ) {\n\t\t\t// if we are deleting a field, we don't want to the edit drawer to open\n\t\t\tif( ! this.deleting ) {\n\t\t\t\tvar currentDomain = nfRadio.channel('app').request('get:currentDomain');\n\t\t\t\tvar currentDomainID = currentDomain.get('id');\n\t\t\t\tvar type = nfRadio.channel(currentDomainID).request('get:type', model.get('type'));\n\t\t\t\tnfRadio.channel('app').request('open:drawer', 'editSettings', {\n\t\t\t\t\tmodel: model,\n\t\t\t\t\tgroupCollection: type.get('settingGroups')\n\t\t\t\t});\n\t\t\t\t//loop through repeater fields to reset active state if needed\n\t\t\t\tnfRadio.channel( 'fields-repeater' ).trigger( 'clearEditActive', model );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Let user know that all data will be lost before actually deleting\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \taction model\n\t\t * @return void\n\t\t */\n\t\tmaybeDelete: function( e, dataModel ) {\n\t\t\t// we set deleting to true, so the edit event doesn't open drawer\n\t\t\tthis.deleting = true;\n\t\t\tvar modelID = dataModel.get( 'id' );\n\t\t\tvar modelType = dataModel.get( 'objectType' );\n\n\t\t\t// Build a lookup table for fields that we don't save\n\t\t\tvar nonSaveFields = [ 'html', 'submit', 'hr',\n\t\t\t\t'recaptcha', 'spam', 'creditcard', 'creditcardcvc',\n\t\t\t\t'creditcardexpiration', 'creditcardfullname',\n\t\t\t\t'creditcardnumber', 'creditcardzip' ];\n\n\t\t\t/*\n\t\t\t* If this is a new field that hasn't been saved, then we don't\n\t\t\t * need to check for data\n\t\t\t */\n\t\t\tif( 'field' != modelType.toLowerCase() ) {\n\t\t\t\tthis.clickDelete( e, dataModel );\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t* If the field has been saved, then we need to check for\n\t\t\t\t * submission data for this field\n\t\t\t\t */\n\t\t\t\tif( 'tmp' === modelID.toString().substring( 0, 3 )\n\t\t\t\t\t|| -1 != jQuery.inArray( dataModel.get( 'type' ), nonSaveFields ) ) {\n\t\t\t\t\t// not a saved field so proceed as normal\n\t\t\t\t\tthis.clickDelete( e, dataModel );\n\t\t\t\t} else {\n\t\t\t\t\t// need the form id\n\t\t\t\t\tvar formModel = Backbone.Radio.channel('app').request('get:formModel');\n\t\t\t\t\tvar data = {\n\t\t\t\t\t\t'action': 'nf_maybe_delete_field',\n\t\t\t\t\t\t'security': nfAdmin.ajaxNonce,\n\t\t\t\t\t\t'formID': formModel.get('id'),\n\t\t\t\t\t\t'fieldKey': dataModel.get('key'),\n\t\t\t\t\t\t'fieldID': modelID\n\t\t\t\t\t};\n\t\t\t\t\tvar that = this;\n\n\t\t\t\t\t// make call to see if field has submission data\n\t\t\t\t\tjQuery.post(ajaxurl, data)\n\t\t\t\t\t\t.done(function (response) {\n\t\t\t\t\t\t\tvar res = JSON.parse(response);\n\n\t\t\t\t\t\t\tif (res.data.hasOwnProperty('errors')) {\n\t\t\t\t\t\t\t\tvar errors = res.data.errors;\n\t\t\t\t\t\t\t\tvar errorMsg = '';\n\n\t\t\t\t\t\t\t\tif (Array.isArray(errors)) {\n\t\t\t\t\t\t\t\t\terrors.forEach(function(error) {\n\t\t\t\t\t\t\t\t\t\terrors += error + \"\\n\";\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\terrors = errors;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tconsole.log('Maybe Delete Field  Errors: ', errors);\n\t\t\t\t\t\t\t\talert(errors);\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (res.data.field_has_data) {\n\t\t\t\t\t\t\t\t// if it does, show warning modal\n\t\t\t\t\t\t\t\tthat.doDeleteFieldModal(e, dataModel);\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// if not, proceed like normal\n\t\t\t\t\t\t\t\tthat.clickDelete(e, dataModel);\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Create the field delete warning modal\n\t\t *\n\t\t * @param e\n\t\t * @param dataModel\n\t\t */\n\t\tdoDeleteFieldModal: function( e, dataModel ) {\n\t\t\t// Build warning modal to warn user a losing all data related to field\n            var that = this;\n            var modalData = {\n                width: 400,\n                closeOnClick: false,\n                closeOnEsc: true,\n                content: nfi18n.fieldDataDeleteMsg,\n                btnPrimary: {\n                    text: nfi18n.delete,\n                    callback: function() {\n                        // close and destory modal.\n                        deleteModal.toggleModal( false );\n                        deleteModal.destroy();\n                        // proceed as normal, data will be deleted in backend on publish\n                        that.clickDelete( e, dataModel );\n                    }\n                },\n                btnSecondary: {\n                    text: nfi18n.cancel,\n                    callback: function() {\n                        // close and destory modal\n                        deleteModal.toggleModal( false );\n                        deleteModal.destroy();\n                        // set deleting to false so edit can work as normal\n                        that.deleting = false;\n                    }\n                }\n            };\n            var deleteModal = new NinjaModal( modalData );\n\t\t},\n\n\t\t/**\n\t\t * Delete a action model from our collection\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \taction model\n\t\t * @return void\n\t\t */\n\t\tclickDelete: function( e, dataModel ) {\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', dataModel );\n\n\t\t\t// Add our action deletion to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Removed',\n\t\t\t\tdashicon: 'dismiss'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: dataModel.collection\n\t\t\t};\n\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tvar results = changeCollection.where( { model: dataModel } );\n\n\t\t\t_.each( results, function( changeModel ) {\n\t\t\t\tvar data = changeModel.get( 'data' );\n\t\t\t\tif ( 'undefined' != typeof data.fields ) {\n\t\t\t\t\t_.each( data.fields, function( field, index ) {\n\t\t\t\t\t\tif ( field.model == dataModel ) {\n\t\t\t\t\t\t\tdata.fields[ index ].model = newModel;\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\tchangeModel.set( 'data', data );\n\t\t\t\tchangeModel.set( 'model', newModel );\n\t\t\t\tchangeModel.set( 'disabled', true );\n\t\t\t} );\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'removeObject', newModel, null, label, data );\n\t\t\t\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\t\t\tnfRadio.channel( currentDomainID ).request( 'delete', dataModel );\n\t\t\tthis.deleting = false;\n\t\t},\n\n\t\t/**\n\t\t * Duplicate a action within our collection, adding the word \"copy\" to the label.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te     \tevent\n\t\t * @param  backbone.model \tmodel \taction model\n\t\t * @return void\n\t\t */\n\t\tclickDuplicate: function( e, model ) {\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\n\t\t\tvar currentDomain = nfRadio.channel( 'app' ).request( 'get:currentDomain' );\n\t\t\tvar currentDomainID = currentDomain.get( 'id' );\n\n\t\t\t// Change our label.\n\t\t\t// Make sure this update is silent to avoid triggering key change events down the waterfall.\n\t\t\tnewModel.set( 'label', newModel.get( 'label' ) + ' Copy', {silent: true} );\n\t\t\t// Update our ID to the new tmp id.\n\t\t\tvar tmpID = nfRadio.channel( currentDomainID ).request( 'get:tmpID' );\n\t\t\tnewModel.set( 'id', tmpID );\n\t\t\t// Add new model.\n\t\t\t// Params are: model, silent, renderTrigger, action\n\t\t\tnfRadio.channel( currentDomainID ).request( 'add', newModel, false, false, 'duplicate' );\n\t\t\t\n\t\t\t// Add our action addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: model.get( 'objectType' ),\n\t\t\t\tlabel: model.get( 'label' ),\n\t\t\t\tchange: 'Duplicated',\n\t\t\t\tdashicon: 'admin-page'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: nfRadio.channel( currentDomainID ).request( 'get:collection' )\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'duplicateObject', newModel, null, label, data );\n\t\t\t\n\t\t\tmodel.trigger( 'change:label', model );\n\n\t\t\t// Update preview.\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Config file for our merge tags.\n *\n * this.collection represents all of our registered merge tags.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/mergeTags',[\n\t'models/app/mergeTagCollection'\n\t], function(\n\tmergeTagCollection\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.tagSectionCollection = new mergeTagCollection();\n\t\t\tvar that = this;\n\t\t\t_.each( mergeTags, function( tagSection ) {\n\t\t\t\tif ( tagSection.tags ) {\n\t\t\t\t\tvar tags = new mergeTagCollection( tagSection.tags );\n\t\t\t\t} else {\n\t\t\t\t\tvar tags = '';\n\t\t\t\t}\n\n\t\t\t\tthat.tagSectionCollection.add( {\n\t\t\t\t\tid: tagSection.id,\n\t\t\t\t\tlabel: tagSection.label,\n\t\t\t\t\ttags: tags,\n\t\t\t\t\tdefault_group: tagSection.default_group\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tvar fieldTags = this.tagSectionCollection.get( 'fields').get( 'tags' );\n\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fieldCollection.models, function( field ) {\n\t\t\t\t// TODO: Make this dynamic\n\t\t\t\tif ( 'submit' !== field.get( 'type' ) ) {\n\t\t\t\t\tfieldTags.add( {\n\t\t\t\t\t\tid: field.get( 'id' ),\n\t\t\t\t\t\tlabel: field.get( 'label' ),\n\t\t\t\t\t\ttag: that.getFieldKeyFormat( field.get( 'key' ) )\n\t\t\t\t\t} );\t\t\t\t\t\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tvar calcTags = new mergeTagCollection();\n\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\tvar calcCollection = formModel.get( 'settings' ).get( 'calculations' );\n\t\t\t_.each( calcCollection.models, function( calcModel ) {\n\t\t\t\tcalcTags.add( {\n\t\t\t\t\tlabel: calcModel.get( 'name' ),\n\t\t\t\t\ttag: '{calc:' + calcModel.get( 'name' ) + '}'\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tthis.tagSectionCollection.get( 'calcs' ).set( 'tags', calcTags );\n\n\t\t\tthis.currentElement = {};\n\t\t\tthis.settingModel = {};\n\t\t\tthis.open = false;\n\n\t\t\t// Unhook jBox Merge Tag stuff.\n\t\t\t// nfRadio.channel( 'mergeTags' ).reply( 'init', this.initMergeTags, this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'mergeTags' ), 'click:mergeTag', this.clickMergeTag );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:field', this.addFieldTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'delete:field', this.deleteFieldTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'update:option', this.updateCalcTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'remove:option', this.updateCalcTags );\n\n\t\t\t\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:currentElement', this.updateCurrentElement, this );\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:currentSetting', this.updateCurrentSetting, this );\n\n\t\t\t// Listen for requests for our mergeTag collection.\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:collection', this.getCollection, this );\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'get:mergeTag', this.getSectionModel, this );\n\n\t\t\t// When a field's ID is changed (ie from a tmpID), update the merge tag.\n            this.listenTo( nfRadio.channel( 'fieldSetting-id' ), 'update:setting', this.updateID );\n\n\t\t\t// When we edit a key, check for places that key might be used.\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-key' ), 'update:setting', this.updateKey );\n\n\t\t\t// Reply to requests to check a data model for a field key when one is updated.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'replace:fieldKey', this.replaceFieldKey );\n\n\t\t\t// Reply to requests to check a data model for a field key when one is updated.\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:fieldKeyFormat', this.getFieldKeyFormat, this );\n\n\t\t\t/*\n\t\t\t * TODO: Hotkey support for adding tags.\n\t\t\t *\n\t\t\t\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'open:mergeTags', this.openMergeTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'up:mergeTags', this.upMergeTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'down:mergeTags', this.downMergeTags );\n\t\t\tthis.listenTo( nfRadio.channel( 'hotkeys' ), 'return:mergeTags', this.returnMergeTags );\n\t\t\tnfRadio.channel( 'mergeTags' ).reply( 'update:open', this.updateOpen, this );\n\t\t\t*/\n\t\t},\n\n\t\t/**\n\t\t * Init merge tags within the passed view.\n\t\t * @since  3.0\n\t\t * @param  backbone.view view to be searched for merge tags.\n\t\t * @return void\n\t\t */\n\t\tinitMergeTags: function( view ) {\n\t\t\tvar mergeTagsView = nfRadio.channel( 'mergeTags' ).request( 'get:view' );\n\t\t\tvar that = this;\n\t\t\t/*\n\t\t\t * Apply merge tags jQuery plugin.\n\t\t\t *\n\t\t\t * Prevent jBox from being called multiple times on the same element\n\t\t\t */\n\t\t\tthis.jBoxes = {};\n\t\t\tvar that = this;\n\n\t\t\tjQuery( view.el ).find( '.merge-tags' ).each(function() {\n\t\t\t\tif ( 'undefined' == typeof jQuery( this ).data( 'jBox-id' ) ) {\n\t\t\t\t\tvar jBox = jQuery( this ).jBox( 'Tooltip', {\n\t\t\t\t\t\ttitle: 'Insert Merge Tag',\n\t\t\t\t\t\ttrigger: 'click',\n\t\t\t\t\t\tposition: {\n\t\t\t\t\t\t\tx: 'center',\n\t\t\t\t\t\t\ty: 'bottom'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcloseOnClick: 'body',\n\t\t\t\t\t\tcloseOnEsc: true,\n\t\t\t\t\t\ttheme: 'TooltipBorder',\n\t\t\t\t\t\tmaxHeight: 200,\n\n\t\t\t\t\t\tonOpen: function() {\n\t\t\t\t\t\t\tmergeTagsView.reRender( view.model );\n\t\t\t\t\t\t\tthis.setContent( jQuery( '.merge-tags-content' ) );\n\t\t\t\t\t\t\tvar currentElement = jQuery( this.target ).prev( '.setting' );\n\t\t\t\t\t\t\tif ( 0 == currentElement.length ) {\n\t\t\t\t\t\t\t\tcurrentElement = jQuery( view.el ).find( '.setting' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tthat.updateCurrentSetting( view.model );\n\t\t\t\t\t\t\tthat.updateCurrentElement( currentElement );\n\t\t\t\t\t\t\t// nfRadio.channel( 'drawer' ).request( 'prevent:close', 'merge-tags' );\n\t\t\t\t\t\t},\n\t\t\t\t\t\tonClose: function() {\n\t\t\t\t\t\t\t// nfRadio.channel( 'drawer' ).request( 'enable:close', 'merge-tags' );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\tjQuery( this ).data( 'jBox-id', jBox.id );\t\t\t\t\t\n\t\t\t\t}\n\t\t    });\n\t\t},\n\n\t\tclickMergeTag: function( e, tagModel ) {\n\t\t\t/*\n\t\t\t * TODO: Make this more dynamic.\n\t\t\t * Currently, the RTE is the only section that modifies how merge tags work,\n\t\t\t * but another type of setting might need to do this in the future.\n\t\t\t */\n\n\t\t\tif( 'undefined' != typeof this.settingModel.get( 'settingModel' ) && 'calculations' == this.settingModel.get( 'settingModel' ).get( 'name' ) ) {\n\n\t\t\t\tvar currentValue = jQuery( this.currentElement ).val();\n\t\t\t\tvar currentPos = jQuery( this.currentElement ).caret();\n\t\t\t\tvar newPos = currentPos + tagModel.get( 'tag' ).length;\n\n\t\t\t\tvar tag = ( 'undefined' != typeof tagModel.get( 'calcTag' ) ) ? tagModel.get( 'calcTag' ) : tagModel.get( 'tag' );\n\n\t\t\t\tcurrentValue = currentValue.substr( 0, currentPos ) + tag + currentValue.substr( currentPos );\n\t\t\t\tjQuery( this.currentElement ).val( currentValue ).caret( newPos ).trigger( 'change' );\n\t\t\t} else if( 'rte' == this.settingModel.get( 'type' ) ) {\n\t\t\t\tjQuery( this.currentElement ).summernote( 'insertText', tagModel.get( 'tag' ) );\n\t\t\t} else {\n\t\t\t\tvar currentValue = jQuery( this.currentElement ).val();\n\t\t\t\tvar currentPos = jQuery( this.currentElement ).caret();\n\t\t\t\tvar newPos = currentPos + tagModel.get( 'tag' ).length;\n\t\t\t\tcurrentValue = currentValue.substr( 0, currentPos ) + tagModel.get( 'tag' ) + currentValue.substr( currentPos );\n\t\t\t\tjQuery( this.currentElement ).val( currentValue ).caret( newPos ).trigger( 'change' );\n\t\t\t}\n\t\t},\n\n\t\taddFieldTags: function( fieldModel ) {\n\t\t\t// TODO: Make this dynamic\n\t\t\tif ( 'submit' !== fieldModel.get( 'type' ) ) {\n\t\t\t\tthis.tagSectionCollection.get( 'fields' ).get( 'tags' ).add( {\n\t\t\t\t\tid: fieldModel.get( 'id' ),\n\t\t\t\t\tlabel: fieldModel.get( 'label' ),\n\t\t\t\t\ttag: this.getFieldKeyFormat( fieldModel.get( 'key' ) ),\n\t\t\t\t\tcalcTag: this.getFieldKeyFormatCalc( fieldModel.get( 'key' ) )\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\tdeleteFieldTags: function( fieldModel ) {\n\t\t\tvar fieldID = fieldModel.get( 'id' );\n\t\t\tvar tagModel = this.tagSectionCollection.get( 'fields' ).get( 'tags' ).get( fieldID );\n\t\t\tthis.tagSectionCollection.get( 'fields' ).get( 'tags' ).remove( tagModel );\n\t\t},\n\n\t\tupdateCalcTags: function( optionModel ) {\n\t\t\tvar calcTags = new mergeTagCollection();\n\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\tvar calcCollection = formModel.get( 'settings' ).get( 'calculations' );\n\n\t\t\t_.each( calcCollection.models, function( calc ) {\n\t\t\t\tcalcTags.add( {\n\t\t\t\t\tlabel: calc.get( 'name' ),\n\t\t\t\t\ttag: '{calc:' + calc.get( 'name' ) + '}'\n\t\t\t\t} );\n\t\t\t} );\n\n\t\t\tthis.tagSectionCollection.get( 'calcs' ).set( 'tags', calcTags );\n\t\t},\n\n\t\topenMergeTags: function( e ) {\n\t\t\tif ( 'TEXTAREA' == jQuery( e.target )[0].tagName || 'INPUT' == jQuery( e.target )[0].tagName ) {\n\t\t\t\tjQuery( e.target ).parent().find( '.merge-tags' ).click();\n\t\t\t}\n\t\t},\n\n\t\treturnMergeTags: function( e ) {\n\t\t\tif ( this.open ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tvar currentModel = this.fields.where( { 'active': true } )[0];\n\t\t\t\tif ( currentModel ) {\n\t\t\t\t\tthis.clickMergeTag( e, currentModel );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tupMergeTags: function( e ) {\n\t\t\tif ( this.open ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.changeActiveTag( 'up' );\n\t\t\t}\n\t\t},\n\n\t\tdownMergeTags: function( e ) {\n\t\t\tif ( this.open ) {\n\t\t\t\te.preventDefault();\n\t\t\t\tthis.changeActiveTag( 'down' );\n\t\t\t}\n\t\t},\n\n\t\tchangeActiveTag: function( dir ) {\n\t\t\tif ( 'down' == dir ) {\n\t\t\t\tvar inc = 1;\n\t\t\t} else {\n\t\t\t\tvar inc = -1\n\t\t\t}\n\t\t\t// First, check to see if a field is currently active.\n\t\t\tif( 0 < this.fields.where( { 'active': true } ).length ) {\n\t\t\t\tvar currentModel = this.fields.where( { 'active': true } )[0];\n\t\t\t\tvar currentIndex = this.fields.indexOf( currentModel );\n\t\t\t\tcurrentModel.set( 'active', false );\n\n\t\t\t\tvar nextModel = this.fields.models[ currentIndex + inc ];\n\t\t\t\tif ( nextModel ) {\n\t\t\t\t\tnextModel.set( 'active', true );\n\t\t\t\t} else {\n\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else if ( 0 < this.fields.where( { 'active': true } ) ) { // There aren't any active fields. Check for active system tags.\n\t\t\t\tconsole.log( 'system' );\n\t\t\t} else if ( 0 < this.userInfo.where( { 'active': true } ) ) { // No active user info LIs.\n\t\t\t\tconsole.log( 'userinfo' );\n\t\t\t} else { // No active LIs. We haven't made any active yet, or we've gotten to the bottom of the list.\n\t\t\t\t// Make sure that we have fields\n\t\t\t\tif ( 0 < this.fields.models.length ) {\n\t\t\t\t\t// Set our first field to active.\n\t\t\t\t\tthis.fields.models[0].set( 'active', true );\n\t\t\t\t} else {\n\t\t\t\t\t// Set our first system model to active.\n\t\t\t\t\tthis.system.models[0].set( 'active', true );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tupdateCurrentElement: function( element ) {\n\t\t\tthis.currentElement = element;\n\t\t},\n\n\t\tupdateCurrentSetting: function( settingModel ) {\n\t\t\tthis.settingModel = settingModel;\n\t\t},\n\n\t\tgetCollection: function() {\n\t\t\treturn this.tagSectionCollection;\n\t\t},\n\n\t\tgetSectionModel: function( id ) {\n\t\t\treturn this.tagSectionCollection.get( id );\n\t\t},\n\n\t\tupdateOpen: function( open ) {\n\t\t\tthis.open = open;\n\t\t\t_.each( this.tagSectionCollection.get( 'fields' ).models, function( model ) {\n\t\t\t\tmodel.set( 'active', false );\n\t\t\t} );\n\t\t},\n\n\t\t// When a field is published, update the merge tag with the newly assigned ID (as opposed to the tmpID).\n        updateID: function( fieldModel ) {\n\n\t\t\t// Get the formatted merge tag for comparison.\n\t\t\tvar targetTag = this.getFieldKeyFormat( fieldModel.get( 'key' ) );\n\n\t\t\t// Search the field tags for the matching merge tag to be updated.\n\t\t\tvar oldTag = this.tagSectionCollection.get( 'fields' ).get( 'tags' ).find( function( fieldMergeTag ){\n                return targetTag == fieldMergeTag.get( 'tag' );\n            });\n\n\t\t\t// If no matching tag is found, return early.\n\t\t\tif( 'undefined' == typeof oldTag ) return;\n\n\t\t\t// Update the merge tag with the \"published\" field ID.\n\t\t\toldTag.set( 'id', fieldModel.get( 'id' ) );\n\t\t},\n\n\t\tupdateKey: function( fieldModel ) {\n\t\t\tvar newKey = fieldModel.get( 'key' );\n\t\t\tvar oldTag = this.tagSectionCollection.get( 'fields' ).get( 'tags' ).get( fieldModel.get( 'id' ) );\n\t\t\tif ( 'undefined' != typeof oldTag ) {\n\t\t\t\toldTag.set( 'tag', this.getFieldKeyFormat( newKey ) );\t\t\t\t\n\t\t\t}\n\n\t\t},\n\n\t\tgetFieldKeyFormat: function( key ) {\n\t\t\treturn '{field:' + key + '}';\n\t\t},\n\n\t\tgetFieldKeyFormatCalc: function( key ) {\n\t\t\treturn '{field:' + key + ':calc}';\n\t\t},\n\n\t\treplaceFieldKey: function( dataModel, keyModel, settingModel ) {\n            var oldKey = this.getFieldKeyFormat( keyModel._previousAttributes[ 'key' ] );\n\t\t\tvar newKey = this.getFieldKeyFormat( keyModel.get( 'key' ) );\n\t\t\tvar settingName = settingModel.get( 'name' );\n\t\t\tvar oldVal = dataModel.get( settingName );\n            if(settingName == 'calculations' && 'undefined' != typeof(dataModel.get('calculations'))) {\n                var calcModel = dataModel.get( 'calculations' );\n                calcModel.each( function( model ) {\n                    var oldCalcKey = oldKey.slice( 0, (oldKey.length - 1) ) + ':calc}';\n                    var newCalcKey = newKey.slice( 0, (newKey.length - 1 ) ) + ':calc}';\n                    oldVal = model.get( 'eq' );\n                    if ( 'string' == typeof( oldVal ) ) {\n                        var re = new RegExp( oldCalcKey, 'g' );\n                        var newVal = oldVal.replace( re, newCalcKey );\n                        re = new RegExp( oldKey, 'g' );\n                        // TODO: We won't need this second replace when we no longer\n                        // have to append :calc to merge tags.\n                        newVal = newVal.replace( re, newKey );\n                        model.set( 'eq', newVal );\n                    }\n                } );\n                return false;\n            }\n\t\t\tif ( 'string' == typeof oldVal ) {\n\t\t\t\tvar re = new RegExp( oldKey, 'g' );\n\t\t\t\tnewVal = oldVal.replace( re, newKey );\n\t\t\t\tdataModel.set( settingName, newVal );\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/mergeTagLookupCollection',['models/app/mergeTagModel'], function( mergeTagModel ) {\n    var collection = Backbone.Collection.extend( {\n        model: mergeTagModel\n    } );\n    return collection;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTag',[], function() {\n    var view = Marionette.ItemView.extend({\n        tagName: 'li',\n        template: '#tmpl-nf-merge-tag-box-tag',\n\n        events: {\n            \"click\": \"insertTag\"\n        },\n\n        insertTag: function() {\n            nfRadio.channel( 'mergeTags' ).request( 'insert:tag', this.model.get( 'tag' ) );\n        }\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagList',[ 'views/app/drawer/mergeTag' ], function( mergeTagView ) {\n    var view = Marionette.CollectionView.extend({\n        tagName: 'ul',\n        childView: mergeTagView,\n        calc: false,\n\n        initialize: function() {\n            nfRadio.channel( 'merge-tags' ).reply( 'update:taglist', this.sectionFilter, this );\n            nfRadio.channel( 'merge-tags' ).reply( 'filtersearch', this.searchFilter, this );\n        },\n\n        filter: function( child, index, collection ){\n            return 'fields' == child.get( 'section' );\n        },\n\n        sectionFilter: function( section, calc ){\n            this.filter = function( child, index, collection ){\n                return section == child.get( 'section' );\n            }\n\n            if ( calc ) {\n                this.calc = true;\n            }\n\n            if ( this.calc ) {\n                var fieldsToRemove = this.excludeFromCalcs();\n\n                /**\n                 * Filters our merge tags.\n                 * Make sure that we're in the right section, and then check to see if the merge tag is in our remove tracker.\n                 */\n                this.filter = function( child, index, collection ) {\n                    return section == child.get( 'section' ) && -1 == fieldsToRemove.indexOf( child.get( 'tag' ) );\n                }\n            }\n\n            this.render();\n            nfRadio.channel( 'merge-tags' ).trigger( 'after:filtersearch', section );\n        },\n\n        searchFilter: function( term ){\n            if ( this.calc ) {\n                var fieldsToRemove = this.excludeFromCalcs();\n            }\n\n            this.filter = function( child, index, collection ){\n                var label = child.get( 'label' ).toLowerCase().indexOf( term.toLowerCase().replace( ':', '' ) ) >= 0;\n                var tag   = child.get( 'tag' ).toLowerCase().indexOf( term.toLowerCase() ) >= 0;\n                // If we are in a calculation setting and this tag is in our remove tracker, early return false.\n                if ( this.calc && -1 != fieldsToRemove.indexOf( child.get( 'tag' ) ) ) {\n                    return false;\n                }\n                return label || tag;\n            }\n\n            this.render();\n            nfRadio.channel( 'merge-tags' ).trigger( 'after:filtersearch' );\n\n        },\n\n        /**\n         * TODO: This is a wonky fix for removing Product and Quantity fields from calcuation merge tags.\n         * Merge tags don't respect the \"exclude\" merge tag settings.\n         * Ultimately, the fix might include updating merge tags to respect those settings.\n         */\n        excludeFromCalcs: function(){\n            /**\n             * Remove any unwanted fields if we are in a calculation.\n             * Get a list of all fields, then filter out unwanted fields.\n             */\n            var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n            // Stores the keys of unwanted fields.\n            var fieldsToRemove = [];\n            // Declare blacklisted field types.\n            var blacklist = ['product', 'quantity', 'total', 'shipping', 'date'];\n            // Remove them from the merge tag selection box.\n            _.each( fieldCollection.models, function( model ) {\n                if ( -1 != blacklist.indexOf( model.get('type') ) ) {\n                    fieldsToRemove.push( '{field:' + model.get( 'key' ) + '}' );\n                }\n            });\n            return fieldsToRemove;\n        }\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagGroup',[], function() {\n    var view = Marionette.ItemView.extend({\n        tagName: 'li',\n        template: '#tmpl-nf-merge-tag-box-section',\n        events: {\n            \"click\": \"onClick\"\n        },\n\n        initialize: function () {\n            this.listenTo( nfRadio.channel( 'merge-tags' ), 'after:filtersearch', this.updateActive );\n        },\n\n        onClick: function(){\n          this.updateTags();\n        },\n\n        updateTags: function() {\n            nfRadio.channel( 'merge-tags' ).request( 'update:taglist', this.model.get( 'id' ) );\n        },\n\n        updateActive: function( section ) {\n            this.$el.removeClass( 'active' );\n\n            if ( section == this.model.get( 'id' ) ) {\n                this.$el.addClass( 'active' );\n            }\n        },\n\n        setActive: function(){\n            this.$el.addClass( 'active' );\n            this.$el.siblings().removeClass( 'active' );\n        },\n\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagGroupList',[ 'views/app/drawer/mergeTagGroup' ], function( mergeTagGroupView ) {\n    var view = Marionette.CollectionView.extend({\n        tagName: 'ul',\n        childView: mergeTagGroupView,\n\n        initialize: function(){\n            this.listenTo( nfRadio.channel( 'merge-tags' ), 'open', this.render, this );\n        },\n\n        // TODO: Update filter when a new tag is added. ie Calculations.\n        filter: function( child, index, collection ){\n            return 0 < child.get( 'tags' ).length;\n        },\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagFilter',[], function() {\n    var view = Marionette.ItemView.extend({\n        template: '#tmpl-nf-merge-tag-box-filter',\n        events: {\n            \"keyup input\": \"updateFilter\",\n        },\n        updateFilter: function( event ) {\n\n            if( /* ENTER */ 13 == event.keyCode ){ // Copied from Keyup Callback.\n                // Get top listed merge tag.\n                var firstFilteredTag = jQuery( '#merge-tags-box .merge-tag-list ul li span' ).first().data( 'tag' );\n\n                nfRadio.channel( 'mergeTags' ).request( 'insert:tag', firstFilteredTag );\n\n                // COPIED FROM BELOW\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                jQuery( '#merge-tags-box' ).removeClass();\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n                return;\n            }\n            var value = this.$el.find( 'input' ).val();\n            nfRadio.channel( 'merge-tags' ).request( 'filtersearch', value );\n        }\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/drawer/mergeTagBox',[], function() {\n    var view = Marionette.LayoutView.extend({\n        el: '#merge-tags-box',\n        template: \"#tmpl-nf-merge-tag-box\",\n\n        regions: {\n            filter:   '.merge-tag-filter',\n            sections: '.merge-tag-sections',\n            tags:     '.merge-tag-list'\n        },\n    });\n\n    return view;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage Merge Tag Box\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1\n */\n\ndefine( 'controllers/app/mergeTagBox',[\n    'models/app/mergeTagModel',\n    'models/app/mergeTagLookupCollection',\n    'views/app/drawer/mergeTag',\n    'views/app/drawer/mergeTagList',\n    'views/app/drawer/mergeTagGroup',\n    'views/app/drawer/mergeTagGroupList',\n    'views/app/drawer/mergeTagFilter',\n    'views/app/drawer/mergeTagBox'\n], function(\n    MergeTagModel,\n    MergeTagLookupCollection,\n    MergeTagView,\n    MergeTagListView,\n    MergeTagGroupView,\n    MergeTagGroupListView,\n    MergeTagFilterView,\n    MergeTagBoxLayout\n) {\n    var controller = Marionette.Object.extend( {\n\n        caret: 0, // Track the caret position of the current setting's input.\n        old: '', // THe old merge tag that will be replaced.\n\n        initialize: function(){\n\n            this.listenTo( nfRadio.channel( 'drawer' ), 'render:settingGroup', function(){\n                jQuery( '.merge-tags' ).off( 'click' );\n                jQuery( '.merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            });\n\n            this.listenTo( nfRadio.channel( 'app' ), 'after:appStart', this.afterAppStart );\n            this.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n            this.listenTo( nfRadio.channel( 'drawer' ), 'before:close', this.beforeDrawerClose );\n\n            var that = this;\n            nfRadio.channel( 'mergeTags' ).reply( 'set:caret', function( position ){\n               that.caret = position;\n            });\n            nfRadio.channel( 'mergeTags' ).reply( 'get:caret', function(){\n                return that.caret;\n            });\n\n            var that = this;\n            nfRadio.channel( 'mergeTags' ).reply( 'set:old', function( value ){\n                that.old = value;\n            });\n            nfRadio.channel( 'mergeTags' ).reply( 'get:old', function(){\n                return that.old;\n            });\n\n            nfRadio.channel( 'mergeTags' ).reply( 'insert:tag', this.insertTag.bind( this ) );\n\n            /** OPTION REPEATER */\n            this.listenTo( nfRadio.channel( 'option-repeater' ), 'add:option', function( model ){\n                var selector = '#' + model.cid + ' .has-merge-tags input.setting';\n                jQuery( selector ).on( 'focus', function( event ){\n                   that.focusCallback( event, selector, 'option-repeater' );\n                });\n                jQuery( selector ).on( 'keyup', function( event ){\n                    that.keyupCallback( event, selector, 'option-repeater' );\n                });\n                jQuery( selector ).siblings( '.nf-list-options .merge-tags' ).off( 'click' );\n                jQuery( selector ).siblings( '.nf-list-options .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            } );\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', function(){\n                jQuery( '.nf-list-options .merge-tags' ).off( 'click' );\n                jQuery( '.nf-list-options .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            } );\n\n            /* CALCULATIONS */\n            this.listenTo( nfRadio.channel( 'setting-calculations-option' ), 'render:setting', this.renderSetting );\n            // this.listenTo( nfRadio.channel( 'setting-calculations-option' ), 'render:setting', function( settingModel, dataModel, view ){\n            //     view.$el.find( '.merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            // } );\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', function(){\n                jQuery( '.nf-list-options.calculations .merge-tags' ).off( 'click' );\n                jQuery( '.nf-list-options.calculations .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            } );\n\n            /* SUMMERNOTE */\n            this.listenTo( nfRadio.channel( 'summernote' ), 'focus', function( e, selector ) {\n                that.focusCallback( false, selector, 'rte' );\n            } );\n            this.listenTo( nfRadio.channel( 'summernote' ), 'keydown', function( e, selector ){\n                jQuery( selector ).closest( '.nf-setting' ).find( '.setting' ).summernote( 'saveRange' );\n            } );\n            this.listenTo( nfRadio.channel( 'summernote' ), 'keyup', function( e, selector ){\n                that.keyupCallback( e, selector, 'rte' );\n            } );\n\n            // When an RTE setting is shown, make sure merge tags are hooked up.\n            this.listenTo( nfRadio.channel( 'setting-type-rte' ), 'render:setting', function(){\n                jQuery( '.note-editor .merge-tags' ).off( 'click' );\n                jQuery( '.note-editor .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            } );\n\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', function(){\n                jQuery( '.note-editor .merge-tags' ).off( 'click' );\n                jQuery( '.note-editor .merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n            } );\n\n            jQuery( document ).on( 'keyup', function( event ){\n                if( 27 == event.keyCode ){\n                    nfRadio.channel( 'mergeTags' ).request( 'insert:tag', '' );\n                    // Copied from KeyupCallback.\n                    jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                    nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                    jQuery( '#merge-tags-box' ).removeClass();\n                    jQuery( '.merge-tag-focus' ).blur();\n                    jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                    jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n                }\n            });\n\n            /**\n             * Listen to the Field Changes (add, delete, update) and update the Merge Tags.\n             */\n            this.listenTo( Backbone.Radio.channel( 'fields' ), 'add:field',    this.afterAppStart );\n            this.listenTo( Backbone.Radio.channel( 'fields' ), 'delete:field', this.afterAppStart );\n            this.listenTo( Backbone.Radio.channel( 'fieldSetting-key' ), 'update:setting', this.afterAppStart );\n\n            /** ... and Calc updates. */\n            this.listenTo( Backbone.Radio.channel( 'calcs' ), 'update:calc', this.afterAppStart );\n\n            this.listenTo( Backbone.Radio.channel( 'app' ), 'change:currentDomain', this.afterAppStart );\n        },\n\n        afterAppStart: function() {\n\n            var currentDomain = Backbone.Radio.channel( 'app' ).request( 'get:currentDomain' );\n\n            var mergeTagCollection = nfRadio.channel( 'mergeTags' ).request( 'get:collection' );\n            var mergeTags = [];\n            mergeTagCollection.each( function( section ){\n\n                section.get( 'tags' ).each( function( tag ){\n\n                    if( 'fields' == currentDomain.get( 'id' ) && '{submission:sequence}' == tag.get( 'tag' ) ) return;\n\n                    mergeTags.push({\n                        label: tag.get( 'label' ),\n                        tag:   tag.get( 'tag' ),\n                        section: section.get( 'id' )\n                    });\n                });\n            });\n            var layout = new MergeTagBoxLayout();\n            layout.render();\n            var tagCollection = new MergeTagLookupCollection( mergeTags );\n            var mergeTagListView = new MergeTagListView({\n                collection: tagCollection\n            });\n            var mergeTagGroupListView = new MergeTagGroupListView({\n                collection: mergeTagCollection\n            });\n\n            layout.getRegion('tags').show(mergeTagListView);\n            layout.getRegion('sections').show(mergeTagGroupListView);\n            layout.getRegion('filter').show(new MergeTagFilterView);\n        },\n\n        beforeRenderSetting: function( settingModel, dataModel ){\n            if( 'undefined' == typeof settingModel.get( 'use_merge_tags' ) ) return;\n            if( ! settingModel.get( 'use_merge_tags' ) ) return;\n            var name = settingModel.get( 'name' );\n            this.listenTo( nfRadio.channel( 'setting-' + name ), 'render:setting', this.renderSetting );\n        },\n\n        renderSetting: function( settingModel, dataModel, view ){\n\n            view.$el.find( '.merge-tags' ).off( 'click' );\n            view.$el.find( '.merge-tags' ).on( 'click', this.mergeTagsButtonClick );\n\n            if( 0 == jQuery( '#merge-tags-box' ).length ) this.afterAppStart();\n\n            // Track Scrolling.\n            jQuery( '#nf-drawer' ).on( 'scroll', function(){\n               // COPIED AND MODIFIED FROM FOCUS\n                if( 0 == jQuery( '.merge-tag-focus' ).length ) return;\n\n                var rteEditor = jQuery( '.merge-tag-focus' ).closest( '.nf-setting' ).find( '.note-editor' );\n                if( 0 != rteEditor.length ){\n                    var posY = rteEditor.offset().top - jQuery(window).scrollTop();\n                    var height = rteEditor.outerHeight();\n                } else {\n                    var posY = jQuery('.merge-tag-focus').offset().top - jQuery(window).scrollTop();\n                    var height = jQuery('.merge-tag-focus').outerHeight();\n                }\n\n\t            // Find out if merge tag box will go below bottom of the page.\n\t            var tagBoxY = posY + height;\n\t            var windowHeight = window.innerHeight;\n\t            var tagBoxHeight = jQuery( '#merge-tags-box' ).outerHeight();\n\n\t            // If merge tag box will render below the bottom of the page,\n\t            // change it to render above the field\n\n\t            if ( ( tagBoxY + tagBoxHeight ) > windowHeight ) {\n                    tagBoxY = posY - tagBoxHeight;\n                }\n\n                if ( 0 > tagBoxY ) {\n                    tagBoxY = posY;\n                }\n\n                jQuery( '#merge-tags-box' ).css( 'top', tagBoxY );\n\n                var boxHeight = jQuery( '#merge-tags-box' ).outerHeight();\n                jQuery( '#nf-drawer' ).css( 'padding-bottom', boxHeight + 'px' );\n\n                var repeaterRow = jQuery( '.merge-tag-focus' ).closest( '.nf-list-options-tbody' );\n                if( 0 != repeaterRow.length ){\n                    var left = repeaterRow.offset().left - jQuery(window).scrollLeft();\n                    jQuery( '#merge-tags-box' ).css( 'left', left );\n                } else {\n                    var posX = jQuery( '.merge-tag-focus' ).closest( '.nf-settings' ).offset().left - jQuery(window).scrollLeft();\n                    jQuery( '#merge-tags-box' ).css( 'left', posX );\n                    jQuery( '#merge-tags-box' ).css( 'width', jQuery( '.merge-tag-focus' ).closest( '.nf-settings' ).width() );\n                }\n            });\n\n            // On input focus, move the Merge Tag Box into position.\n            jQuery( view.el ).find( '.setting' ).on( 'focus', this.focusCallback );\n\n            // TODO: Maybe move to view events.\n            // On input keyup, maybe show Merge Tag Box.\n            jQuery( view.el ).find( '.setting' ).on( 'keyup', this.keyupCallback );\n        },\n\n        // TODO: Maybe move to view class.\n        beforeDrawerClose: function(){\n            jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n            nfRadio.channel( 'drawer' ).request( 'enable:close' );\n            // jQuery( 'body' ).append( jQuery( '#merge-tags-box' ) );\n        },\n\n        insertTag: function( tag ) {\n\n            var $input = jQuery( '.merge-tag-focus' );\n\n            if( 0 != $input.closest( '.nf-setting' ).first().find( '.note-editable' ).length ){\n                $input = $input.closest( '.nf-setting' ).first().find( '.note-editable' );\n            }\n\n            if( 1 < $input.length ){ $input = $input.first(); }\n\n            if( $input.hasClass( 'note-editable' ) ){\n                var str = $input.closest( '.nf-setting' ).find( '.setting' ).summernote( 'code' );\n            } else {\n                var str = $input.val();\n            }\n\n            var find = nfRadio.channel( 'mergeTags' ).request( 'get:old' );\n            var replace = tag;\n            var caretPos = nfRadio.channel( 'mergeTags' ).request( 'get:caret' );\n\n            var patt = /{([a-zA-Z0-9]|:|_||-})*/g;\n\n            // Loop through matches to find insert/replace index range.\n            // Reference: http://codepen.io/kjohnson/pen/36c3a782644dfff40fe3c1f05f8739d9?editors=0012\n            while (match = patt.exec(str)) {\n                if (find != match[0]) continue; // This isn't the match you are looking for...\n                var string = str.slice(0, match.index) + replace + str.slice(patt.lastIndex); // Fancy replace for the specifc match, using the index/position.\n\n                if( $input.hasClass( 'note-editable' ) ){\n                    $input.closest( '.nf-setting' ).find( '.setting' ).summernote( 'code', string );\n\n                    // Reposition the caret. http://stackoverflow.com/a/6249440 TODO: Determine the appropriate childNode.\n                    var el = $input;\n                    var childNode = null; // Default to first childNode.\n                    _.each( el[0].childNodes, function( node, index ){\n                        if( childNode ) return;\n                        if( ! node.nodeValue && ! node.innerHTML ) return;\n                        if( node.nodeValue ) {\n                            var value = node.nodeValue;\n                        } else if( node.innerHTML ){\n                            var value = node.innerHTML;\n                        }\n\n                        if( -1 == value.indexOf(replace) ) return; // Replace not found in this node.\n\n                        value = value.replace( /&nbsp;/g, ' ' );\n                        var position = value.indexOf(replace) + find.length;\n\n                        /*\n                         * If no caretPos, determine based on the node. ie Merge Tag Button context.\n                         * Note: We can't just check for '{', because they could just be inserting the first tag.\n                         */\n                        if( -1 == caretPos ){\n                            caretPos = value.indexOf( replace ) + 1;\n                        }\n\n                        if (caretPos == position) childNode = el[0].childNodes[index];\n                    });\n                    if( ! childNode ) childNode = el[0].childNodes[0];\n                    var offset = caretPos - find.length + replace.length;\n                    var range = document.createRange();\n                    var sel = window.getSelection();\n                    if( 0 != childNode.childNodes.length ) {\n                        try{\n                           range.setStart(childNode.childNodes[0], offset); \n                        } catch( err ) {\n                            console.log( childNode );\n                            console.log( 'error' );\n                        }\n                        \n                    } else {\n                        try {\n                            range.setStart(childNode, offset);\n                        } catch( err ) {\n                            console.log( 'error' );\n                        }\n                        \n                    }\n                    range.collapse(true);\n                    sel.removeAllRanges();\n                    sel.addRange(range);\n\n\n                } else {\n                    $input.val(string); // Update input value with parsed string.\n                    $input.change(); // Trigger a change event after inserting the merge tag so that it saves to the model.\n                    $input.caret(caretPos - find.length + replace.length); // Update Carept Position.\n                }\n\n            }\n\n            jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n            nfRadio.channel( 'drawer' ).request( 'enable:close' );\n            $input.removeClass( 'merge-tag-focus' );\n            $input.closest( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n        },\n\n        mergeTagsButtonClick: function( e ){\n            var $this = jQuery( this );\n\n            if ($this.hasClass('open-media-manager')) {\n                return;\n            }\n\n            if( $this.siblings().hasClass( 'merge-tag-focus' ) ){\n                nfRadio.channel( 'mergeTags' ).request( 'insert:tag', '' );\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n                return;\n            }\n\n            if( 0 !== $this.closest( '.nf-setting, .nf-table-row' ).find( '.note-tools' ).length ){\n                var $inputSetting = $this.closest( '.note-editor' ).siblings( '.setting' ).first();\n                $this.closest( '.nf-setting' ).find( '.setting' ).summernote( 'insertText', '{' );\n                // Since we haven't determined the caretPos, set to -1 as a flag to determine later.\n                nfRadio.channel('mergeTags').request( 'set:caret', -1 );\n            } else {\n                var $inputSetting = $this.siblings( '.setting' ).first();\n                var text = $inputSetting.val() || '';\n                $inputSetting.val( text + '{' ).change();\n                nfRadio.channel('mergeTags').request('set:caret', text.length + 1 );\n            }\n\n            if( $this.parent().hasClass( 'note-tools' ) ){\n                // $this.closest( '.nf-setting' ).find( '.setting' ).summernote( 'insertText', '{' );\n            }\n\n            nfRadio.channel('mergeTags').request('set:old', '{' );\n\n            $inputSetting.addClass( 'merge-tag-focus' );\n\n            // Disable browser autocomplete.\n            var autocomplete = $this.attr( 'autocomplete' );\n            $this.attr( 'autocomplete', 'off' );\n            $this.data( 'autocomplete', autocomplete );\n\n            var $overlayElement = $this.closest( '.nf-setting, .nf-table-row' );\n            if( 0 != $overlayElement.find( '.note-editor' ).length ){\n                $overlayElement.find('.note-editor' ).addClass('merge-tag-focus-overlay');\n            } else {\n                $overlayElement.addClass('merge-tag-focus-overlay');\n            }\n\n            /**\n             * TODO: This is a wonky work around for removing Product and Quantity fields from calculation merge tags.\n             * The merge tag system doesn't currently respect \"exclude\" merge tag settings.\n             *\n             * If 'eq' is the textarea next to the merge tag icon, then we're in a calculation setting.\n             */\n            if ( 'eq' == jQuery( e.target ).prev( 'textarea' ).data( 'id' ) ) {\n                var calc = true;\n            } else {\n                var calc = false;\n            }\n\n            // Request that our merge tag box update its tag list, passing whether or not we're in a calculation setting.\n            nfRadio.channel( 'merge-tags' ).request( 'update:taglist', 'fields', calc );\n            \n            jQuery( '#merge-tags-box' ).css( 'display', 'block' );\n            nfRadio.channel( 'drawer' ).request( 'prevent:close' );\n\n            jQuery( '.merge-tag-focus-overlay' ).off( 'click' );\n            jQuery( '.merge-tag-focus-overlay' ).on( 'click', function( e ) {\n                if ( jQuery( e.target ).hasClass( 'note-editor' ) ) {\n                    nfRadio.channel( 'mergeTags' ).request( 'insert:tag', '' );\n                    jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                    nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                    jQuery( '#merge-tags-box' ).removeClass();\n                    jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                    jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n                }\n            } );\n\n            setTimeout(function(){\n                jQuery( '#merge-tags-box' ).find( '.merge-tag-filter' ).find( 'input' ).focus();\n            }, 500 );\n        },\n\n        focusCallback: function( e, target, type ){\n\n            var type = type || 'setting';\n            var $this = ( 'undefined' == typeof target ) ? jQuery( this ) : jQuery( target );\n\n            jQuery( '.merge-tag-focus' ).each(function(index, el){\n                if( this == el ) return;\n                el.removeClass( 'merge-tag-focus' );\n            });\n\n            if( 'rte' == type ) {\n                var posY = $this.closest( '.nf-setting' ).find( '.note-editor' ).offset().top - jQuery(window).scrollTop();\n                var height = $this.closest( '.nf-setting' ).find( '.note-editor' ).outerHeight();\n            } else {\n                var posY = $this.offset().top - jQuery(window).scrollTop();\n                var height = $this.outerHeight();\n            }\n\n            // Find out if merge tag box will go below bottom of the page.\n\t        var tagBoxY = posY + height;\n\t        var windowHeight = window.innerHeight;\n\t        var tagBoxHeight = jQuery( '#merge-tags-box' ).outerHeight();\n\n\t        // If merge tag box will render below the bottom of the page,\n            // change it to render above the field\n\n\t        if ( ( tagBoxY + tagBoxHeight ) > windowHeight ) {\n\t\t        tagBoxY = posY - tagBoxHeight;\n\t        }\n\n            if ( 0 > tagBoxY ) {\n                tagBoxY = posY;\n            }\n\n            jQuery( '#merge-tags-box' ).css( 'top', tagBoxY );\n\n            var repeaterRow = $this.closest( '.nf-list-options-tbody' );\n            if( 0 != repeaterRow.length ) {\n                var left = repeaterRow.offset().left - jQuery(window).scrollLeft();\n                jQuery( '#merge-tags-box' ).css( 'left', left );\n            } else if( 'rte' == type ) {\n                var posX = $this.closest( '.nf-setting' ).find( '.note-editor' ).offset().left - jQuery(window).scrollLeft();\n                jQuery( '#merge-tags-box' ).css( 'left', posX );\n                jQuery( '#merge-tags-box' ).css( 'width', $this.closest( '.nf-setting' ).find( '.note-editor' ).width() );\n            }\n            else\n            {\n                var posX = jQuery( this ).closest( '.nf-settings' ).offset().left - jQuery(window).scrollLeft();\n                jQuery( '#merge-tags-box' ).css( 'left', posX );\n                jQuery( '#merge-tags-box' ).css( 'width', $this.closest( '.nf-settings' ).width() );\n            }\n\n            var dataID = jQuery( this ).data( 'id' );\n            if( dataID && 'eq' != dataID ) return;\n\n            // var offset = jQuery( view.el ).find( '.setting' ).parent().outerHeight();\n            // jQuery( view.el ).find( '.setting' ).parent().append( jQuery( '#merge-tags-box' ) );\n            // jQuery( '#merge-tags-box' ).css( 'top', offset );\n        },\n\n        keyupCallback: function( event, target, type ){\n            var type = type || 'setting';\n\n            if( /* ENTER */ 13 == event.keyCode ){\n\n                // Get top listed merge tag.\n                var firstFilteredTag = jQuery( '#merge-tags-box .merge-tag-list ul li span' ).first().data( 'tag' );\n\n                nfRadio.channel( 'mergeTags' ).request( 'insert:tag', firstFilteredTag );\n\n                // COPIED FROM BELOW\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                jQuery( '#merge-tags-box' ).removeClass();\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n\n                return;\n            }\n\n            // Get the value.\n            // var value = jQuery( summernote ).summernote( 'code' );\n            // Update the value.\n            // jQuery( summernote ).closest( '.nf-setting' ).find( '.note-editable' ).html( value );\n\n            if( 'undefined' != typeof target ) {\n                var $this = jQuery(target);\n            } else {\n                var $this = jQuery( this );\n            }\n\n            // TODO: Disable Browser Autocomplete\n            // $this.attr()\n\n\n            var dataID = jQuery( this ).data( 'id' );\n            if( dataID && 'eq' == dataID ) return;\n\n            // Store the current caret position.\n            if( 'rte' == type ){\n                var range = $this.summernote('createRange');\n                if( range ) {\n                    var caretPos = range.so; // or .eo?\n                } else {\n                    var caretPos = 0;\n                }\n                $this.closest( '.nf-setting' ).find( '.setting' ).summernote( 'saveRange' );\n            } else {\n                var caretPos = $this.caret();\n            }\n            nfRadio.channel( 'mergeTags' ).request( 'set:caret', caretPos );\n\n            // Find merge tags.\n            if( 'rte' == type ) {\n                var mergetags = $this.summernote( 'code' ).match(new RegExp(/{([a-zA-Z0-9]|:|_|-|})*/g));\n            } else {\n                var mergetags = $this.val().match(new RegExp(/{([a-zA-Z0-9]|:|_|-|})*/g));\n            }\n\n            // Filter out closed merge tags.\n            mergetags = _.filter(mergetags, function(mergetag) {\n                return -1 == mergetag.indexOf( '}' ); // Filter out \"closed\" merge tags.\n            });\n\n            // If an open merge tag is found, show the Merge Tag Box, else hide.\n            if( 0 !== mergetags.length ) {\n\n                nfRadio.channel( 'mergeTags' ).request( 'set:old', mergetags[0] );\n                \n                jQuery('#merge-tags-box').css( 'display', 'block' );\n                nfRadio.channel( 'drawer' ).request( 'prevent:close' );\n                $this.addClass('merge-tag-focus');\n\n                var boxHeight = jQuery( '#merge-tags-box' ).outerHeight();\n                jQuery( '#nf-drawer' ).css( 'padding-bottom', boxHeight + 'px' );\n\n                // Disable browser autocomplete.\n                var autocomplete = $this.attr( 'autocomplete' );\n                $this.attr( 'autocomplete', 'off' );\n                $this.data( 'autocomplete', autocomplete );\n\n                var $overlayElement = $this.closest( '.nf-setting, .nf-table-row' );\n                if( 0 != $overlayElement.find( '.note-editor' ).length ){\n                    $overlayElement.find('.note-editor' ).addClass('merge-tag-focus-overlay');\n                } else {\n                    $overlayElement.addClass('merge-tag-focus-overlay');\n                }\n\n                $overlayElement.off( 'click' );\n                $overlayElement.on( 'click', function( event ){\n                    var elementClasses = jQuery( event.target ).attr( 'class' ) || [];\n                    if( -1 !== elementClasses.indexOf( 'merge-tag-focus-overlay' ) ){\n                        nfRadio.channel( 'mergeTags' ).request( 'insert:tag', '' );\n                        jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                        nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                        jQuery( '#merge-tags-box' ).removeClass();\n                        jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                        jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n                    }\n                });\n\n                var value = mergetags[0].replace( '{', '' );\n            } else {\n                jQuery( '#merge-tags-box' ).css( 'display', 'none' );\n                nfRadio.channel( 'drawer' ).request( 'enable:close' );\n                jQuery( '#merge-tags-box' ).removeClass();\n                jQuery( '.merge-tag-focus' ).removeClass( 'merge-tag-focus' );\n                jQuery( '.merge-tag-focus-overlay' ).removeClass( 'merge-tag-focus-overlay' );\n            }\n        }\n\n    } );\n\n    return controller;\n} );\n\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're about to render a setting model that's a select and has 'fields' as the 'fill' setting, add all our field models to its options.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/itemSettingFill',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n\t\t},\n\n\t\tbeforeRenderSetting: function( settingModel, dataModel ) {\n\t\t\tif ( 'fields' == settingModel.get( 'fill' ) ) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Modify the user's browser history when they click on a domain\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/confirmPublish',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:confirmPublish', this.confirmPublish );\n\t\t},\n\n\t\tconfirmPublish: function() {\n\t\t\tvar formModel = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t\t\t// Check to see if we need to add a submit button.\n\t\t\tif ( 1 == formModel.get( 'settings' ).get( 'add_submit' ) ) {\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'add', { type: 'submit', label: 'Submit', order: 9999 } );\n\t\t\t}\n\t\t\tformModel.set( 'show_publish_options', false );\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db', 'publish' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles actions related to settings that utilise the Rich Text Editor\n *\n * @package Ninja Forms builder\n * @subpackage App - Settings Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/rte',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// We don't want the RTE setting to re-render when the value changes.\n\t\t\tnfRadio.channel( 'setting-type-rte' ).reply( 'renderOnChange', function(){ return false } );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'rte' ), 'init:settingModel', this.initSettingModel );\n\n\t\t\t// When an RTE setting is shown, re-render RTE.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'render:setting', this.renderSetting );\n\n\t\t\t// When an RTE setting view is destroyed, remove our RTE.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'destroy:setting', this.destroySetting );\n\n\t\t\t// When an element within the RTE is clicked, check to see if we should insert a link.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-rte' ), 'click:extra', this.clickExtra );\n\n\t\t\t// Instantiates the variable that holds the media library frame.\n\t\t\tthis.meta_image_frame;\n\n\t\t\tjQuery.summernote.options.icons = {\n\t\t        'align': 'dashicons dashicons-editor-alignleft',\n\t\t        'alignCenter': 'dashicons dashicons-editor-aligncenter',\n\t\t        'alignJustify': 'dashicons dashicons-editor-justify',\n\t\t        'alignLeft': 'dashicons dashicons-editor-alignleft',\n\t\t        'alignRight': 'dashicons dashicons-editor-alignright',\n\t\t        'indent': 'dashicons dashicons-editor-indent',\n\t\t        'outdent': 'dashicons dashicons-editor-outdent',\n\t\t        // 'arrowsAlt': 'dashicons fa-arrows-alt',\n\t\t        'bold': 'dashicons dashicons-editor-bold',\n\t\t        'caret': 'dashicons dashicons-arrow-down',\n\t\t        // 'circle': 'dashicons fa-circle',\n\t\t        'close': 'dashicons dashicons-dismiss',\n\t\t        'code': 'dashicons dashicons-editor-code',\n\t\t        'eraser': 'dashicons dashicons-editor-removeformatting',\n\t\t        // 'font': 'dashicons fa-font',\n\t\t        // 'frame': 'dashicons fa-frame',\n\t\t        'italic': 'dashicons dashicons-editor-italic',\n\t\t        'link': 'dashicons dashicons-admin-links',\n\t\t        'unlink': 'dashicons dashicons-editor-unlink',\n\t\t        'magic': 'dashicons dashicons-editor-paragraph',\n\t\t        // 'menuCheck': 'dashicons fa-check',\n\t\t        'minus': 'dashicons dashicons-minus',\n\t\t        'orderedlist': 'dashicons dashicons-editor-ol',\n\t\t        // 'pencil': 'dashicons fa-pencil',\n\t\t        // 'picture': 'dashicons fa-picture-o',\n\t\t        // 'question': 'dashicons fa-question',\n\t\t        'redo': 'dashicons dashicons-redo',\n\t\t        'square': 'dashicons fa-square',\n\t\t        // 'strikethrough': 'dashicons fa-strikethrough',\n\t\t        // 'subscript': 'dashicons fa-subscript',\n\t\t        // 'superscript': 'dashicons fa-superscript',\n\t\t        'table': 'dashicons dashicons-editor-table',\n\t\t        // 'textHeight': 'dashicons fa-text-height',\n\t\t        // 'trash': 'dashicons fa-trash',\n\t\t        'underline': 'dashicons dashicons-editor-underline',\n\t\t        'undo': 'dashicons dashicons-undo',\n\t\t        'unorderedlist': 'dashicons dashicons-editor-ul',\n\t\t        // 'video': 'dashicons fa-youtube-play'\n\t\t      }\n\n\t\t      this.currentContext = {};\n\t\t},\n\n\t\tinitSettingModel: function( settingModel ) {\n\t\t\tsettingModel.set( 'hide_merge_tags', true );\n\t\t},\n\n\t\tinitRTE: function( settingModel, dataModel, settingView ) {\n\t\t\t/*\n\t\t\t * Custom Button for links\n\t\t\t */\n\t\t\tvar that = this;\n\t\t\t// var linkButton = this.linkButton();\n\t\t\tvar linkButton = function( context ) {\n\t\t\t\treturn that.linkButton( context );\n\t\t\t}\n\t\t\tvar mediaButton = function( context ) {\n\t\t\t\treturn that.mediaButton( context );\n\t\t\t}\n\t\t\tvar mergeTags = this.mergeTags();\n\n\t\t\tvar toolbar = [\n\t\t\t\t[ 'paragraphStyle', ['style'] ],\n\t\t\t\t[ 'fontStyle', [ 'bold', 'italic', 'underline','clear' ] ],\n\t\t\t\t[ 'lists', [ 'ul', 'ol' ] ],\n\t\t\t    [ 'paragraph', [ 'paragraph' ] ],\n\t\t\t    [ 'customGroup', [ 'linkButton', 'unlink' ] ],\n\t\t\t    [ 'table', [ 'table' ] ],\n\t\t\t    [ 'actions', [ 'undo', 'redo' ] ],\n\t\t\t    [ 'tools', [ 'mediaButton', 'mergeTags', 'codeview' ] ]\n\t\t\t];\n\n\t\t\tjQuery( settingView.el ).find( 'div.setting' ).summernote( {\n\t\t\t\ttoolbar: toolbar,\n\t\t\t\tbuttons: {\n\t\t\t\t\tlinkButton: linkButton,\n\t\t\t\t\tmergeTags: mergeTags,\n\t\t\t\t\tmediaButton: mediaButton\n\t\t\t\t},\n\t\t\t\theight: 150,   //set editable area's height\n\t\t\t\tcodemirror: { // codemirror options\n\t\t\t\t    theme: 'monokai',\n\t\t\t\t    lineNumbers: true,\n                    lineWrapping: true,\n\t\t\t\t    callbacks: {\n\t\t\t\t    \tonBlur: function( editor ) {\n\t\t\t\t    \t\tvar value = editor.getValue();\n\t\t\t\t    \t\tthat.updateDataModel( settingModel, dataModel, value );\n\t\t\t\t    \t}\n\t\t\t\t    }\n\t\t\t\t},\n\t\t\t\tprettifyHtml: true,\n\t\t\t\tcallbacks: {\n\t\t\t\t\tonBlur: function( e, context ) {\n\t\t\t\t\t\tvar value = jQuery( this ).summernote( 'code' );\n\t\t\t\t\t\tthat.updateDataModel( settingModel, dataModel, value );\n                        nfRadio.channel( 'summernote' ).trigger( 'blur', settingModel, dataModel, value );\n\t\t\t\t\t},\n                    onFocus: function( e, context ) {\n                        nfRadio.channel( 'summernote' ).trigger( 'focus', e, this, context );\n                    },\n                    onKeydown: function( e, context ) {\n                        nfRadio.channel( 'summernote' ).trigger( 'keydown', e, this, context );\n                    },\n                    onKeyup: function( e, context ) {\n                        nfRadio.channel( 'summernote' ).trigger( 'keyup', e, this, context );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tupdateDataModel: function( settingModel, dataModel, value ) {\n\t\t\tvar name = settingModel.get( 'name' );\n\t\t\tvar before = dataModel.get( name );\n\t\t\tvar after = value;\n\n\t\t\tvar changes = {\n\t\t\t\tattr: name,\n\t\t\t\tbefore: before,\n\t\t\t\tafter: after\n\t\t\t}\n\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Changed ' + settingModel.get( 'label' ) + ' from ' + before + ' to ' + after\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', dataModel, changes, label );\n\n\t\t\tdataModel.set( settingModel.get( 'name' ), after );\n\t\t},\n\n\t\trenderSetting: function( settingModel, dataModel, settingView ) {\n\t\t\tthis.initRTE( settingModel, dataModel,settingView );\n\t\t\tvar linkMenu = jQuery( settingView.el ).find( '.link-button' ).next( '.dropdown-menu' ).find( 'button' );\n\t\t\tlinkMenu.replaceWith(function () {\n\t\t\t    return jQuery( '<div/>', {\n\t\t\t        class: jQuery( linkMenu ).attr( 'class' ),\n\t\t\t        html: this.innerHTML\n\t\t\t    } );\n\t\t\t} );\n\t\t},\n\n\t\tdestroySetting: function( settingModel, dataModel, settingView ) {\n\t\t\tthis.removeRTE( settingModel, dataModel, settingView );\n\t\t},\n\n\t\tremoveRTE: function( settingModel, dataModel, settingView ) {\n\t\t\tjQuery( settingView.el ).find( 'div.setting' ).summernote( 'destroy' );\n\t\t},\n\n\t\tdrawerOpened: function( settingModel, dataModel, settingView ) {\n\t\t\tthis.initRTE( settingModel, dataModel, settingView );\n\t\t},\n\n\t\tlinkButton: function( context ) {\n\t\t\tvar that = this;\n\t\t\tvar ui = jQuery.summernote.ui;\n\t\t\tvar linkButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-link-button' );\n\t\t\tvar linkDropdown = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-link-dropdown' );\n\t\t\treturn ui.buttonGroup([\n\t\t\t\tui.button({\n\t            className: 'dropdown-toggle link-button',\n\t            contents: linkButton({}),\n\t            tooltip: 'Insert Link',\n\t            click: function( e ) {\n\t            \tthat.clickLinkButton( e, context );\n\t            },\n\t            data: {\n\t              toggle: 'dropdown'\n\t            }\n\t          }),\n\t\t\t\tui.dropdown([\n\t            ui.buttonGroup({\n\t              children: [\n\t                ui.button({\n\t                  contents: linkDropdown({}),\n\t                  tooltip: ''\n\t                }),\n\t              ]\n\t            })\n\t          ])\n\t\t\t]).render();\n\t\t},\n\n\t\tmergeTags: function( context ) {\n\t\t\tvar ui = jQuery.summernote.ui;\n\t\t\tvar mergeTagsButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-merge-tags-button' );\n\t\t\treturn ui.button({\n\t\t\t\tclassName: 'dropdown-toggle merge-tags',\n\t\t\t\tcontents: mergeTagsButton({}),\n\t\t\t\ttooltip: 'Merge Tags'\n\t\t\t}).render();\n\t\t},\n\n\t\tmediaButton: function( context ) {\n\t\t\tvar that = this;\n\t\t\tvar ui = jQuery.summernote.ui;\n\t\t\tvar mediaButton = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-rte-media-button' );\n\t\t\treturn ui.button({\n\t            className: 'dropdown-toggle',\n\t            contents: mediaButton({}),\n\t            tooltip: 'Insert Media',\n\t            click: function( e ) {\n\t            \tthat.openMediaManager( e, context );\n\t            }\n\t          }).render();\n\t\t},\n\n\t\topenMediaManager: function( e, context ) {\n\t\t\tcontext.invoke( 'editor.createRange' );\n\t\t\tcontext.invoke( 'editor.saveRange' );\n\t\t\tthis.currentContext = context;\n\t\t\t\n\t\t\t// If the frame already exists, re-open it.\n\t\t\tif ( this.meta_image_frame ) {\n\t\t\t\tthis.meta_image_frame.open();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Sets up the media library frame\n\t\t\tthis.meta_image_frame = wp.media.frames.meta_image_frame = wp.media({\n\t\t\t\ttitle: 'Select a file',\n\t\t\t\tbutton: { text:  'insert' }\n\t\t\t});\n\n\t\t\tvar that = this;\n\n\t\t\t// Runs when an image is selected.\n\t\t\tthis.meta_image_frame.on('select', function(){\n\n\t\t\t\t// Grabs the attachment selection and creates a JSON representation of the model.\n\t\t\t\tvar media_attachment = that.meta_image_frame.state().get('selection').first().toJSON();\n\t\t\t\tthat.insertMedia( media_attachment, context );\n\t\t\t});\n\n\t\t\t// Opens the media library frame.\n\t\t\tthis.meta_image_frame.open();\n\t\t},\n\n\t\tclickLinkButton: function ( e, context ) {\n\t\t\tvar range = context.invoke( 'editor.createRange' );\n\t\t\tcontext.invoke( 'editor.saveRange' );\n\t\t\tvar text = range.toString()\n\t\t\tthis.currentContext = context;\n\n\t\t\tjQuery( e.target ).closest( '.note-customGroup > .note-btn-group' ).on ('hide.bs.dropdown', function ( e ) {\n\t\t\t\treturn false;\n\t\t\t});\n\n\t\t\tjQuery( e.target ).closest( '.note-customGroup > .note-btn-group' ).on ('shown.bs.dropdown', function ( e ) {\n\t\t\t\tjQuery( e.target ).parent().parent().find( '.link-text' ).val( text );\n\t\t\t\tjQuery( e.target ).parent().parent().find( '.link-url' ).focus();\n\t\t\t});\n\t\t},\n\n\t\tclickExtra: function( e, settingModel, dataModel, settingView ) {\n\t\t\tvar textEl = jQuery( e.target ).parent().find( '.link-text' );\n\t\t\tvar urlEl = jQuery( e.target ).parent().find( '.link-url' );\n\t\t\tvar isNewWindowEl = jQuery( e.target ).parent().find( '.link-new-window' );\n\t\t\tthis.currentContext.invoke( 'editor.restoreRange' );\n\t\t\tif ( jQuery( e.target ).hasClass( 'insert-link' ) ) {\n\t\t\t\tvar text = textEl.val();\n\t\t\t\tvar url = urlEl.val();\n\t\t\t\tvar isNewWindow = ( isNewWindowEl.prop( 'checked' ) ) ? true: false;\n\t\t\t\tif ( 0 != text.length && 0 != url.length ) {\n\t\t\t\t\tthis.currentContext.invoke( 'editor.createLink', { text:text, url: url, isNewWindow: isNewWindow } );\n\t\t\t\t}\n\t\t\t}\n\t\t\ttextEl.val( '' );\n\t\t\turlEl.val( '' );\n\t\t\tisNewWindowEl.prop( 'checked', false );\n\t\t\tjQuery( e.target ).closest( 'div.note-btn-group.open' ).removeClass( 'open' );\n\t\t},\n\n\t\tinsertMedia: function( media, context ) {\n\t\t\tthis.currentContext.invoke( 'editor.restoreRange' );\n\t\t\tif ( 'image' == media.type ) {\n\t\t\t\tthis.currentContext.invoke( 'editor.insertImage', media.url );\n\t\t\t} else {\n\t\t\t\tthis.currentContext.invoke( 'editor.createLink', {\n\t\t\t\t\ttext: media.title || media.filename,\n\t\t\t\t\turl: media.url\n\t\t\t\t} );\n\t\t\t}\n\n\t\t}\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/settingFieldSelect',[], function() {\n    var controller = Marionette.Object.extend( {\n\n        initialize: function() {\n\n            // Bind field key listener to field-select setting type.\n            this.listenTo( nfRadio.channel( 'field-select' ), 'init:settingModel', this.trackKeyChanges );\n\n            // The first time settingModel and the dataModel meet.\n            this.listenTo( nfRadio.channel( 'setting-type-field-select' ), 'before:renderSetting', this.beforeRender );\n\n            // Add setting change listener only in drawers with a field-select setting.\n            this.listenTo( nfRadio.channel( 'field-select' ), 'init:settingModel', function() {\n                this.listenTo( nfRadio.channel( 'app' ), 'change:setting', this.maybeSwitchToFieldsDomain );\n            });\n\n            this.listenTo( nfRadio.channel( 'app' ), 'change:currentDomain', this.autoOpenDrawer );\n\n            this.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.filterDrawerContents );\n            this.listenTo( nfRadio.channel( 'drawer' ), 'closed', this.SwitchToFieldsDomain );\n        },\n\n        trackKeyChanges: function( settingModel ) {\n            settingModel.listenTo( nfRadio.channel( 'app' ), 'update:fieldKey', settingModel.updateKey );\n\n            // Update selected field if the selected field's key changes.\n            this.listenTo( nfRadio.channel( 'app' ), 'replace:fieldKey', this.updateFieldMap );\n        },\n\n        updateFieldMap: function( dataModel, keyModel, settingModel ) {\n\n            var oldKey = keyModel._previousAttributes[ 'key' ];\n            var newKey = keyModel.get( 'key' );\n\n            if( 'field-select' == settingModel.get( 'type' ) && dataModel.get( settingModel.get( 'name' ) ) == oldKey ) {\n\n                dataModel.set( settingModel.get( 'name' ), newKey );\n            }\n        },\n\n        beforeRender: function( settingModel, dataModel ) {\n\n            var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\n            var fieldTypes = settingModel.get( 'field_types' );\n\n            var options = [\n                {\n                    label: '--',\n                    value: 0\n                }\n            ];\n            _.each( fieldCollection.models, function( field ){\n\n                if( dataModel.cid == field.cid ) return;\n\n                if( 'undefined' != typeof fieldTypes && 0 != fieldTypes.length && ! _.contains( fieldTypes, field.get( 'type' ) ) ) return;\n\n                var fieldFilter = settingModel.get( 'field_filter' );\n                if( fieldFilter && 'undefined' != typeof fieldFilter[ field.get( 'type' ) ] ) {\n                    var bail = false;\n                    _.each( fieldFilter[ field.get( 'type' ) ], function( value, setting ){\n                        console.log( value + \":\" + field.get( setting )  );\n                        if( value != field.get( setting ) ) bail = true;\n                    } );\n                    if( bail ) return;\n                }\n\n                var value = field.get( 'key' );\n                switch ( settingModel.get( 'field_value_format' ) ) {\n                    case 'key':\n                        value = field.get( 'key' );\n                        break;\n                    case 'merge_tag':\n                    default:\n                        value = '{field:' + field.get( 'key' ) + '}';\n                }\n\n                options.push({\n                    label: field.get( 'label' ),\n                    value: value\n                });\n            });\n\n            if( 'undefined' != typeof fieldTypes && 0 != fieldTypes.length ) {\n                _.each( fieldTypes, function( fieldType ){\n\n                    var fieldTypeModel = nfRadio.channel( 'fields' ).request( 'get:type', fieldType );\n\n                    options.push({\n                        label: '-- Add ' + fieldTypeModel.get( 'nicename' ) + ' Field',\n                        value: 'addField:' + fieldType,\n                    });\n                } );\n            }\n\n            settingModel.set( 'options', options );\n        },\n\n        maybeSwitchToFieldsDomain: function( e, model, dataModel ) {\n\n            if( 'field-select' != model.get( 'type' ) ) return;\n\n            var name = model.get( 'name' );\n            var value = dataModel.get( name );\n\n            if( ! value ) return;\n\n            var rubble = value.split( ':' );\n\n            if( 'addField' != rubble[0] ) return;\n\n            this.openDrawer = 'addField';\n            this.filterDrawer = rubble[1];\n\n            dataModel.set( name, '' );\n\n            this.switchDomain = true;\n            nfRadio.channel( 'app' ).request( 'close:drawer' );\n        },\n\n        SwitchToFieldsDomain: function() {\n            if( this.switchDomain ) {\n                var fieldDomainModel = nfRadio.channel( 'app' ).request( 'get:domainModel', 'fields' );\n                nfRadio.channel('app').request('change:currentDomain', null, fieldDomainModel);\n                this.switchDomain = null;\n            }\n        },\n\n        autoOpenDrawer: function() {\n            if( this.openDrawer ) {\n                nfRadio.channel( 'app' ).request( 'open:drawer', this.openDrawer );\n                this.openDrawer = null;\n            }\n        },\n\n        filterDrawerContents: function() {\n            if( this.filterDrawer ) {\n                nfRadio.channel('drawer-addField').trigger('change:filter', this.filterDrawer);\n                this.filterDrawer = null;\n            }\n        }\n    });\n\n    return controller;\n} );\n","/**\n * The Field List setting is a container of settings (like the Fieldset setting), in which its children are instantiated.\n * Unlike the Fieldset setting, Field List settings are dynamically created based on the list of form fields.\n *\n * Note: Field references in the dynamic setting names are based on field keys, which may change.\n * Unlike regular field key tracking, a new setting needs to be created with the same value as the previous.\n *\n * @package Ninja Forms builder\n * @subpackage Action Settings\n * @copyright (c) 2016 WP Ninjas\n * @author Kyle B. Johnson\n * @since 3.0\n */\ndefine( 'controllers/app/settingFieldList',['views/app/drawer/typeSettingFieldset','models/app/settingCollection'], function( fieldsetView, settingCollection ) {\n    return Marionette.Object.extend( {\n\n        /**\n         * A reference list of Field List setting models.\n         */\n        fieldListSettings: [],\n\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'field-list' ),       'init:settingModel',    this.registerFieldListSettings  );\n            this.listenTo( nfRadio.channel( 'fields' ),           'update:setting',       this.updateFieldListSettingKeys );\n                           nfRadio.channel( 'field-list' ).reply( 'get:settingChildView', this.getSettingChildView, this  );\n        },\n\n        /**\n         * Build a reference list of Field List setting models for later reference.\n         *\n         * @param settingModel\n         */\n        registerFieldListSettings: function( settingModel ){\n            this.fieldListSettings.push( settingModel.get( 'name' ) );\n        },\n\n        /**\n         * Field List settings contain field keys in the setting names.\n         * When a field key changes, so too must the Field List setting name.\n         *\n         * @param fieldModel\n         */\n        updateFieldListSettingKeys: function( fieldModel ){\n\n            // We are only interested in field key changes.\n            if( 'undefined' == typeof fieldModel.changed.key ) return;\n\n            var oldKey = fieldModel._previousAttributes.key;\n            var newKey = fieldModel.changed.key;\n\n            /*\n             * This is an absolute (functional) mess of nesting. I apologize to my future self, or Kenny.\n             *\n             * Each setting of each action model must be checked against each registered Field List setting.\n             */\n            var that = this;\n            _.each( Backbone.Radio.channel( 'actions' ).request( 'get:collection' ).models, function( actionModel ) {\n                _.each( actionModel.attributes, function( value, setting ) {\n                    var lastChanged = ''; // Used to avoid resetting the change with a duplicate call.\n                    _.each( that.fieldListSettings, function( prefix ) {\n                        if( setting != prefix + '-' + oldKey || lastChanged == oldKey ) return;\n                        var oldValue = actionModel.get( prefix + '-' + oldKey );\n                        actionModel.set( prefix + '-' + newKey, oldValue );\n                        actionModel.set( prefix + '-' + oldKey, 0 );\n                        lastChanged = oldKey;\n                    });\n                });\n            });\n        },\n\n        /**\n         * Set the view for Field List sub-settings, just like the Fieldset setting.\n         *\n         * @param settingModel\n         * @returns {*}\n         */\n        getSettingChildView: function( settingModel ) {\n\n            /**\n             * Dynamically build field-list settings as needed for the view.\n             */\n\n            // Filter fields based on the field_types setting property.\n            var fields = _.filter( nfRadio.channel( 'fields' ).request( 'get:collection' ).models, function( field ) {\n                return _.contains( settingModel.get( 'field_types' ), field.get( 'type' ) );\n            });\n\n            // Map fields into setting definitions.\n            var settings = _.map( fields, function( field ) {\n                return {\n                    name: settingModel.get( 'name' ) + '-' + field.get( 'key' ),\n                    type: 'toggle',\n                    label: field.get( 'label' ),\n                    width: 'full'\n                };\n            });\n\n            settingModel.set( 'settings', new settingCollection( settings ) );\n\n            // return the child view.\n            return fieldsetView;\n        },\n\n    });\n} );\n\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n *\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/settingHTML',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n\n            // The first time settingModel and the dataModel meet.\n            this.listenTo( nfRadio.channel( 'setting-type-html' ), 'before:renderSetting', this.init );\n        },\n\n        init: function( settingModel, dataModel ) {\n\n            if( 'undefined' == settingModel.get( 'mirror' ) ) return;\n\n            // Listen to a setting change inside of the dataModel.\n            dataModel.on( 'change:' + settingModel.get( 'mirror' ), this.update, settingModel );\n        },\n\n        update: function( dataModel, changedSettingValue ) {\n\n            // Mirror the default value setting value.\n            dataModel.set( this.get( 'name' ), changedSettingValue );\n        }\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/settingColor',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            // We don't want to re-render this setting type when the data changes.\n            nfRadio.channel( 'setting-type-color' ).reply( 'renderOnChange', this.setRenderFalse );\n            // We want to close any color pickers before we close our styling tab or drawer.\n            this.listenTo( nfRadio.channel( 'setting-type-color' ), 'destroy:setting', this.closeColorPickers );\n\n            // The first time settingModel and the dataModel meet.\n            this.listenTo( nfRadio.channel( 'setting-type-color' ), 'render:setting', this.initColorPicker );\n        },\n\n        initColorPicker: function( settingModel, dataModel, view ) {\n\n            var name = settingModel.get( 'name' );\n            var el = jQuery( view.el ).find( 'input' );\n\n            jQuery( el ).wpColorPicker( {\n                change: function( event, ui ){\n                    nfRadio.channel( 'app' ).request( 'change:setting', event, settingModel, dataModel, ui.color.toString() );\n                }\n            } );\n        },\n\n        setRenderFalse: function() {\n            return false;\n        },\n\n        closeColorPickers: function( settingModel, dataModel, view ) {\n            jQuery( view.el ).find( '.wp-color-picker' ).wpColorPicker( 'close' );\n        }\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel for the app to start.\n *\n * If the form is a new form, then highlight the Add New submenu item.\n * Otherwise, append an Edit Form submenu for context.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/changeMenu',[], function() {\n    var controller = Marionette.Object.extend({\n\n        editFormText: '',\n\n        initialize: function () {\n            this.editFormText = nfAdmin.editFormText || 'Edit Form';\n            this.listenTo(nfRadio.channel('app'), 'after:appStart', this.changeMenu);\n            this.listenTo( nfRadio.channel( 'app' ), 'response:updateDB', this.formPublish );\n        },\n\n        changeMenu: function () {\n            var form = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\n            if ( this.isNewForm( form.id ) ) {\n                this.highlightAddNew();\n            } else {\n                this.appendEditForm();\n            }\n        },\n\n        isNewForm: function( form_id ) {\n            return isNaN( form_id );\n        },\n\n        highlightAddNew: function() {\n            jQuery( '.wp-submenu li' ).removeClass( 'current' );\n            jQuery( 'a[href=\"admin.php?page=ninja-forms&form_id=new\"]' ).parent().addClass( 'current' );\n        },\n\n        /**\n         * Append 'Edit Form'\n         * When editing a form, add an 'Edit Form' submenu item to\n         *   the WordPress Admin Dashboard menu, specifically under\n         *   the Ninja Forms Menu Item and after the 'Add New' item.\n         */\n        appendEditForm: function() {\n            // Singleton check. Only add this menu item one time.\n            if ( jQuery( 'li a:contains(\"' + this.editFormText + '\")' ).length > 0 ) return;\n\n            var editFormLinkText, editFormLink, editFormListItem;\n\n            // Create the 'Edit Form' submenu item.\n            editFormLinkText = document.createTextNode(this.editFormText);\n            editFormLink = document.createElement(\"a\");\n            editFormLink.appendChild(editFormLinkText);\n\n            editFormListItem = document.createElement(\"li\");\n            editFormListItem.appendChild(editFormLink);\n            editFormListItem.classList.add(\"current\");\n\n            // Remove the `current` class from any existing list items.\n            jQuery( '.wp-submenu li' ).removeClass( 'current' );\n\n            // Insert the 'Edit Form' item after the 'Add New' item;\n            jQuery( 'a[href=\"admin.php?page=ninja-forms#new-form\"]' ).parent().after( editFormListItem );\n        },\n\n        formPublish: function( response ) {\n            if ( 'publish' !== response.action ) return false;\n            this.changeMenu();\n        }\n    });\n\n    return controller;\n});\n\n","/**\n * When we click on a domain link, close the mobile menu.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/mobile',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for clicks on our app menu.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'click:menu', this.closeMobileMenu );\n\t\t},\n\n\t\tcloseMobileMenu: function() {\n\t\t\tvar builderEl = nfRadio.channel( 'app' ).request( 'get:builderEl' );\n\t\t\tjQuery( builderEl ).removeClass( 'nf-menu-expand' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Add a jBox notice to the screen.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/notices',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'notices' ).reply( 'add', this.addNotice, this );\n\t\t\tnfRadio.channel( 'notices' ).reply( 'close', this.closeNotice, this );\n\t\t\tthis.notices = {};\n\t\t},\n\n\t\taddNotice: function( key, msg, options ) {\n\n\t\t\tvar appDefaults = {\n\t\t\t\tcontent: msg,\n\t\t\t\tcolor: 'green',\n\t\t\t\tzIndex:10000000,\n\t\t\t\tconstructOnInit: true,\n\t\t\t\tstack: true,\n\t\t\t\tanimation: {\n\t\t\t\t\topen: 'flip',\n\t\t\t\t\tclose: 'flip'\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar mobileDefaults = {\n\t\t\t\tposition: {\n\t\t\t\t\tx: 'center',\n\t\t\t\t\ty: 'top'\n\t\t\t\t},\n\t\t\t\tanimation: {\n\t\t\t\t\topen:'slide:top',\n\t\t\t\t\tclose:'slide:left'\n\t\t\t\t},\n\t\t\t\tautoClose: 2000,\n\t\t\t\toffset: {\n\t\t\t\t\tx: 0,\n\t\t\t\t\ty: 55\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tvar desktopDefaults = {\n\t\t\t\tattributes: {\n\t\t\t\t\tx: 'left',\n\t\t\t\t\ty: 'bottom'\n\t\t\t\t},\n\t\t\t\tautoClose: 4000\n\t\t\t};\n\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tvar defaults = mobileDefaults;\t\n\t\t\t} else {\n\t\t\t\tvar defaults = desktopDefaults;\n\t\t\t}\n\t\t\tdefaults = jQuery.extend( defaults, appDefaults );\n\n\t\t\tvar options = jQuery.extend( defaults, options );\n\t\t\t// console.log( options );\n\t\t\tthis.notices[ key ] = new jBox( 'Notice', options );\n\t\t},\n\n\t\tcloseNotice: function( key ) {\n\t\t\tif ( 'undefined' != typeof this.notices[ key ] ) {\n\t\t\t\tthis.notices[ key ].close();\n\t\t\t}\n\t\t},\n\n\t\topenNotice: function( key ) {\n\t\t\tif ( 'undefined' != typeof this.notices[ key ] ) {\n\t\t\t\tthis.notices[ key ].open();\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Prompt the user to save if they attempt to leave the page with unsaved changes.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/unloadCheck',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tjQuery( window ).bind( 'beforeunload', this.maybePrompt );\n\t\t},\n\n\t\tmaybePrompt: function( model ) {\n\t\t\t// If our app is clean, don't show a warning.\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'get:setting', 'clean' ) ) {\n\t\t\t\treturn 'You have unsaved changes.';\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Before we save data to the database (on preview update or publish), we check to see if we have anyone\n * that wants to update the 'formContent' form setting. This setting is used on the front-end to allow\n * for custom display of form fields. i.e. layout rows.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/formContentFilters',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Init our formContent view filter array.\n\t\t\t */\n\t\t\tthis.viewFilters = [];\n\t\t\tthis.saveFilters = [];\n\t\t\tthis.loadFilters = [];\n\n\t\t\t/*\n\t\t     * Listen for requests to add formContent filters.\n\t\t\t */\n\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:viewFilter', this.addViewFilter, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:saveFilter', this.addSaveFilter, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'add:loadFilter', this.addLoadFilter, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests to get our formContent filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:viewFilters', this.getViewFilters, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:saveFilters', this.getSaveFilters, this );\n\t\t\tnfRadio.channel( 'formContent' ).reply( 'get:loadFilters', this.getLoadFilters, this );\n\t\t\t\n\t\t\t/*\n\t\t\t * -- DEPRECATED RADIO REPLIES --\n\t\t\t * \n\t\t\t * The 'fieldContents' channel has been deprecated as of 3.0 (it was present in the RC) in favour of 'formContent'.\n\t\t\t * Listen for requests to add new fieldContent filters.\n\t\t\t * \n\t\t\t * TODO: These radio listeners on the 'fieldContents' channels are here for backwards compatibility and should be removed eventually.\n\t\t\t */\n\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:viewFilter', this.addViewFilter, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:saveFilter', this.addSaveFilter, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'add:loadFilter', this.addLoadFilter, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests to get our fieldContent filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:viewFilters', this.getViewFilters, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:saveFilters', this.getSaveFilters, this );\n\t\t\tnfRadio.channel( 'fieldContents' ).reply( 'get:loadFilters', this.getLoadFilters, this );\n\t\t\n\t\t\t/*\n\t\t\t * -- END DEPRECATED --\n\t\t\t */\n\t\t},\n\n\t\taddViewFilter: function( callback, priority ) {\n\t\t\tthis.viewFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetViewFilters: function() {\n\t\t\treturn this.viewFilters;\n\t\t},\n\n\t\taddSaveFilter: function( callback, priority ) {\n\t\t\tthis.saveFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetSaveFilters: function() {\n\t\t\treturn this.saveFilters;\n\t\t},\n\n\t\taddLoadFilter: function( callback, priority ) {\n\t\t\tthis.loadFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetLoadFilters: function() {\n\t\t\treturn this.loadFilters;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles filters for our main content gutter views.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/formContentGutterFilters',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Init our gutter view filter array.\n\t\t\t */\n\t\t\tthis.leftFilters = [];\n\t\t\tthis.rightFilters = [];\n\t\t\t/*\n\t\t     * Listen for requests to add gutter filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'add:leftFilter', this.addLeftFilter, this );\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'add:rightFilter', this.addRightFilter, this );\n\n\t\t\t/*\n\t\t\t * Listen for requests to get our content gutter filters.\n\t\t\t */\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'get:leftFilters', this.getLeftFilters, this );\n\t\t\tnfRadio.channel( 'formContentGutters' ).reply( 'get:rightFilters', this.getRightFilters, this );\n\t\t},\n\n\t\taddLeftFilter: function( callback, priority ) {\n\t\t\tthis.leftFilters[ priority ] = callback;\n\t\t},\n\n\t\taddRightFilter: function( callback, priority ) {\n\t\t\tthis.rightFilters[ priority ] = callback;\n\t\t},\n\n\t\tgetLeftFilters: function() {\n\t\t\treturn this.leftFilters;\n\t\t},\n\n\t\tgetRightFilters: function() {\n\t\t\treturn this.rightFilters;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Returns a clone of a backbone collection with all the models' attributes looped through so that collections contained within are propely cloned.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/cloneCollectionDeep',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tnfRadio.channel( 'app' ).reply( 'clone:collectionDeep', this.cloneCollectionDeep, this );\n\t\t},\n\n\t\tcloneCollectionDeep: function( collection ) {\n\t\t\tvar models = [];\n\t\t\t// Loop through every model in our collection, clone it, and add it to our model array\n\t\t\t_.each( collection.models, function( model ) {\n\t\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\n\t\t\t\tmodels.push( newModel );\n\t\t\t} );\n\t\t\t// Create a new instance of our collection\n\t\t\treturn new collection.constructor( models, collection.options );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Tracks which keys have been pressed.\n * Currently only used by fields to see if they should duplicate or delete on click.\n * (Shift + D + click = delete) (Shift + C + click = duplicate)\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/trackKeyDown',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tkeys: [],\n\n\t\tinitialize: function() {\n\t\t\tvar that = this;\n\t\t\t/*\n\t\t\t * Track keydowns and store the keys pressed.\n\t\t\t */\n\t\t\t\n\t\t\tjQuery( document ).on( 'keydown', function( e ) {\n\t\t\t\tthat.keyDown( e, that );\n\t\t\t} );\n\n\t\t\tjQuery( document ).on( 'keyup', function( e ) {\n\t\t\t\tthat.keyUp( e, that );\n\t\t\t} );\n\n\t\t\t/*\n\t\t\t * Get the keys currently being pressed, if any\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:keydown', this.getKeyDown, this );\n\t\t},\n\n\t\tkeyDown: function( e, context ) {\n\t\t\t/*\n\t\t\t * Add our keycode to our keys array.\n\t\t\t */\n\t\t\tcontext.keys[ e.keyCode ] = e.keyCode;\n\t\t},\n\n\t\tkeyUp: function( e, context ) {\n\t\t\t/*\n\t\t\t * Remove our keycode from our keys array.\n\t\t\t */\n\t\t\tif ( -1 != context.keys.indexOf( e.keyCode ) ) {\n\t\t\t\tdelete context.keys[ e.keyCode ];\n\t\t\t}\n\t\t},\n\n\t\tgetKeyDown: function() {\n\t\t\treturn this.keys;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Initialize the perfectscroll jQuery plugin\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/perfectScroll',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tmovedPos: false,\n\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * When we init the main view, init our perfectscroll\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'main' ), 'show:main', this.initPerfectScroll );\n\n\t\t\t/*\n\t\t\t * When our drawer opens and closes, change the position of our scroll rail.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'opened', this.moveRail );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'before:closeDrawer', this.resetRail );\n\t\t},\n\n\t\tinitPerfectScroll: function( view ) {\n\t\t\tif ( ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( view.el ).parent().perfectScrollbar( {\n\t\t\t\t\tsuppressScrollX: true\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tjQuery( 'head' ).append( '<style id=\"ps-scrollbar-css\" type=\"text/css\"></style>' );\n\t\t},\n\n\t\tmoveRail: function() {\n\t\t\tvar drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tvar movedPos = jQuery( drawerEl ).outerWidth();\n\n\t\t\tjQuery( '#ps-scrollbar-css' ).text( '.ps-scrollbar-moved { right: ' + movedPos + 'px !important; } ' );\n\t\t\tjQuery( '#nf-main .ps-scrollbar-y-rail' ).addClass( 'ps-scrollbar-moved ' );\n\t\t\t\n\t\t},\n\n\t\tresetRail: function() {\n\t\t\tjQuery( '.ps-scrollbar-y-rail' ).removeClass( 'ps-scrollbar-moved ' );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Returns a new setting group collection.\n * Used to settings drawers for custom data models (i.e. not fields, actions, or advanced)\n * \n * @package Ninja Forms builder\n * @subpackage App - Edit Settings Drawer\n * @copyright (c) 2016 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/getNewSettingGroupCollection',[ 'models/app/settingGroupCollection' ], function( SettingGroupCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests for a new setting group collection\n\t\t\tnfRadio.channel( 'app' ).reply( 'get:settingGroupCollectionDefinition', this.getNewSettingGroupCollection, this );\n\t\t},\n\n\t\t/**\n\t\t * Return a new instance of the setting group collection.\n\t\t *\n\t\t * @since  3.0\n\t\t * @return backbone.collection\n\t\t */\n\t\tgetNewSettingGroupCollection: function() {\n\t\t\treturn SettingGroupCollection;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.0.30\n */\ndefine( 'controllers/app/settingMedia',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            // When the media button is clicked, open the media manager.\n            this.listenTo( nfRadio.channel( 'setting-type-media' ), 'click:extra', this.clickExtra );\n        },\n\n        clickExtra: function( e, settingModel, dataModel, settingView ) {\n            var textEl = jQuery( e.target ).parent().find( '.setting' );\n\n            if ( jQuery( e.target ).hasClass( 'open-media-manager' ) ) {\n                // If the frame already exists, re-open it.\n                if ( this.meta_image_frame ) {\n                    this.meta_image_frame.open();\n                    return;\n                }\n\n                // Sets up the media library frame\n                this.meta_image_frame = wp.media.frames.meta_image_frame = wp.media({\n                    title: 'Select a file',\n                    button: { text:  'insert' }\n                });\n\n                var that = this;\n\n                // Runs when an image is selected.\n                this.meta_image_frame.on('select', function(){\n                    // Grabs the attachment selection and creates a JSON representation of the model.\n                    var media_attachment = that.meta_image_frame.state().get('selection').first().toJSON();\n                    textEl.val( media_attachment.url ).change();\n                });\n\n                // Opens the media library frame.\n                this.meta_image_frame.open();\n            }\n        },\n    });\n\n    return controller;\n} );\n","/**\n * Handles changing our public link when we request a new one or when it's set improperly.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2019 WP Ninjas\n * @since UPDATE_VERSION_ON_MERGE\n */\ndefine( 'controllers/app/publicLink',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'after:appStart', this.validatePublicLink, this );\n            nfRadio.channel( 'app' ).reply( 'generate:publicLinkKey', this.newPublicLinkKey, this );\n        },\n        \n        newPublicLinkKey: function() {\n            var formSettingsDataModel = nfRadio.channel( 'settings' ).request( 'get:settings' );\n            var public_link_key = nfRadio.channel('app').request('get:formModel').get('id');\n            for (var i = 0; i < 4; i++) {\n                var char = Math.random().toString(36).slice(-1);\n                public_link_key += char;\n            };\n            // Apply the public link key to form settings\n            formSettingsDataModel.set('public_link_key', public_link_key);\n            return public_link_key;\n        },\n\n        validatePublicLink: function() {\n            var formID = nfRadio.channel('app').request('get:formModel').get('id');\n            var formSettingsDataModel = nfRadio.channel( 'settings' ).request( 'get:settings' );\n            if ( 'undefined' === typeof formSettingsDataModel.get('public_link_key') ) return false;\n            if ( 0 === formSettingsDataModel.get( 'public_link_key' ).indexOf( formID ) ) return false;\n            var public_link_key = this.newPublicLinkKey();\n            var publicLink = nfAdmin.publicLinkStructure.replace('[FORM_ID]', public_link_key);\n            formSettingsDataModel.set('public_link', publicLink);\n        }\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model that represents our field type section on the add new field drawer.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/typeSectionModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tclasses: ''\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our field models.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/fields/typeSectionCollection',['models/fields/typeSectionModel'], function( typeSectionModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: typeSectionModel\n\t} );\n\treturn collection;\n} );\n","/**\n * Creates and stores a collection of field types. This includes all of the settings shown when editing a field.\n *\n * 1) Create our settings sections config\n * 2) Loops over our preloaded data and adds that to our field type collection\n *\n * Also responds to requests for data about field types\n *\n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/types',[\n\t\t'models/app/typeCollection',\n\t\t'models/fields/typeSectionCollection'\n\t],\n\tfunction(\n\t\tTypeCollection,\n\t\tSectionCollection\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Config for our settings sections\n\t\t\tthis.sections = new SectionCollection( fieldTypeSections );\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'init:typeModel', this.registerSection );\n\n\t\t\t// Create our field type collection\n\t\t\tthis.collection = new TypeCollection( fieldTypeData, { type: 'fields' } );\n\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:type', this.getFieldType, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeCollection', this.getTypeCollection, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:typeSections', this.getTypeSections, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:savedFields', this.getSavedFields, this );\n\n\t\t\t// Listen to clicks on field types\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:fieldType', this.addField );\n\t\t},\n\n\t\tregisterSection: function( typeModel ) {\n\t\t\tif ( 'fields' != typeModel.collection.type || ! typeModel.get( 'section' ) ) return;\n\n\t\t\tthis.sections.get( typeModel.get( 'section' ) ).get( 'fieldTypes' ).push( typeModel.get( 'id' ) );\n\t\t},\n\n\t\t/**\n\t\t * Return a field type by id\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string \t\t\tid \tfield type\n\t\t * @return backbone.model    \tfield type model\n\t\t */\n\t\tgetFieldType: function( id ) {\n        \treturn this.collection.get( id );\n        },\n\n        /**\n         * Return the entire field type collection\n         *\n         * @since  3.0\n         * @param  string \t\t\t\tid \t[description]\n         * @return backbone.collection    \tfield type collection\n         */\n\t\tgetTypeCollection: function( id ) {\n        \treturn this.collection;\n        },\n\n        /**\n         * Add a field type to our fields sortable when the field type button is clicked.\n         *\n         * @since 3.0\n         * @param Object e event\n         * @return void\n         */\n        addField: function( e ) {\n\t\t\tvar type = jQuery( e.target ).data( 'id' );\n\n\t\t\tif( e.shiftKey ){\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'add:stagedField', type );\n\t\t\t\treturn;\n\t\t\t}\n\n        \tvar fieldModel = nfRadio.channel( 'fields' ).request( 'add', {\n\t\t\t\ttype: type,\n\n\t\t\t\tlabel: nfRadio.channel( 'fields' ).request( 'get:type', type ).get( 'nicename' )\n\t\t\t});\n\n\t\t\tconsole.log( fieldModel );\n\n\t\t\tvar label = {\n\t\t\t\tobject: 'Field',\n\t\t\t\tlabel: fieldModel.get( 'label' ),\n\t\t\t\tchange: 'Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: nfRadio.channel( 'fields' ).request( 'get:collection' )\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', fieldModel, null, label, data );\n\n\t\t\t// Re-Draw the Field Collection\n\t\t\tnfRadio.channel( 'fields' ).request( 'redraw:collection' );\n        },\n\n        /**\n         * Return our field type settings sections\n         *\n         * @since  3.0\n         * @return backbone.collection field type settings sections\n         */\n        getTypeSections: function() {\n            return this.sections;\n        },\n\n        /**\n         * Return our saved fields\n         *\n         * @since  3.0\n         * @return backbone.collection\n         */\n        getSavedFields: function() {\n        \tthis.sections.get( 'saved' );\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Handles the logic for our field type draggables.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldTypeDrag',[], function( ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our field type draggables and run the appropriate function.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.startDrag );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.stopDrag );\n\t\t\t/*\n\t\t\t * Respond to requests for our helper clone.\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'drawer-addField' ).reply( 'get:typeHelperClone', this.getCurrentDraggableHelperClone, this );\n\t\t},\n\n\t\t/**\n\t\t * When we start dragging:\n\t\t * get our drawer element\n\t\t * set its overflow property to visible !important -> forces the type drag element to be on at the top of the z-index.\n\t\t * get our main element\n\t\t * est its overflow propery to visible !important -> forces the type drag element to be on top of the z-index.\n\t\t * set our dragging helper clone\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\n\t\t * @return void\n\t\t */\n\t\tstartDrag: function( context, ui ) {\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\n\t\t\tthis.draggableHelperClone = jQuery( ui.helper ).clone();\n\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging, reset our overflow property to hidden !important.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\n\t\t * @return {[type]}         [description]\n\t\t */\n\t\tstopDrag: function( context, ui ) {\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t},\n\n\t\tgetCurrentDraggableHelperClone: function() {\n\t\t\treturn this.draggableHelperClone;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles the dragging of our field staging area\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/stagingDrag',[], function( ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for the start and stop of our field staging dragging\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:fieldStaging', this.startDrag );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:fieldStaging', this.stopDrag );\n\t\t},\n\n\t\t/**\n\t\t * When the user starts dragging the staging area, we have to:\n\t\t * set the overflow property of the drawer to visible !important. If we don't, the button goes underneath the main section.\n\t\t * set the overflow proerty of the main to visible !important. If we don't, the dragged element goes underneath the drawer.\n\t\t * replace our helper with the stacked \"x fields\" template.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t context jQuery UI Draggable\n\t\t * @param  Object\t ui      jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartDrag: function( context, ui ) {\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\n\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\n\t\t\tvar html = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-staged-fields-drag' );\n\t\t\tjQuery( ui.helper ).html( html( { num: stagedFields.models.length } ) );\n\t\t\tjQuery( ui.helper ).prop( 'id', 'nf-staged-fields-drag' );\n\t\t\tjQuery( ui.item ).css( 'opacity', '0.7' );\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging the staging area, we have to set the overflow property to hidden !important\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t context jQuery UI Draggable\n\t\t * @param  Object\t ui      jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopDrag: function( context, ui ) {\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles most things related to our staging area:\n * 1) Creates a collection\n * 2) Listens for requests to CRUD items from the collection\n * 3) Adds our staged fields to the fields sortable when the drawer is closed\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/staging',['models/fields/stagingCollection'], function( stagingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Create our staged fields collection\n\t\t\tthis.collection = new stagingCollection();\n\t\t\t// Respond to requests related to our staging area.\n\t\t    nfRadio.channel( 'fields' ).reply( 'add:stagedField', this.addStagedField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'remove:stagedField', this.removeStagedField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:staging', this.getStagingCollection, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'sort:staging', this.sortStagedFields, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'clear:staging', this.clearStagedFields, this );\n\t\t\t// Listen to our remove staged field click event.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'click:removeStagedField', this.removeStagedField );\n\t\t\t// Listen to our event that fires just before a drawer is closed.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'before:closeDrawer', this.beforeCloseDrawer );\n\t\t},\n\n\t\tgetStagingCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\t/**\n\t\t * Add a field to our staging area\n\t\t * \n\t\t * @since 3.0\n\t\t * @param string type Type of field we're adding\n\t\t * @return tmpID\n\t\t */\n\t\taddStagedField: function( type, silent ) {\n\t\t\tvar silent = silent || false;\n\t\t\t// Get our type model from the string.\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\t\t\t// If this isn't an installed field, don't add it.\n\t\t\tif('undefined' !== typeof fieldType.get('modal_content')) return false;\n\t\t\t// Our tmp ID is a string with the time appended to make it unique.\n\t\t\tvar tmpID = 'nf-staged-field-' + jQuery.now();\n\t\t\t// Object that will be added to our staging collection.\n\t\t\tvar data = {\n\t\t\t\tid: tmpID,\n\t\t\t\t// i.e. firstname, textbox, etc.\n\t\t\t\tslug: fieldType.get( 'type' ),\n\t\t\t\t// i.e. First Name, Textbox, etc.\n\t\t\t\tnicename: fieldType.get( 'nicename' ),\n\t\t\t\t// i.e. calendar, envelope, etc.\n\t\t\t\ticon: fieldType.get( 'icon' )\n\t\t\t}\n\t\t\t// \n\t\t\tvar model = this.collection.add( data );\n\n\t\t\tif( ! silent ) nfRadio.channel( 'fields').trigger( 'add:stagedField', model );\n\n\t\t\treturn tmpID;\n\t\t},\n\n\t\t/**\n\t\t * Remove a field from staging\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \t\t\te     \tEvent\n\t\t * @param  Backbone.model \tmodel \tstaged field model to remove\n\t\t * @return void\n\t\t */\n\t\tremoveStagedField: function( e, model ) {\n\t\t\tthis.collection.remove( model );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'remove:stagedField', model );\n\t\t},\n\n\t\t/**\n\t\t * Adds our staged fields to the main fields sortable before the drawer is closed.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tbeforeCloseDrawer: function() {\n\t\t\tif ( 0 != this.collection.models.length ) { // Make sure that we have models\n\t\t\t\t// Get our field collection.\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\n\t\t\t\tvar fields = [];\n\t\t\t\t// Loop through our staging collection\n\t\t\t\t_.each( this.collection.models, function( model ) {\n\t\t\t\t\t// Get a tmp ID for our new field.\n\t\t\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'get:tmpID' );\n\t\t\t\t\t// Create an object that can be added as a model.\n\t\t\t\t\tvar tmpField = { id: tmpID, label: model.get( 'nicename' ), type: model.get( 'slug' ) };\n\t\t\t\t\t// Add our new field.\n\t\t\t\t\tvar newModel = nfRadio.channel( 'fields' ).request( 'add',  tmpField, false );\n\t\t\t\t\t// Add our field addition to our change log.\n\t\t\t\t\tvar label = {\n\t\t\t\t\t\tobject: 'Field',\n\t\t\t\t\t\tlabel: newModel.get( 'label' ),\n\t\t\t\t\t\tchange: 'Added',\n\t\t\t\t\t\tdashicon: 'plus-alt'\n\t\t\t\t\t};\n\t\t\t\t\tvar data = {\n\t\t\t\t\t\tcollection: fieldCollection\n\t\t\t\t\t}\n\t\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\n\t\t\t\n\t\t\t\t} );\n\t\t\t\t// Trigger a reset on our field collection so that our view re-renders\n\t\t\t\tfieldCollection.trigger( 'reset', fieldCollection );\n\t\t\t\t// Empty the staging collection\n\t\t\t\tthis.collection.reset();\n\t\t\t}\n\t\t\t// Sort our fields.\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields', null, null, false );\n\t\t},\n\n\t\t/**\n\t\t * Sort our staging area by the 'order' attribute.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tsortStagedFields: function() {\n\t\t\t// Get our staged fields sortable.\n\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\t// Get the current order using jQuery sortable. Will be an array of IDs: [tmp-blah, tmp-blah]\n\t\t\tvar order = jQuery( sortableEl ).sortable( 'toArray' );\n\t\t\t// Loop through our models\n\t\t\t_.each( this.collection.models, function( field ) {\n\t\t\t\t// Search our order array for this field.\n\t\t\t\tvar search = field.get( 'id' );\n\t\t\t\tvar pos = order.indexOf( search );\n\t\t\t\t// Update our staged field model with the new order.\n\t\t\t\tfield.set( 'order', pos );\n\t\t\t} );\n\t\t\t// Sort our staging collection.\n\t\t\tthis.collection.sort();\n\t\t},\n\n\t\tclearStagedFields: function() {\n\t\t\tthis.collection.reset();\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles actions related to our staged fields sortable.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/stagingSortable',['models/fields/stagingCollection'], function( stagingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our field type draggables\n\t\t\t// this.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.addActiveClass );\n\t\t\t// this.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.removeActiveClass );\n\t\t\t// Listen to our sortable events\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'receive:stagedFields', this.receiveStagedFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'over:stagedFields', this.overStagedFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'out:stagedFields', this.outStagedFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'start:stagedFields', this.startStagedFields );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stop:stagedFields', this.stopStagedFields );\n\t\t},\n\n\t\t/**\n\t\t * Change our dropped field type helper so that it matches the other items in our sortable.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI item\n\t\t * @return void\n\t\t */\n\t\treceiveStagedFields: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\n\t\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'add:stagedField', type );\n\t\t\t\tjQuery( ui.helper ).prop( 'id', tmpID );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\n\t\t\t\tjQuery( ui.helper ).remove();\n\t\t\t\tnfRadio.channel( 'drawer-addField' ).trigger( 'drop:fieldType', type );\t\t\t\t\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add an active class to our sortable when a field type item is dragged\n\t\t * \n\t\t * @since 3.0\n\t\t */\n\t\taddActiveClass: function() {\n\t\t\tvar stagedFieldsEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\tjQuery( stagedFieldsEl ).addClass( 'nf-droppable-active' );\n\t\t},\n\n\t\t/**\n\t\t * Remove the active class from our sortable when the field type item is dropped.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tremoveActiveClass: function() {\n\t\t\tvar stagedFieldsEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\tjQuery( stagedFieldsEl ).removeClass( 'nf-droppable-active' );\n\t\t},\n\n\t\t/**\n\t\t * When the field type item is dragged over our sortable, we change the helper to match the sortable items.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \te  event\n\t\t * @param  Object \tui jQuery UI Element\n\t\t * @return void\n\t\t */\n\t\toverStagedFields: function( e, ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\n\t\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\t\t\t\tvar nicename = fieldType.get( 'nicename' );\n\t\t\t\tthis.currentHelper = ui.helper \n\t\t\t\tjQuery( ui.helper ).html( nicename + '<span class=\"dashicons dashicons-dismiss\"></span>' );\n\t\t\t\tjQuery( ui.helper ).removeClass( 'nf-field-type-button' ).addClass( 'nf-item-dock' ).css( { 'opacity': '0.8', 'width': '', 'height': '' } );\n\t\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t},\n\n\t\t/**\n\t\t * When a field type item is moved away from our sortable, we change the helper to its previous appearance\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\toutStagedFields: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) {\n\t\t\t\tvar helperClone = nfRadio.channel( 'drawer-addField' ).request( 'get:typeHelperClone' );\t\n\t\t\t\tjQuery( this.currentHelper ).html( jQuery( helperClone ).html() );\n\t\t\t\tjQuery( this.currentHelper ).removeClass( 'nf-item-dock' ).addClass( 'nf-field-type-button' );\n\t\t\t\tvar sortableEl = nfRadio.channel( 'app' ).request( 'get:stagedFieldsEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t},\n\n\t\t/**\n\t\t * When a user starts to drag a sortable item, we need to set a few properties on the item and the helper.\n\t\t * These keep the original item in place while dragging and changes the opacity of the helper.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartStagedFields: function( ui ) {\n\t\t\tjQuery( ui.item ).show();\n\t\t\tjQuery( ui.item ).css( { 'display': 'inline', 'opacity': '0.7' } );\n\t\t\tjQuery( ui.helper ).css( 'opacity', '0.5' );\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging a sortable item, remove our opacity setting and remove the helper item.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopStagedFields: function( ui ) {\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\n\t\t\tjQuery( ui.helper ).remove();\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Filters our field type collection.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/filterTypes',['models/fields/typeSectionCollection'], function( fieldTypeSectionCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our change filter event.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'change:filter', this.filterFieldTypes );\n\t\t},\n\n\t\t/**\n\t\t * Filter our field types in the add new field drawer\n\t\t * \n\t\t * Takes a search string and finds any field types that match either the name or alias.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string\t search \tstring being searched for\n\t\t * @param  object \t e      \tKeyup event\n\t\t * @return void\n\t\t */\n\t\tfilterFieldTypes: function( search, e ) {\n\t\t\t// Make sure that we aren't dealing with an empty string.\n\t\t\tif ( '' != jQuery.trim( search ) ) {\n        \t\tvar filtered = [];\n        \t\t/**\n        \t\t * Call the function that actually filters our collection,\n        \t\t * and then loop through our collection, adding each model to our filtered array.\n        \t\t */\n        \t\t_.each( this.filterCollection( search ), function( model ) {\n        \t\t\tfiltered.push( model.get( 'id' ) );\n        \t\t} );\n\n        \t\t// Create a new Field Type Section collection with the filtered array.\n        \t\tvar filteredSectionCollection = new fieldTypeSectionCollection( [\n\t\t\t\t{ \n\t\t\t\t\tid: 'filtered',\n\t\t\t\t\tnicename: 'Filtered Fields',\n\t\t\t\t\tfieldTypes: filtered\n\t\t\t\t}\n\t\t\t\t] );\n                \n                // Declare array of fields to hide.\n\t\t\t\tvar hiddenFields = nfRadio.channel( 'app' ).request( 'update:hiddenFields' ) || [];\n\t\t\t\thiddenFields = hiddenFields.concat([\n\t\t\t\t\t'product',\n\t\t\t\t\t'quantity',\n\t\t\t\t\t'shipping',\n\t\t\t\t\t'total',\n\t\t\t\t\t'button'\n\t\t\t\t]);\n\n                // Search our results of hidden fields.\n                for ( var i = filteredSectionCollection.models[ 0 ].get( 'fieldTypes' ).length -1; i >= 0; i-- ) {\n                    var target = hiddenFields.indexOf( filteredSectionCollection.models[ 0 ].get( 'fieldTypes' )[ i ] );\n                    // If we find any...\n                    if ( -1 < target ) {\n                        // Remove them from the collection.\n                        filteredSectionCollection.models[ 0 ].get( 'fieldTypes' ).splice( i, 1 );\n                    }\n                }\n\n        \t\t// Request that our field types filter be applied, passing the collection we created above.\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'filter:fieldTypes', filteredSectionCollection );\n        \t\t// If we've pressed the 'enter' key, add the field to staging and clear the filter.\n        \t\tif ( 'undefined' != typeof e && e.addObject ) {\n        \t\t\tif ( 0 < filtered.length ) {\n        \t\t\t\tnfRadio.channel( 'fields' ).request( 'add:stagedField', filtered[0] );\n        \t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\n        \t\t\t}\n        \t\t}\n        \t} else {\n        \t\t// Clear our filter if the search text is empty.\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'clear:filter' );\n        \t}\n        },\n\n        /**\n         * Search our field type collection for the search string.\n         * \n         * @since  3.0\n         * @param  string\t search \tstring being searched for\n         * @return backbone.collection\n         */\n        filterCollection: function( search ) {\n        \tsearch = search.toLowerCase();\n        \t// Get our list of field types\n        \tvar collection = nfRadio.channel( 'fields' ).request( 'get:typeCollection' );\n        \t/*\n        \t * Backbone collections have a 'filter' method that loops through every model,\n        \t * waiting for you to return true or false. If you return true, the model is kept.\n        \t * If you return false, it's removed from the filtered result.\n        \t */\n\t\t\tvar filtered = collection.filter( function( model ) {\n\t\t\t\tvar found = false;\n\t\t\t\t\n\t\t\t\t// If we match either the ID or nicename, return true.\n\t\t\t\tif ( model.get( 'type' ).toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t} else if ( model.get( 'nicename' ).toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * TODO: Hashtag searching. Doesn't really do anything atm.\n\t\t\t\t */\n\t\t\t\tif ( model.get( 'tags' ) && 0 == search.indexOf( '#' ) ) {\n\t\t\t\t\t_.each( model.get( 'tags' ), function( tag ) {\n\t\t\t\t\t\tif ( search.replace( '#', '' ).length > 1 ) {\n\t\t\t\t\t\t\tif ( tag.toLowerCase().indexOf( search.replace( '#', '' ) ) != -1 ) {\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// If we match any of the aliases, return true.\n\t\t\t\tif ( model.get( 'alias' ) ) {\n\t\t\t\t\t_.each( model.get( 'alias' ), function( alias ) {\n\t\t\t\t\t\tif ( alias.toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\treturn found;\n\t\t\t} );\n\t\t\t// Return our filtered collection.\n\t\t\treturn filtered;\n        }\n\t});\n\n\treturn controller;\n} );\n","define( 'views/fields/preview/element',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-field-input',\n\n\t\tinitialize: function() {\n\t\t\t\n\t\t\tvar type = this.model.get('type');\n\n\t\t\tthis.model.set('value', this.model.get('default'));\n\t\t\t\n\t\t\tif('date' == type && this.model.get('date_default')){\n\t\t\t\tvar format = this.model.get('date_format');\n\t\t\t\tif('default' == format || '' == format) format = this.convertDateFormat(nfAdmin.dateFormat);\n\t\t\t\tvar original = moment.locale();\n\t\t\t\tif( ! moment.locales().includes( 'ninja-forms' ) ) {\n\t\t\t\t\tmoment.defineLocale('ninja-forms', {\n\t\t\t\t\t\tmonths: nfi18n.months,\n\t\t\t\t\t\tmonthsShort: nfi18n.monthsShort,\n\t\t\t\t\t\tweekdays: nfi18n.weekdays,\n\t\t\t\t\t\tweekdaysShort: nfi18n.weekdaysShort,\n\t\t\t\t\t\tweekdaysMin: nfi18n.weekdaysMin\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\tthis.model.set('value', moment().format(format) );\n\t\t\t\tmoment.locale(original);\n\t\t\t}\n\n\t\t\tif('phone' == type) type = 'tel';\n\t\t\tif('spam' == type) type = 'input';\n\t\t\t// if('date' == type) type = 'input';\n\t\t\tif('confirm' == type) type = 'input';\n\t\t\tif('password' == type) type = 'input';\n\t\t\tif('passwordconfirm' == type) type = 'input';\n\t\t\tif('quantity' == type) type = 'number';\n\t\t\tif('terms' == type) type = 'listcheckbox';\n\t\t\tif('liststate' == type) type = 'listselect';\n\t\t\tif('listcountry' == type) type = 'listselect';\n\t\t\tif('listmultiselect' == type) type = 'listselect';\n\t\t\tif('save' == type) type = 'submit';\n\n\t\t\t// If a builder-specific template exists for this type, use that.\n\t\t\tif ( 1 == jQuery( '#tmpl-nf-builder-field-' + type ).length ) {\n\t\t\t\tthis.template = '#tmpl-nf-builder-field-' + type;\n\t\t\t} else {\n\t\t\t\tthis.template = '#tmpl-nf-field-' + type;\n\t\t\t}\t\t\t\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tif(this.model.get('container_class').includes('two-col-list')) {\n\t\t\t\tjQuery(this.el).find('> ul').css('display', 'grid');\n\t\t\t\tjQuery(this.el).find('> ul').css('grid-template-columns', 'repeat(2, 1fr)');\n\t\t\t}\n\t\t\tif(this.model.get('container_class').includes('three-col-list')) {\n\t\t\t\tjQuery(this.el).find('> ul').css('display', 'grid');\n\t\t\t\tjQuery(this.el).find('> ul').css('grid-template-columns', 'repeat(3, 1fr)');\n\t\t\t}\n\t\t\tif(this.model.get('container_class').includes('four-col-list')) {\n\t\t\t\tjQuery(this.el).find('> ul').css('display', 'grid');\n\t\t\t\tjQuery(this.el).find('> ul').css('grid-template-columns', 'repeat(4, 1fr)');\n\t\t\t}\n\t\t},\n        \n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\trenderClasses: function() {\n\t    \t\t\t// ...\n                },\n\t\t\t\tmaybeFilterHTML: function()  {\n\t\t\t\t\treturn typeof nfAdmin.filter_esc_status !== \"undefined\" ? nfAdmin.filter_esc_status : \"false\";\n\t\t\t\t},\n                renderPlaceholder: function() {\n                    if('undefined' == typeof this.placeholder) return;\n\t\t\t\t\treturn 'placeholder=\"' + jQuery.trim( _.escape( this.placeholder ) ) + '\"';\n                },\n                maybeDisabled: function() {\n                    if('undefined' == typeof this.disable_input) return;\n                    if(!this.disable_input) return;\n                    return 'disabled=\"disabled\"';\n                },\n                maybeRequired: function() {\n\t\t\t\t\t// ...\n\t\t\t\t},\n\t\t\t\tmaybeInputLimit: function() {\n\t\t\t\t\t// ...\n\t\t\t\t},\n\t\t\t\tmaybeDisableAutocomplete: function() {\n\t\t\t\t\t// ..\n\t\t\t\t},\n\t\t\t\tmaybeChecked: function() {\n\t\t\t\t\tif('checked' == this.default_value) return ' checked=\"checked\"';\n\t\t\t\t},\n\t\t\t\trenderOptions: function() {\n\t\t\t\t\tlet optionLabel;\n\t\t\t\t\tswitch(this.type) {\n\t\t\t\t\t\tcase 'terms':\n\n\t\t\t\t\t\t\tif( ! this.taxonomy ){\n\t\t\t\t\t\t\t\treturn '(No taxonomy selected)';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tvar taxonomyTerms = fieldTypeData.find(function(typeData){\n\t\t\t\t\t\t\t\treturn 'terms' == typeData.id;\n\t\t\t\t\t\t\t}).settingGroups.find(function(settingGroup){\n\t\t\t\t\t\t\t\treturn 'primary' == settingGroup.id;\n\t\t\t\t\t\t\t}).settings.find(function(setting){\n\t\t\t\t\t\t\t\treturn 'taxonomy_terms' == setting.name;\n\t\t\t\t\t\t\t}).settings;\n\n\t\t\t\t\t\t\tvar attributes = Object.keys(this);\n\t\t\t\t\t\t\tvar enabledTaxonomyTerms = attributes.filter(function(attribute){\n\t\t\t\t\t\t\t\treturn 0 == attribute.indexOf('taxonomy_term_') && this[attribute];\n\t\t\t\t\t\t\t}.bind(this));\n\n\t\t\t\t\t\t\tif(0 == enabledTaxonomyTerms.length) {\n\t\t\t\t\t\t\t\treturn '(No available terms selected)';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn enabledTaxonomyTerms.reduce(function(html, enabledTaxonomyTerm) {\n\t\t\t\t\t\t\t\tvar term = taxonomyTerms.find(function(terms){\n\t\t\t\t\t\t\t\t\treturn enabledTaxonomyTerm == terms.name;\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tif( 'undefined' == typeof term ) return html;\n\t\t\t\t\t\t\t\treturn html += '<li><input type=\"checkbox\"><div>' + term.label  + '</div></li>';\n\t\t\t\t\t\t\t}.bind(this), '');\n\t\t\t\t\t\tcase 'liststate':\n\t\t\t\t\t\tcase 'listselect':\n\n\t\t\t\t\t\t\t// Check if there are any options.\n\t\t\t\t\t\t\tif(0 == this.options.models.length) return '';\n\n\t\t\t\t\t\t\t// Filter by :selected\" options.\n\t\t\t\t\t\t\tvar options = this.options.models.filter(function(option){\n\t\t\t\t\t\t\t\treturn option.get('selected');\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// If no option set as \"selected\", then reset the previous filter.\n\t\t\t\t\t\t\tif(0 == options.length) options = this.options.models;\n\n\t\t\t\t\t\t\t// Set the first option to display in the field preview.\n\t\t\t\t\t\t\toptionLabel = (typeof nfAdmin.filter_esc_status !== \"undefined\" && nfAdmin.filter_esc_status === \"true\") ? _.escape(options[0].get('label')) : options[0].get('label'); \n\t\t\t\t\t\t\treturn '<option>' + optionLabel + '</option>';\n\t\t\t\t\t\tcase 'listmultiselect':\n\t\t\t\t\t\t\treturn this.options.models.reduce(function(html, option) {\n\t\t\t\t\t\t\t\toptionLabel = (typeof nfAdmin.filter_esc_status !== \"undefined\" && nfAdmin.filter_esc_status === \"true\") ? _.escape(option.get('label')) : option.get('label'); \n\t\t\t\t\t\t\t\tvar selected = (option.get('selected')) ? ' selected=\"selected\"' : '';\n\t\t\t\t\t\t\t\treturn html += '<option' + selected + '>' + optionLabel + '</option>';\n\t\t\t\t\t\t\t}, '');\n\t\t\t\t\t\tcase 'listcheckbox':\n\t\t\t\t\t\t\treturn this.options.models.reduce(function(html, option) {\n\t\t\t\t\t\t\t\toptionLabel = (typeof nfAdmin.filter_esc_status !== \"undefined\" && nfAdmin.filter_esc_status === \"true\") ? _.escape(option.get('label')) : option.get('label'); \n\t\t\t\t\t\t\t\tvar checked = (option.get('selected')) ? ' checked=\"checked\"' : '';\n\t\t\t\t\t\t\t\treturn html += '<li><input type=\"checkbox\"' + checked + '><div>' + optionLabel + '</div></li>';\n\t\t\t\t\t\t\t}, '');\n\t\t\t\t\t\tcase 'listradio':\n\t\t\t\t\t\t\tvar checked = false; // External flag to only select one radio item.\n\t\t\t\t\t\t\treturn this.options.models.reduce(function(html, option) {\n\t\t\t\t\t\t\t\toptionLabel = (typeof nfAdmin.filter_esc_status !== \"undefined\" && nfAdmin.filter_esc_status === \"true\") ? _.escape(option.get('label')) : option.get('label'); \n\t\t\t\t\t\t\t\tchecked = (option.get('selected') && !checked) ? ' checked=\"checked\"' : '';\n\t\t\t\t\t\t\t\treturn html += '<li><input type=\"radio\"' + checked + '><div>' + optionLabel   + '</div></li>';\n\t\t\t\t\t\t\t}, '');\n\t\t\t\t\t\tcase 'listcountry':\n\t\t\t\t\t\t\tvar defaultValue = this.default;\n\t\t\t\t\t\t\tvar defaultOption = window.fieldTypeData.find(function(data) {\n\t\t\t\t\t\t\t\treturn 'listcountry' == data.id;\n\t\t\t\t\t\t\t}).settingGroups.find(function(group){\n\t\t\t\t\t\t\t\treturn 'primary' == group.id;\n\t\t\t\t\t\t\t}).settings.find(function(setting){\n\t\t\t\t\t\t\t\treturn 'default' == setting.name;\n\t\t\t\t\t\t\t}).options.find(function(option) {\n\t\t\t\t\t\t\t\treturn defaultValue == option.value;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\toptionLabel = ('undefined' !== typeof defaultOption ) ? defaultOption.label : '--';\n\t\t\t\t\t\t\toptionLabel = (typeof nfAdmin.filter_esc_status !== \"undefined\" && nfAdmin.filter_esc_status === \"true\") ? _.escape(optionLabel ) : optionLabel; \n\t\t\t\t\t\t\treturn '<option>' + optionLabel + '</option>';\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\trenderOtherAttributes: function() {\n\t\t\t\t\tvar attributes = [];\n\t\t\t\t\tif('listmultiselect' == this.type) {\n\t\t\t\t\t\tattributes.push('multiple');\n\n\t\t\t\t\t\tvar multi_size = this.multi_size || '5';\n\t\t\t\t\t\tattributes.push('size=\"' + multi_size + '\"');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn attributes.join(' ');\n\t\t\t\t},\n\t\t\t\trenderProduct: function() {\n\t\t\t\t\t// ...\n\t\t\t\t},\n\t\t\t\trenderNumberDefault: function() {\n\t\t\t\t\treturn this.value;\n\t\t\t\t},\n\t\t\t\trenderCurrencyFormatting: function() {\n\t\t\t\t\t// ...\n\t\t\t\t},\n\t\t\t\trenderRatings: function() {\n\t\t\t\t\tvar ratingOutput = '';\n\t\t\t\t\tfor (var i = 0; i < this.number_of_stars; i++) {\n\t\t\t\t\t\tratingOutput += '<i class=\"fa fa-star\" aria-hidden=\"true\"></i>&nbsp;';\n\t\t\t\t\t  }\n\t\t\t\t\treturn ratingOutput;\n\t\t\t\t},\n\t\t\t\trenderHourOptions: function() {\n            html = '';\n            let hours = 12;\n\n            if ( 'undefined' != typeof this.hours_24 && 1 == this.hours_24 ) {\n                hours = 24;\n            }\n\n            for (var i = 0; i < hours; i++) {\n                let value = label = i;\n\n                if ( i < 10 ) {\n                    value = label = '0' + i;\n                }\n                html += '<option value=\"' + value + '\">' + label + '</option>';\n                i = i++;\n            }\n\n            return html;\n        },\n\n        renderMinuteOptions: function() {\n            var html = '';\n            let minute_increment = 5;\n\n            if ( 'undefined' != typeof this.minute_increment ) {\n                minute_increment = this.minute_increment;\n            }\n\n            let i = 0;\n\t\t\t\n            while( i.toString().length <= 2 && i < 60 ) {\n                let value = label = i;\n\n                if ( i < 10 ) {\n                    value = label = '0' + i;\n                }\n                html += '<option value=\"' + value + '\">' + label + '</option>';\n                i = i + minute_increment;\n            }\n\n            return html;\n        },\n\n        maybeRenderAMPM: function() {\n            if ( 'undefined' == typeof this.hours_24 || 1 == this.hours_24 ) {\n                return;\n            }\n\n            return '<div style=\"float:left;\"><select class=\"ampm\" style=\"float:left;\"><option value=\"am\">AM</option><option value=\"pm\">PM</option></select></div>'\n        },\n        \t\t\t\tmaybeRenderTime: function() {\n\t\t\t\t\tif ( 'time_only' == this.date_mode || 'date_and_time' == this.date_mode ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\n            }\n\t\t},\n\t\t\n        convertDateFormat: function( dateFormat ) {\n            // http://php.net/manual/en/function.date.php\n            // https://github.com/dbushell/Pikaday/blob/master/README.md#formatting\n            // Note: Be careful not to add overriding replacements. Order is important here.\n\n            /** Day */\n            dateFormat = dateFormat.replace( 'D', 'ddd' ); // @todo Ordering issue?\n            dateFormat = dateFormat.replace( 'd', 'DD' );\n            dateFormat = dateFormat.replace( 'l', 'dddd' );\n            dateFormat = dateFormat.replace( 'j', 'D' );\n            dateFormat = dateFormat.replace( 'N', '' ); // Not Supported\n            dateFormat = dateFormat.replace( 'S', '' ); // Not Supported\n            dateFormat = dateFormat.replace( 'w', 'd' );\n            dateFormat = dateFormat.replace( 'z', '' ); // Not Supported\n\n            /** Week */\n            dateFormat = dateFormat.replace( 'W', 'W' );\n\n            /** Month */\n            dateFormat = dateFormat.replace( 'M', 'MMM' ); // \"M\" before \"F\" or \"m\" to avoid overriding.\n            dateFormat = dateFormat.replace( 'F', 'MMMM' );\n            dateFormat = dateFormat.replace( 'm', 'MM' );\n            dateFormat = dateFormat.replace( 'n', 'M' );\n            dateFormat = dateFormat.replace( 't', '' );  // Not Supported\n\n            // Year\n            dateFormat = dateFormat.replace( 'L', '' ); // Not Supported\n            dateFormat = dateFormat.replace( 'o', 'YYYY' );\n            dateFormat = dateFormat.replace( 'Y', 'YYYY' );\n            dateFormat = dateFormat.replace( 'y', 'YY' );\n\n            // Time - Not supported\n            dateFormat = dateFormat.replace( 'a', '' );\n            dateFormat = dateFormat.replace( 'A', '' );\n            dateFormat = dateFormat.replace( 'B', '' );\n            dateFormat = dateFormat.replace( 'g', '' );\n            dateFormat = dateFormat.replace( 'G', '' );\n            dateFormat = dateFormat.replace( 'h', '' );\n            dateFormat = dateFormat.replace( 'H', '' );\n            dateFormat = dateFormat.replace( 'i', '' );\n            dateFormat = dateFormat.replace( 's', '' );\n            dateFormat = dateFormat.replace( 'u', '' );\n            dateFormat = dateFormat.replace( 'v', '' );\n\n            // Timezone - Not supported\n            dateFormat = dateFormat.replace( 'e', '' );\n            dateFormat = dateFormat.replace( 'I', '' );\n            dateFormat = dateFormat.replace( 'O', '' );\n            dateFormat = dateFormat.replace( 'P', '' );\n            dateFormat = dateFormat.replace( 'T', '' );\n            dateFormat = dateFormat.replace( 'Z', '' );\n\n            // Full Date/Time - Not Supported\n            dateFormat = dateFormat.replace( 'c', '' );\n            dateFormat = dateFormat.replace( 'r', '' );\n            dateFormat = dateFormat.replace( 'u', '' );\n\n            return dateFormat;\n        }\n\n\t});\n\n\treturn view;\n} );\n","/**\n * This is a copy of the 'views/fields/mainContentEmpty.js' file.\n * It is also the file that handles dropping new field types on our repeater field.\n * \n */\n\ndefine( 'views/fields/preview/repeaterElementEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-repeater-content-fields-empty',\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.repeaterFieldModel = data.repeaterFieldModel;\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tjQuery( this.el ).parent().removeClass( 'nf-fields-empty-droppable' ).droppable( 'destroy' );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tif ( jQuery( this.el ).parent().hasClass( 'ui-sortable' ) ) {\n\t\t\t\tjQuery( this.el ).parent().sortable( 'destroy' );\n\t\t\t}\n\t\t\tjQuery( this.el ).parent().addClass( 'nf-fields-empty-droppable' );\n\t\t\tlet that = this;\n\t\t\tjQuery( this.el ).parent().droppable( {\n\t\t\t\taccept: function( draggable ) {\n\t\t\t\t\tif ( jQuery( draggable ).hasClass( 'nf-stage' ) || jQuery( draggable ).hasClass( 'nf-field-type-button' ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tactiveClass: 'nf-droppable-active',\n\t\t\t\thoverClass: 'nf-droppable-hover',\n\t\t\t\ttolerance: 'pointer',\n\n\t\t\t\tover: function( e, ui ) {\t\n\t\t\t\t\t\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tjQuery(ui.item).addClass(\"nf-over-repeater\");\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\n\t\t\t\t},\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tjQuery(ui.item).removeClass(\"nf-over-repeater\");\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\t\t},\n\t\t\t\t/**\n\t\t\t\t * Handles the dropping of items into our EMPTY repeater field.\n\t\t\t\t * \n\t\t\t\t */\n\t\t\t\tdrop: function( e, ui ) {\n\t\t\t\t\tui.item = null != ui.item ? ui.item : ui.draggable;\n\t\t\t\t\tnfRadio.channel( 'fields-repeater' ).request( 'add:childField', ui, that, e );\n\t\t\t\t},\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Collection View that outputs our repeater field collection to the screen.\n */\ndefine( 'views/fields/preview/repeaterElementCollection',[ 'views/fields/preview/repeaterElementEmpty' ], function( emptyView ) {\n\tvar view = Marionette.CollectionView.extend( {\n\t\ttagName: 'div',\n\t\temptyView: emptyView,\n\n\t\tgetChildView: function() {\n\t\t\tlet view = nfRadio.channel( 'views' ).request( 'get:fieldItem' );\n\t\t\treturn view;\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.emptyViewOptions = {\n\t\t\t\trepeaterFieldModel: data.repeaterFieldModel,\n\t\t\t};\n\t\t\tthis.repeaterFieldModel = data.repeaterFieldModel;\n\n\t\t\tnfRadio.channel( 'fields-repeater' ).reply( 'init:sortable', this.initSortable, this );\n\t\t\tnfRadio.channel( 'fields-repeater' ).reply( 'get:sortableEl', this.getSortableEl, this );\n\t\t\tnfRadio.channel( 'fields-repeater' ).reply( 'get:repeaterFieldsCollection', this.getRepeaterFieldsCollection, this );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tif ( this.collection.models.length > 0 ) {\n\t\t\t\tjQuery( this.el ).addClass( 'nf-field-type-droppable' );\n\t\t\t\tvar that = this;\n\t\t\t\tthis.initSortable();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This sortable is a copy with modifications of the main field list sortable.\n\t\t * \n\t\t * @since  version\n\t\t * @return {[type]} [description]\n\t\t */\n\t\tinitSortable: function() {\n\t\t\t// If the sortable has already been instantiated, return early.\n\t\t\tif ( 'undefined' != typeof jQuery( this.el ).sortable( 'instance' ) ) return false;\n\n\t\t\tjQuery( this.el ).addClass( 'nf-field-type-droppable' ).addClass( 'nf-fields-sortable' );\n\n\t\t\tlet that = this;\n\t\t\tjQuery( this.el ).sortable( {\n\t\t\t\tcontainment: 'parent',\n\t\t\t\thelper: 'clone',\n\t\t\t\tcancel: '.nf-item-controls',\n\t\t\t\tplaceholder: 'nf-fields-sortable-placeholder',\n\t\t\t\topacity: 0.95,\n\t\t\t\tgrid: [ 5, 5 ],\n\t\t\t\tappendTo: '#nf-main',\n\t\t\t\tscrollSensitivity: 10,\n\t\t\t\t//connectWith would allow drag and drop between fields already in the builder and the repeatable fieldset ( this is currently an issue until we deal with existing data stored)\n\t\t\t\t//connectWith: '.nf-fields-sortable', \n\n\t\t\t\treceive: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'fields-repeater' ).request( 'receive:fields', ui, that, e );\n\t\t\t\t},\n\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tjQuery(ui.item).addClass(\"nf-over-repeater\");\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'fields-repeater' ).request( 'over:repeaterField', ui, that, e );\n\t\t\t\t},\n\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tjQuery(ui.item).removeClass(\"nf-over-repeater\");\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'fields-repeater' ).request( 'out:repeaterField', ui, that, e );\n\t\t\t\t},\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'fields-repeater' ).request( 'start:repeaterField', ui, that, e );\n\t\t\t\t},\n\n\t\t\t\tremove: function( e, ui ) {\n\t\t\t\t\t// The field is removed from repeater Fields collection and a new one is created for main Fields collection from controllers/fields/sortable/js\n\t\t\t\t\tlet droppedFieldID = jQuery( ui.item ).data( 'id' );\n\t\t\t\t\tlet collection = that.repeaterFieldModel.get( 'fields' );\n\t\t\t\t\tlet droppedFieldModel = collection.get( droppedFieldID );\n\t\t\t\t\t\n\t\t\t\t\t// Remove the field from the repeater field collection making sure we alert the user the field data is being deleted\n\t\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:delete', e, droppedFieldModel );\n\t\t\t\t},\n\t\t\t\t\n\t\t\t\t// When we update the sort order of our repeater field children, run our sort function.\n\t\t\t\tupdate: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'fields-repeater' ).request( 'update:repeaterField', ui, that, e );\n\t\t\t\t},\n\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tif ( ui.item.dropping ) return;\n\t\t\t\t\tnfRadio.channel( 'fields-repeater' ).request( 'stop:repeaterField', ui, that, e );\n\t\t\t\t}\n\t\t\t} );\n\t\t},\n\n\t\tdestroySortable: function() {\n\t\t\tjQuery( this.el ).sortable( 'destroy' );\n\t\t},\n\n\t\t/**\n\t\t * When we add our first child, we need to init the sortable.\n\t\t * \n\t\t * @since  version\n\t\t * @param  {[type]} childView [description]\n\t\t * @return {[type]}           [description]\n\t\t */\n\t\tonAddChild: function( childView ) {\n\t\t\tif ( nfRadio.channel( 'fields' ).request( 'get:adding' ) ) {\n\t\t\t\tchildView.$el.hide().show( 'clip' );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'set:adding', false);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Get Element holding child fields\n\t\t */\n\t\tgetSortableEl: function() {\n\t\t\treturn this.el;\n\t\t},\n\n\t\t/**\n\t\t * Getter for the repeater Fields collection\n\t\t */\n\t\tgetRepeaterFieldsCollection: function() {\n\t\t\treturn this.repeaterFieldModel.get( 'fields' );\n\t\t}\n\t\t\n\t} );\n\n\treturn view;\n} );\n\n","define( 'views/fields/preview/repeaterElementLayout',[ 'views/fields/preview/repeaterElementCollection' ], function( previewRepeaterElementCollectionView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-field-repeater',\n\n\t\tregions: {\n\t\t\tfields: '.nf-repeater-fieldsets',\n\t\t},\n\n\t\tinitialize: function( data ) {\n\t\t\tthis.collection = data.collection;\n\t\t\tthis.model = data.model;\n\t\t},\n\n\t\tonRender: function() {\n\t\t\t// Populate the fields region with our collection view.\n\t\t\tthis.fields.show( new previewRepeaterElementCollectionView( { collection: this.collection, repeaterFieldModel: this.model } ) );\n\t\t},\n\n\t\ttemplateHelpers: function() {\n\t\t\treturn {\n\t\t\t\tmaybeFilterHTML: function()  {\n\t\t\t\t\treturn typeof nfAdmin.filter_esc_status !== \"undefined\" ? nfAdmin.filter_esc_status : \"false\";\n\t\t\t\t},\n\t\t\t\trenderDescText: function() {\n\t\t\t\t\t// ...\n\t\t\t\t},\n\t\t\t}\n\t\t},\n\t});\n\n\treturn view;\n} );\n","define( 'views/fields/preview/label',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-field-label',\n\n\t\tinitialize: function( data ) {\n\t\t\t// this.$el = jQuery( data.itemView.el ).find( '.nf-realistic-field--label' );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\t// ...\n\t\t\t// console.log( jQuery( this.$el ) );\n\t\t},\n        \n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\trenderLabelClasses: function() {\n                    // ...\n                },\n\t\t\t\tmaybeFilterHTML: function()  {\n\t\t\t\t\treturn typeof nfAdmin.filter_esc_status !== \"undefined\" ? nfAdmin.filter_esc_status : \"false\";\n\t\t\t\t},\n                maybeRenderHelp: function() {\n                    // ...\n                }\n            }\n        }\n\n\t});\n\n\treturn view;\n} );\n","define( 'views/fields/fieldItem',['views/app/itemControls', 'views/fields/preview/element', 'views/fields/preview/repeaterElementLayout', 'views/fields/preview/label'], function( itemControlsView, previewElementView, previewRepeaterElementView, previewLabelView ) {\n\tvar view = Marionette.LayoutView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-content-field',\n\t\tdoingShortcut: false,\n\n\t\tregions: {\n\t\t\titemControls: '.nf-item-controls',\n\t\t\tpreviewLabel: '.nf-realistic-field--label',\n\t\t\tpreviewElement: '.nf-realistic-field--element',\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\tthis.model.on( 'change:editActive', this.render, this );\n\t\t\tthis.model.on( 'change:label', this.render, this );\n\t\t\tthis.model.on( 'change:required', this.render, this );\n\t\t\tthis.model.on( 'change:id', this.render, this );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tthis.model.off( 'change:editActive', this.render );\n\t\t\tthis.model.off( 'change:label', this.render );\n\t\t\tthis.model.off( 'change:required', this.render );\n\t\t\tthis.model.off( 'change:id', this.render );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\n\t\t\tthis.itemControls.show( new itemControlsView( { model: this.model } ) );\n\t\t\tjQuery( this.el ).disableSelection();\n\n\t\t\tvar type = this.model.get('type');\n\t\t\tif('phone' == type) type = 'tel';\n\t\t\tif('spam' == type) type = 'input';\n\t\t\t// if('date' == type) type = 'input';\n\t\t\tif('confirm' == type) type = 'input';\n\t\t\tif('password' == type) type = 'input';\n\t\t\tif('passwordconfirm' == type) type = 'input';\n\t\t\tif('quantity' == type) type = 'number';\n\t\t\tif('terms' == type) type = 'listcheckbox';\n\t\t\tif('liststate' == type) type = 'listselect';\n\t\t\tif('listcountry' == type) type = 'listselect';\n\t\t\tif('listmultiselect' == type) type = 'listselect';\n\t\t\tif('save' == type) type = 'submit';\n\n\t\t\t// Only show preview / realisitic fields when not `html`, `hidden`, `note`, or `recaptcha`.\n\t\t\tvar previewFieldTypeBlacklist = ['html', 'hidden', 'note', 'recaptcha'];\n\t\t\tvar isFieldTypeTemplateAvailable = jQuery('#tmpl-nf-field-' + type).length;\n\t\t\tif(-1 == previewFieldTypeBlacklist.indexOf(this.model.get('type')) && isFieldTypeTemplateAvailable) {\n\t\t\t\t\n\t\t\t\t// If we have a repeater field, then we have to load a specific collection view.\n\t\t\t\tif ( 'repeater' == type ) {\n\t\t\t\t\tthis.previewElement.show( new previewRepeaterElementView( { collection: this.model.get( 'fields' ), model: this.model } ) );\n\t\t\t\t} else {\n\t\t\t\t\tthis.previewElement.show( new previewElementView( { model: this.model } ) );\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Only show the preview label when not `submit`, or `hr`.\n\t\t\t\tvar showLabelFieldTypeBlacklist = ['submit', 'save', 'hr'];\n\t\t\t\tif(-1 == showLabelFieldTypeBlacklist.indexOf(this.model.get('type'))) {\n\t\t\t\t\tthis.previewLabel.show( new previewLabelView( { model: this.model, itemView: this } ) );\n\t\t\t\t}\n\n\t\t\t\tjQuery( this.el ).find('.nf-placeholder-label').hide();\n\t\t\t}\n\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( this.el ).on( 'taphold', function( e, touch ) {\n\t\t\t\t\tif ( ! jQuery( e.target ).hasClass( 'nf-edit-settings' ) ) {\n\t\t\t\t\t\tjQuery( this ).addClass( 'ui-sortable-helper drag-selected' );\n\t\t\t\t\t\tjQuery( this ).ClassyWiggle( 'start', { degrees: ['.65', '1', '.65', '0', '-.65', '-1', '-.65', '0'], delay: 50 } );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'fields-' + type ).trigger( 'render:itemView', this );\n\t\t},\n\n\t\ttemplateHelpers: function () {\n\t    \treturn {\n\t    \t\trenderClasses: function() {\n\t    \t\t\tvar classes = 'nf-field-wrap ' + this.type;\n\t    \t\t\tif ( this.editActive ) {\n\t    \t\t\t\tclasses += ' active';\n\t    \t\t\t}\n\t    \t\t\treturn classes;\n\t    \t\t},\n\t\t\t\tmaybeFilterHTML: function()  {\n\t\t\t\t\treturn typeof nfAdmin.filter_esc_status !== \"undefined\" ? nfAdmin.filter_esc_status : \"false\";\n\t\t\t\t},\n\t    \t\trenderRequired: function() {\n\t    \t\t\tif ( 1 == this.required ) {\n\t    \t\t\t\treturn '<span class=\"required\">*</span>';\n\t    \t\t\t} else {\n\t    \t\t\t\treturn '';\n\t    \t\t\t}\n\t    \t\t},\n\t    \t\tgetFieldID: function() {\n\t\t\t\t\tif ( jQuery.isNumeric( this.id ) ) {\n\t\t\t\t\t\treturn 'field-' + this.id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this.id;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\trenderIcon: function() {\n\t    \t\t\tvar type, icon;\n\n\t\t\t\t\ttype = nfRadio.channel( 'fields' ).request( 'get:type', this.type );\n\n\t\t\t\t\ticon = document.createElement( 'span' );\n\t\t\t\t\ticon.classList.add( 'fa', 'fa-' + type.get( 'icon' ) );\n\n\t\t\t\t\treturn icon.outerHTML;\n\t\t\t\t},\n\t\t\t\tlabelPosition: function() {\n\t\t\t\t\treturn this.label_pos;\n\t\t\t\t},\n\t\t\t\trenderDescriptionText: function() {\n\t\t\t\t\treturn jQuery.trim(this.desc_text);\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\tevents: {\n\t\t\t'mouseover .nf-item-control': 'mouseoverItemControl',\n\t\t\t'mousedown': 'maybeShortcut',\n\t\t\t'click': 'maybeClickEdit',\n\t\t\t'singletap': 'maybeTapEdit',\n\t\t\t'swipeleft': 'swipeLeft',\n\t\t\t'swiperight': 'swipeRight',\n\t\t\t'tapend': 'tapend'\n\t\t},\n\n\t\tmaybeClickEdit: function( e ) {\n\t\t\tif ( this.doingShortcut ) {\n\t\t\t\tthis.doingShortcut = false;\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif ( ( jQuery( e.target ).parent().hasClass( 'nf-fields-sortable' ) || jQuery( e.target ).parent().hasClass( 'nf-field-wrap' ) || jQuery( e.target ).hasClass( 'nf-field-wrap' ) ) && ! nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( ':focus' ).blur();\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\tmaybeShortcut: function( e ) {\n\t\t\tvar keys = nfRadio.channel( 'app' ).request( 'get:keydown' );\n\t\t\t/*\n\t\t\t * If the shift key isn't held down, return.\n\t\t\t */\n\t\t\tif ( -1 == keys.indexOf( 16 ) ) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t/*\n\t\t\t * If we are pressing D, delete this field.\n\t\t\t */\n\t\t\tif ( -1 != keys.indexOf( 68 ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:delete', e, this.model );\n\t\t\t\tthis.doingShortcut = true;\n\t\t\t\treturn false;\n\t\t\t} else if ( -1 != keys.indexOf( 67 ) ) {\n\t\t\t\tthis.doingShortcut = true;\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:duplicate', e, this.model );\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\n\t\tmaybeTapEdit: function( e ) {\n\t\t\tif ( jQuery( e.target ).parent().hasClass( 'nf-fields-sortable' ) ) {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', e, this.model );\n\t\t\t}\n\t\t},\n\n\t\tswipeLeft: function( e, touch ) {\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-duplicate' ).show();\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-delete' ).show();\n\t\t},\n\n\t\tswipeRight: function( e, touch ) {\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-duplicate' ).hide();\n\t\t\tjQuery( touch.startEvnt.target ).closest( 'div' ).find( '.nf-item-delete' ).hide();\n\t\t},\n\n\t\ttapend: function( e, touch ) {\n\t\t\tjQuery( this.el ).ClassyWiggle( 'stop' );\n\t\t\tjQuery( this.el ).removeClass( 'ui-sortable-helper drag-selected' );\n\t\t},\n\n\t\tremove: function(){\n\t\t\tif ( nfRadio.channel( 'fields' ).request( 'get:removing' ) ) {\n\t\t\t\tthis.$el.hide( 'clip', function(){\n\t\t\t\t\tjQuery( this ).remove();\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis.$el.remove();\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'fields' ).request( 'set:removing', false );\n\t\t},\n\n\t\tmouseoverItemControl: function( e ) {\n\t\t\tjQuery( this.el ).find( '.nf-item-control' ).css( 'display', '' );\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n","/**\n * Handles all the actions/functions related to our main field sortable.\n * All of the actual logic for our sortable is held here; the view just calls it using nfRadio.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/sortable',['models/fields/fieldModel', 'views/fields/fieldItem'], function(FieldModel, FieldItemView) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// When our field type buttons are dragged, we need to add or remove the active (blue) class.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:type', this.addActiveClass );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:type', this.removeActiveClass );\n\t\t\t// When our field staging is dragged, we need to add or remove the active (blue) class.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'startDrag:fieldStaging', this.addActiveClass );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addField' ), 'stopDrag:fieldStaging', this.removeActiveClass );\n\t\t\t\n\t\t\t/*\n\t\t\t * Handles all the events fired by our sortable:\n\t\t\t * receive - dropped from type button or staging\n\t\t\t * over - dragging within or over the sortable\n\t\t\t * out - leaving the sortable\n\t\t\t * stop - stopped sorting/dragging\n\t\t\t * start - started sorting/dragging\n\t\t\t * update - stopped sorting/dragging and order has changed\n\t\t\t */\n\t\t\tnfRadio.channel( 'app' ).reply( 'receive:fieldsSortable', this.receiveFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'over:fieldsSortable', this.overfieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'out:fieldsSortable', this.outFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'stop:fieldsSortable', this.stopFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'start:fieldsSortable', this.startFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'update:fieldsSortable', this.updateFieldsSortable, this );\n\t\t\tnfRadio.channel( 'app' ).reply( 'receive:repeaterField', this.receiveRepeaterField, this );\n\t\t},\n\n\t\t/**\n\t\t * Add the active class to our sortable so that its border is blue.\n\t\t * \n\t\t * @since 3.0\n\t\t * @return void\n\t\t */\n\t\taddActiveClass: function() {\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-active' );\t\n\t\t},\n\n\t\t/**\n\t\t * Remove the active class from our sortable\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tremoveActiveClass: function() {\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-active' );\n\t\t},\n\n\t\t/**\n\t\t * Fires when we drop a field type button or staging onto our sortable\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\treceiveFieldsSortable: function( ui ) {\n\t\t\t//Check for fields coming from a repeater field\n\t\t\tui = this.receiveRepeaterField(ui);\n\t\t\t/*\n\t\t\t * We have to do different things if we're dealing with a field type button or staging area.\n\t\t\t */ \n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type Button\n\t\t\t\t// Get our type string\n\t\t\t\tvar type = jQuery( ui.item ).data( 'id' );\n\t\t\t\t// Add a field (returns the tmp ID )\n\t\t\t\tvar tmpID = this.addField( type, false );\n\t\t\t\t/*\n\t\t\t\t * Update our helper id to the tmpID.\n\t\t\t\t * We do this so that when we sort, we have the proper ID.\n\t\t\t\t */ \n\t\t\t\tjQuery( ui.helper ).prop( 'id', tmpID );\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields' );\n\t\t\t\t// Remove the helper. Gets rid of a weird type artifact.\n\t\t\t\tjQuery( ui.helper ).remove();\n\t\t\t\t// Trigger a drop field type event.\n\t\t\t\tnfRadio.channel( 'fields' ).trigger( 'drop:fieldType', type, tmpID );\n\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\n\t\t\t\t// Later, we want to reference 'this' context, so we define it here.\n\t\t\t\tvar that = this;\n\t\t\t\t// Make sure that our staged fields are sorted properly.\t\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\n\t\t\t\t// Grab our staged fields.\n\t\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\n\t\t\t\t// Get our current field order.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\t\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) { // Sortable isn't empty\n\t\t\t\t\t// If we're dealing with a sortable that isn't empty, get the order.\n\t\t\t\t\tvar order = jQuery( sortableEl ).sortable( 'toArray' );\n\t\t\t\t} else { // Sortable is empty\n\t\t\t\t\t// Sortable is empty, all we care about is our staged field draggable.\n\t\t\t\t\tvar order = ['nf-staged-fields-drag'];\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Get the index of our droped element.\n\t\t\t\tvar insertedAt = order.indexOf( 'nf-staged-fields-drag' );\n\n\t\t\t\t// Loop through each staged fields model and insert a field.\n\t\t\t\tvar tmpIDs = [];\n\t\t\t\t_.each( stagedFields.models, function( field, index ) {\n\t\t\t\t\t// Add our field.\n\t\t\t\t\tvar tmpID = that.addField( field.get( 'slug' ) );\n\t\t\t\t\t// Add this newly created field to our order array.\n\t\t\t\t\torder.splice( insertedAt + index, 0, tmpID );\n\t\t\t\t} );\n\n\t\t\t\t// Remove our dropped element from our order array.\n\t\t\t\tvar insertedAt = order.indexOf( 'nf-staged-fields-drag' );\n\t\t\t\torder.splice( insertedAt, 1 );\n\t\t\t\t// Sort our fields\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields', order );\n\t\t\t\t// Clear our staging\n\t\t\t\tnfRadio.channel( 'fields' ).request( 'clear:staging' );\n\t\t\t\t// Remove our helper. Fixes a weird artifact.\n\t\t\t\tjQuery( ui.helper ).remove();\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add a field.\n\t\t * Builds the object necessary to add a field to the field model collection.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string \ttype   field type\n\t\t * @param  boolean \tsilent add silently\n\t\t * @return string \ttmpID\n\t\t */\n\t\taddField: function( type, silent ) {\n\t\t\t// Default to false\n\t\t\tsilent = silent || false;\n\t\t\t// Get our field type model\n\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type ); \n\t\t\t// Get our tmp ID\n\t\t\tvar tmpID = nfRadio.channel( 'fields' ).request( 'get:tmpID' );\n\t\t\t// Add our field\n\t\t\tvar newModel = nfRadio.channel( 'fields' ).request( 'add',  { id: tmpID, label: fieldType.get( 'nicename' ), type: type }, silent );\n\t\t\t// Add our field addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: 'Field',\n\t\t\t\tlabel: newModel.get( 'label' ),\n\t\t\t\tchange: 'Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: nfRadio.channel( 'fields' ).request( 'get:collection' )\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\n\n\t\t\treturn tmpID;\n\t\t},\n\n\t\t/**\n\t\t * When the user drags a field type or staging over our sortable, we need to modify the helper.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\toverfieldsSortable: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type\n\t\t\t\t// String type\n\t\t\t\tvar type = jQuery( ui.helper ).data( 'id' );\n\t\t\t\t// Get our field type model.\n\t\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\t\t\t\t// Get our field type nicename.\n\t\t\t\tvar label = fieldType.get( 'nicename' );\n\t\t\t\t// Get our sortable element.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\t// Get our fieldwidth.\n\t\t\t\tvar fieldWidth = jQuery( sortableEl ).width();\n\t\t\t\t// Set our currentHelper to an object var so that we can access it later.\n\t\t\t\tthis.currentHelper = ui.helper;\n\n\t\t\t\t// Render a fieldItemView using a mock fieldModel.\n\t\t\t\tvar fieldModel = new FieldModel({ label: fieldType.get( 'nicename' ), type: type });\n\t\t\t\tvar fieldItemView = new FieldItemView({model:fieldModel});\n\t\t\t\tvar renderedFieldItemView = fieldItemView.render();\n\t\t\t\tvar fieldTypeEl = renderedFieldItemView.$el[0];\n\t\t\t\tjQuery( ui.helper ).html( fieldTypeEl.outerHTML );\n\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\n\t\t\t\t// Get our sortable, and if it's initialized add our hover class.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When the user moves a draggable outside of the sortable, we need to change the helper.\n\t\t * This returns the item to its pre-over state.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\toutFieldsSortable: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type\n\t\t\t\t/*\n\t\t\t\t * Get our helper clone.\n\t\t\t\t * This will let us access the previous label and classes of our helper.\n\t\t\t\t */ \n\t\t\t\tvar helperClone = nfRadio.channel( 'drawer-addField' ).request( 'get:typeHelperClone' );\n\t\t\t\t// Set our helper label, remove our sortable class, and add the type class back to the type draggable.\n\t\t\t\tjQuery( this.currentHelper ).html( jQuery( helperClone ).html() );\n\t\t\t\tjQuery( this.currentHelper ).removeClass( 'nf-field-wrap' ).addClass( 'nf-field-type-button' ).css( { 'width': '', 'height': '' } );\n\t\t\t\t// Get our sortable and if it has been intialized, remove the droppable hover class.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\n\t\t\t\t// If we've initialized our sortable, remove the droppable hover class.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging in the sortable:\n\t\t * remove our opacity setting\n\t\t * remove our ui helper\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopFieldsSortable: function( ui ) {\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\n\t\t\tjQuery( ui.helper ).remove();\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'sortable:stop', ui );\n\t\t},\n\n\t\t/**\n\t\t * When we start dragging in the sortable:\n\t\t * add an opacity setting of 0.5\n\t\t * show our item (jQuery hides the original item by default)\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartFieldsSortable: function( ui ) {\n\t\t\t// If we aren't dragging an item in from types or staging, update our change log.\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) && ! jQuery( ui.item ).hasClass( 'nf-stage' ) ) { \n\t\t\t\t\n\t\t\t\t// Maintain origional visibility during drag/sort.\n\t\t\t\tjQuery( ui.item ).show();\n\n\t\t\t\t// Determine helper based on builder/layout type.\n\t\t\t\tif(jQuery(ui.item).hasClass('nf-field-wrap')){\n\t\t\t\t\tvar newHelper = jQuery(ui.item).clone();\n\t\t\t\t} else if(jQuery(ui.item).parent().hasClass('layouts-cell')) {\n\t\t\t\t\tvar newHelper = $parentHelper.clone();\n\t\t\t\t} else {\n\t\t\t\t\tvar newHelper = jQuery(ui.item).clone();\n\t\t\t\t}\n\n\t\t\t\t// Remove unecessary item controls from helper.\n\t\t\t\tnewHelper.find('.nf-item-controls').remove();\n\n\t\t\t\t// Update helper with clone's content.\n\t\t\t\tjQuery( ui.helper ).html( newHelper.html() );\n\n\t\t\t\tjQuery( ui.helper ).css( 'opacity', '0.5' );\n\t\t\t\t\n\t\t\t\t// Add de-emphasize origional.\n\t\t\t\tjQuery( ui.item ).css( 'opacity', '0.25' );\n\t\t\t}\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'sortable:start', ui );\n\t\t},\n\n\t\t/**\n\t\t * Sort our fields when we change the order.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tupdateFieldsSortable: function( ui, sortable ) {\n\t\t\t\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields' );\n\n\t\t\t// If we aren't dragging an item in from types or staging, update our change log.\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) && ! jQuery( ui.item ).hasClass( 'nf-stage' ) ) { \n\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\tvar dragFieldID = jQuery( ui.item ).prop( 'id' ).replace( 'field-', '' );\n\t\t\t\tvar dragModel = fieldCollection.get( dragFieldID );\n\n\t\t\t\t// Add our change event to the change tracker.\n\t\t\t\tvar data = { fields: [] };\n\t\t\t\t_.each( fieldCollection.models, function( field ) {\n\t\t\t\t\tvar oldPos = field._previousAttributes.order;\n\t\t\t\t\tvar newPos = field.get( 'order' );\n\t\t\t\t\t\n\t\t\t\t\tdata.fields.push( {\n\t\t\t\t\t\tmodel: field,\n\t\t\t\t\t\tattr: 'order',\n\t\t\t\t\t\tbefore: oldPos,\n\t\t\t\t\t\tafter: newPos\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t\tvar label = {\n\t\t\t\t\tobject: 'Field',\n\t\t\t\t\tlabel: dragModel.get( 'label' ),\n\t\t\t\t\tchange: 'Re-ordered from ' + dragModel._previousAttributes.order + ' to ' + dragModel.get( 'order' ),\n\t\t\t\t\tdashicon: 'sort'\n\t\t\t\t};\n\n\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'sortFields', dragModel, null, label, data );\n\t\t\t}\n\n\t\t},\n\n\t\treceiveRepeaterField: function( ui ){\n\t\t\t//If the field was already saved as a Repeater child field we'll delete it and create a new one for the main collection\n\t\t\tif( String( jQuery( ui.item ).data('id') ).indexOf('.') !== -1){\n\t\t\t\tjQuery( ui.item ).removeClass('nf-field-wrap');\n\t\t\t\tlet type = jQuery( ui.item ).attr('class');\n\t\t\t\tjQuery( ui.item ).data('id', type);\n\t\t\t\tjQuery( ui.item ).addClass('nf-field-type-draggable');\n\t\t\t}\n\n\t\t\treturn ui;\n\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles interactions with our field collection.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/data',['models/fields/fieldCollection', 'models/fields/fieldModel'], function( fieldCollection, fieldModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tadding: false,\n\t\tremoving: false,\n\t\t\n\t\tinitialize: function() {\n\t\t\t// Load our field collection from our localized form data\n\t\t\tthis.collection = new fieldCollection( preloadedFormData.fields );\n\t\t\t// Set our removedIDs to an empty object. This will be populated when a field is removed so that we can add it to our 'deleted_fields' object.\n\t\t\tthis.collection.removedIDs = {};\n\n\t\t\t// Respond to requests for data about fields and to update/change/delete fields from our collection.\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:collection', this.getFieldCollection, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:field', this.getField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'redraw:collection', this.redrawFieldCollection, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:tmpID', this.getTmpFieldID, this );\n\n\t\t\tnfRadio.channel( 'fields' ).reply( 'add', this.addField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'delete', this.deleteField, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'sort:fields', this.sortFields, this );\n\n\t\t\t/*\n\t\t\t * Respond to requests to set our 'adding' and 'removing' state. This state is used to track whether or not\n\t\t\t * we should run animations in our fields collection.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:adding', this.getAdding, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'set:adding', this.setAdding, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:removing', this.getRemoving, this );\n\t\t\tnfRadio.channel( 'fields' ).reply( 'set:removing', this.setRemoving, this );\n\t\t},\n\n\t\tgetFieldCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tredrawFieldCollection: function() {\n\t\t\tthis.collection.trigger( 'reset', this.collection );\n\t\t},\n\n\t\tgetField: function( id ) {\n\t\t\tif ( this.collection.findWhere( { key: id } ) ) {\n\t\t\t\t/*\n\t\t\t\t * First we check to see if a key matches what we were sent.\n\t\t\t\t */\t\t\t\t\n\t\t\t\treturn this.collection.findWhere( { key: id } );\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * If it doesn't, we try to return an ID that matches.\n\t\t\t\t */\n\t\t\t\treturn this.collection.get( id );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Add a field to our collection. If silent is passed as true, no events will trigger.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param Object \tdata \t\t\tfield data to insert\n\t\t * @param bool \t\tsilent \t\t\tprevent events from firing as a result of adding\n\t\t * @param bool  \trenderTrigger\tshould this cause the view to re-render?\n\t\t * @param string  \taction\t\t\taction context - are we performing a higher level action? i.e. duplicate\n\t\t */\n\t\taddField: function( data, silent, renderTrigger, action ) {\n\n\t\t\t/*\n\t\t\t * Set our fields 'adding' value to true. This enables our add field animation.\n\t\t\t */\n\t\t\tnfRadio.channel( 'fields' ).request( 'set:adding', true );\n\n\t\t\tsilent = silent || false;\n\t\t\taction = action || '';\n\t\t\trenderTrigger = ( 'undefined' == typeof renderTrigger ) ? true : renderTrigger;\n\n\t\t\tif ( false === data instanceof Backbone.Model ) {\n\t\t\t\tif ( 'undefined' == typeof ( data.id ) ) {\n\t\t\t\t\tdata.id = this.getTmpFieldID();\n\t\t\t\t}\n\t\t\t\tvar model = new fieldModel( data );\n\t\t\t} else {\n\t\t\t\tvar model = data;\n\t\t\t}\n\n\t\t\t/*\n\t\t\t * TODO: Add an nfRadio message filter for the model variable.\n\t\t\t * Currently, we manually replace for saved fields; this should be moved to a separate controller.\n\t\t\t * \n\t\t\t * If we're adding a saved field, make sure that we set the type to the parentType.\n\t\t\t */\n\n\t\t\tif ( jQuery.isNumeric( model.get( 'type' ) ) ) {\n\t\t\t\tvar savedType = nfRadio.channel( 'fields' ).request( 'get:type', model.get( 'type' ) );\n\t\t\t\tmodel.set( 'type', savedType.get( 'parentType' ) );\n\t\t\t}\n\n\t\t\tvar newModel = this.collection.add( model, { silent: silent } );\n\t\t\t\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'add:field', model );\n\t\t\tif ( renderTrigger ) {\n\t\t\t\tnfRadio.channel( 'fields' ).trigger( 'render:newField', newModel, action );\n\t\t\t}\n\t\t\tif( 'duplicate' == action ){\n                nfRadio.channel( 'fields' ).trigger( 'render:duplicateField', newModel, action );\n\t\t\t}\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'after:addField', model );\n\t\t\t\n\t\t\treturn model;\n\t\t},\n\n\t\t/**\n\t\t * Update a field setting by ID\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  int \t\tid    field id\n\t\t * @param  string \tname  setting name\n\t\t * @param  mixed \tvalue setting value\n\t\t * @return void\n\t\t */\n\t\tupdateFieldSetting: function( id, name, value ) {\n\t\t\tvar fieldModel = this.collection.get( id );\n\t\t\tfieldModel.set( name, value );\n\t\t},\n\n\t\t/**\n\t\t * Get our fields sortable EL\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Array \torder optional order array like: [field-1, field-4, field-2]\n\t\t * @return void\n\t\t */\n\t\tsortFields: function( order, ui, updateDB ) {\n\t\t\tif ( null == updateDB ) {\n\t\t\t\tupdateDB = true;\n\t\t\t}\n\t\t\t// Get our sortable element\n\t\t\tvar sortableEl = nfRadio.channel( 'fields' ).request( 'get:sortableEl' );\n\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) { // Make sure that sortable is enabled\n\t\t\t\t// JS ternerary for setting our order\n\t\t\t\tvar order = order || jQuery( sortableEl ).sortable( 'toArray' );\n\n\t\t\t\t// Loop through all of our fields and update their order value\n\t\t\t\t_.each( this.collection.models, function( field ) {\n\t\t\t\t\t// Get our current position.\n\t\t\t\t\tvar oldPos = field.get( 'order' );\n\t\t\t\t\tvar id = field.get( 'id' );\n\t\t\t\t\tif ( jQuery.isNumeric( id ) ) {\n\t\t\t\t\t\tvar search = 'field-' + id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar search = id;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Get the index of our field inside our order array\n\t\t\t\t\tvar newPos = order.indexOf( search ) + 1;\n\t\t\t\t\tfield.set( 'order', newPos );\n\t\t\t\t} );\n\t\t\t\tthis.collection.sort();\n\n\t\t\t\tif ( updateDB ) {\n\t\t\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\t\t\t// Update our preview\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Delete a field from our collection.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \tfield model to be deleted\n\t\t * @return void\n\t\t */\n\t\tdeleteField: function( model ) {\n\t\t\tnfRadio.channel( 'fields' ).trigger( 'delete:field', model );\n\t\t\tthis.removing = true;\n\t\t\tthis.collection.remove( model );\n\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t},\n\n\t\t/**\n\t\t * Return a new tmp id for our fields.\n\t\t * Gets the field collection length, adds 1, then returns that prepended with 'tmp-'.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return string\n\t\t */\n\t\tgetTmpFieldID: function() {\n\t\t\tvar tmpNum = this.collection.tmpNum;\n\t\t\tthis.collection.tmpNum++;\n\t\t\treturn 'tmp-' + tmpNum;\n\t\t},\n\n\t\tgetAdding: function() {\n\t\t\treturn this.adding;\n\t\t},\n\n\t\tsetAdding: function( val ) {\n\t\t\tthis.adding = val;\n\t\t},\n\n\t\tgetRemoving: function() {\n\t\t\treturn this.removing;\n\t\t},\n\n\t\tsetRemoving: function( val ) {\n\t\t\tthis.removing = val;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model for our repeater option.\n * \n * @package Ninja App builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/optionRepeaterModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\terrors: {},\n            max_options: 0,\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// When we add errors to the option row, run a function.\n\t\t\tthis.on( 'change:errors', this.changeErrors, this );\n\t\t},\n\n\t\t/**\n\t\t * When we change the errors on our model, check to see if we should add or remove \n\t\t * the error from the setting that this option is a part of.\n\t\t *\n\t\t * Adding an error to the setting model simply disables the drawer and other\n\t\t * navigation. As long as we have one option with an error, it should be set to true.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeErrors: function( model ) {\n\t\t\t/*\n\t\t\t * The errors attribute will be an object, so if we don't have any keys, it's empty.\n\t\t\t * If we have an empty object, check to see if we can remove the error from our setting model.\n\t\t\t */\n\n\t\t\tif ( 0 == _.size( model.get( 'errors' ) ) ) {\n\t\t\t\t/*\n\t\t\t\t * Loop through our collection to see if we have any other errors.\n\t\t\t\t */\n\t\t\t\tvar errorsFound = false;\n\t\t\t\t_.each( model.collection.models, function( opt ) {\n\t\t\t\t\tif ( 0 != _.size( opt.get( 'errors' ) ) ) {\n\t\t\t\t\t\terrorsFound = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\tif ( ! errorsFound ) {\n\t\t\t\t\tmodel.collection.settingModel.set( 'error', false );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * We have errors, so make sure that the setting model has an error set.\n\t\t\t\t */\n\t\t\t\tmodel.collection.settingModel.set( 'error', true );\n\t\t\t}\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Model that represents our list options.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/app/optionRepeaterCollection',['models/app/optionRepeaterModel'], function( listOptionModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: listOptionModel,\n\t\tcomparator: function( model ){\n\t\t\treturn parseInt( model.get( 'order' ) );\n\t\t},\n\n\t\tinitialize: function( models, options ) {\n\t\t\t// Listen to the 'sort' event\n\t\t\tthis.on( 'sort', this.changeCollection, this );\n\t\t\t// Listen to the 'add' event\n\t\t\tthis.on( 'add', this.addOption, this );\n\t\t\tthis.settingModel = options.settingModel;\n\t\t},\n\n\t\tchangeCollection: function() {\n\t\t\t// Trigger a 'sort:options' event so that our field model can update\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'sort:options', this );\n\n\t\t\tif ('undefined' !== typeof this.settingModel ) {\n\t\t\t\tnfRadio.channel('option-repeater-' + this.settingModel.get('name')).trigger('sort:options', this);\n\t\t\t}\n\t\t},\n\n\t\taddOption: function( model, collection ) {\n\t\t\tmodel.set( 'settingModel', this.settingModel );\n\t\t}\n\t} );\n\treturn collection;\n} );\n","define( 'views/app/drawer/optionRepeaterError',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\tclassName: 'nf-error',\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-error',\n\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t\t\treturn {\n\t\t\t\trenderErrors: function() {\n\t\t\t\t    if ( 'undefined' != typeof that.errors ) {\n    \t\t\t\t\treturn that.errors[ Object.keys( errors )[0] ];\n \t\t\t\t\t} else {\n \t\t\t\t\t\treturn '';\n \t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t});\n\n\treturn view;\n} );\n","define( 'views/app/drawer/optionRepeaterOption',['views/app/drawer/optionRepeaterError'], function( ErrorView ) {\n    var view = Marionette.LayoutView.extend({\n        tagName: 'div',\n        className: 'nf-table-row',\n        template: '#tmpl-nf-edit-setting-option-repeater-default-row',\n        id: function() {\n            return this.model.cid;\n        },\n\n        regions: {\n            error: '.nf-option-error'\n        },\n\n        initialize: function( data ) {\n            this.settingModel = data.settingModel;\n            this.dataModel = data.dataModel;\n            this.collection = data.collection;\n            this.columns = data.columns;\n            this.parentView = data.parentView;\n            this.model.on( 'change:errors', this.renderErrors, this );\n\n            // Removed because the re-render was breaking tag insertion for merge tags.\n            // this.model.on( 'change', this.render, this );\n\n            if ( 'undefined' != typeof this.settingModel.get( 'tmpl_row' ) ) {\n                this.template = '#' + this.settingModel.get( 'tmpl_row' );\n            }\n\n            this.hasErrors = false;\n        },\n\n        onBeforeDestroy: function() {    \n            this.model.off( 'change', this.render );\n            this.model.off( 'change:errors', this.renderErrors );\n        },\n\n        onBeforeRender: function() {\n            /*\n             * We want to escape any HTML being output for our label.\n             */\n            if ( this.model.get( 'label' ) ) {\n                var label = this.model.get( 'label' );\n                this.model.set( 'label', _.escape( label ), { silent: true } );\n            }\n            \n        },\n\n        onRender: function() {\n            nfRadio.channel( 'mergeTags' ).request( 'init', this );\n            /*\n             * Send out a radio message.\n             */\n            nfRadio.channel( 'setting-' + this.settingModel.get( 'name' ) + '-option' ).trigger( 'render:setting', this.model, this.dataModel, this );\n            /*\n             * We want to unescape any HTML being output for our label.\n             */\n            if ( this.model.get( 'label' ) ) {\n                var label = this.model.get( 'label' );\n                this.model.set( 'label', _.unescape( label ), { silent: true } );\n            }\n        },\n\n        onShow: function() {\n            if ( this.model.get( 'new' ) ) {\n                jQuery( this.el ).find( 'input:first' ).focus();\n                this.model.set( 'new', false );\n            }\n        },\n\n        events: {\n            'change .setting': 'changeOption',\n            'click .nf-delete': 'deleteOption',\n            'keyup': 'keyupOption'\n        },\n\n        changeOption: function( e ) {\n            nfRadio.channel( 'option-repeater' ).trigger( 'change:option', e, this.model, this.dataModel, this.settingModel, this );\n        },\n\n        deleteOption: function( e ) {\n            nfRadio.channel( 'option-repeater' ).trigger( 'click:deleteOption', this.model, this.collection, this.dataModel, this );\n        },\n\n        keyupOption: function( e ) {\n            this.maybeAddOption( e );\n            nfRadio.channel( 'option-repeater' ).trigger( 'keyup:option', e, this.model, this.dataModel, this.settingModel, this )\n            nfRadio.channel( 'option-repeater-' + this.settingModel.get( 'name' ) ).trigger( 'keyup:option', e, this.model, this.dataModel, this.settingModel, this )\n        },\n\n        maybeAddOption: function( e ) {\n            if ( 13 == e.keyCode && 'calculations' != this.settingModel.get( 'name' ) ) {\n                nfRadio.channel( 'option-repeater' ).trigger( 'click:addOption', this.collection, this.dataModel, this );\n                jQuery( this.parentView.children.findByIndex(this.parentView.children.length - 1).el ).find( '[data-id=\"label\"]' ).focus();\n            }\n        },\n\n        renderErrors: function() {\n            \n            // if ( jQuery.isEmptyObject( this.model.get( 'errors' ) ) ) {\n            //     return false;\n            // }\n\n            /*\n             * We don't want to redraw the entire row, which would remove focus from the eq textarea,\n             * so we add and remove error classes manually.\n             */\n            if ( 0 == Object.keys( this.model.get( 'errors' ) ) ) {\n                if ( this.hasErrors ) {\n                    this.error.empty();\n                    jQuery( this.el ).removeClass( 'nf-error' );\n                }\n            } else {\n                this.hasErrors = true;\n                this.error.show( new ErrorView( { model: this.model } ) );\n                jQuery( this.el ).addClass( 'nf-error' );\n            }\n        },\n\n        templateHelpers: function() {\n            var that = this;\n            return {\n                getColumns: function() {\n                    var columns = that.columns;\n                    if(!nfAdmin.devMode){\n                        delete columns.value;\n                    }\n                    return columns;\n                },\n                renderFieldSelect: function( dataID, value ){\n                    var initialOption, select, emptyContainer, label;\n\n                    var fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\n                    initialOption = document.createElement( 'option' );\n                    initialOption.value = '';\n                    initialOption.label = '--';\n                    initialOption.innerHTML = '--';\n\n                    select = document.createElement( 'select' );\n                    select.classList.add( 'setting' );\n                    select.setAttribute( 'data-id', dataID );\n                    select.appendChild( initialOption );\n\n                    fields.each( function( field ){\n                        var option = document.createElement( 'option' );\n                        if ( value == field.get( 'key' ) ) {\n                            option.setAttribute( 'selected', 'selected' );\n                        }\n                        option.value = field.get( 'key' );\n                        option.innerHTML = field.formatLabel();\n                        option.label = field.formatLabel();\n                        select.appendChild( option );\n                    });\n\n                    label = document.createElement( 'label' );\n                    label.classList.add( 'nf-select' );\n                    label.appendChild( select );\n\n                    // Select Lists need an empty '<div></div>' for styling purposes.\n                    emptyContainer = document.createElement( 'div' );\n                    emptyContainer.style.bottom = '6px';\n                    label.appendChild( emptyContainer );\n\n                    // The template requires a string.\n                    return label.innerHTML;\n                },\n                renderNonSaveFieldSelect: function( dataID, value ){\n                    var initialOption, select, emptyContainer, label;\n\n                    var fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\n                    initialOption = document.createElement( 'option' );\n                    initialOption.value = '';\n                    initialOption.label = '--';\n                    initialOption.innerHTML = '--';\n\n                    select = document.createElement( 'select' );\n                    select.classList.add( 'setting' );\n                    select.setAttribute( 'data-id', dataID );\n                    select.appendChild( initialOption );\n\n                    // Build a lookup table for fields we want to remove from our fields list.\n                    var removeFieldsLookup = [ 'html', 'submit', 'hr',\n                        'recaptcha', 'spam', 'creditcard', 'creditcardcvc',\n                        'creditcardexpiration', 'creditcardfullname',\n                        'creditcardnumber', 'creditcardzip' ];\n\n                    fields.each( function( field ){\n                        // Check for the field type in our lookup array and...\n                        if( jQuery.inArray( field.get( 'type' ), removeFieldsLookup ) !== -1 ) {\n                            // Return if the type is in our lookup array.\n                            return '';\n                        }\n\n                        var option = document.createElement( 'option' );\n                        if ( value == field.get( 'key' ) ) {\n                            option.setAttribute( 'selected', 'selected' );\n                        }\n                        option.value = field.get( 'key' );\n                        option.innerHTML = field.formatLabel();\n                        option.label = field.formatLabel();\n                        select.appendChild( option );\n                    });\n\n                    label = document.createElement( 'label' );\n                    label.classList.add( 'nf-select' );\n                    label.appendChild( select );\n\n                    // Select Lists need an empty '<div></div>' for styling purposes.\n                    emptyContainer = document.createElement( 'div' );\n                    emptyContainer.style.bottom = '6px';\n                    label.appendChild( emptyContainer );\n\n                    // The template requires a string.\n                    return label.innerHTML;\n                },\n                renderOptions: function( column, value ) {\n\n                    if( 'undefined' == typeof that.options.columns[ column ] ) return;\n\n                    var select = document.createElement( 'select' );\n                    \n                    _.each( that.options.columns[ column ].options, function( option ){\n                        var optionNode = document.createElement( 'option' );\n                        if ( value === option.value ) {\n                            optionNode.setAttribute( 'selected', 'selected' );\n                        }\n                        optionNode.setAttribute( 'value', option.value );\n                        optionNode.setAttribute( 'label', option.label );\n                        optionNode.innerText = option.label;\n                        select.appendChild( optionNode );\n                    });\n\n                    // The template only needs the options.\n                    return select.innerHTML;\n                }\n\n            }\n        }\n\n    });\n\n    return view;\n} );\n\n","define( 'views/app/drawer/optionRepeaterEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'tr',\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-empty'\n\t});\n\n\treturn view;\n} );\n","define( 'views/app/drawer/optionRepeaterComposite',['views/app/drawer/optionRepeaterOption', 'views/app/drawer/optionRepeaterEmpty', 'models/app/optionRepeaterCollection'], function( listOptionView, listEmptyView, listOptionCollection ) {\n\tvar view = Marionette.CompositeView.extend( {\n\t\ttemplate: '#tmpl-nf-edit-setting-option-repeater-wrap',\n\t\tchildView: listOptionView,\n\t\temptyView: listEmptyView,\n\t\treorderOnSort: false,\n\n\t\tinitialize: function( data ) {\n\n\t\t\t/*\n\t\t\t * Our options are stored in our database as objects, not collections.\n\t\t\t * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\n\t\t\t */ \n\t\t\tvar optionCollection = data.dataModel.get( this.model.get( 'name' ) );\n\n\t\t\tif ( false == optionCollection instanceof Backbone.Collection ) {\n\t\t\t\toptionCollection = new listOptionCollection( [], { settingModel: this.model } );\n\t\t\t\toptionCollection.add( data.dataModel.get( this.model.get( 'name' ) ) );\n\t\t\t\tdata.dataModel.set( this.model.get( 'name' ), optionCollection, { silent: true } );\n\t\t\t}\n\n\t\t\tthis.collection = optionCollection;\n\t\t\tthis.dataModel = data.dataModel;\n\t\t\tthis.childViewOptions = { parentView: this, settingModel: this.model, collection: this.collection, dataModel: data.dataModel, columns: this.model.get( 'columns' ) };\n\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\t// If we don't have a 'settings' property, this is a legacy depdency setup.\n\t\t\t\tif ( 'undefined' == typeof deps.settings ) {\n\t\t\t\t\tdeps.settings = [];\n\t\t\t\t\t_.each(deps, function(dep, name){\n\t\t\t\t\t\tif( 'settings' !== name ) {\n\t\t\t\t\t\t\tdeps.settings.push( { name: name, value: dep } );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tdeps.match = 'all';\n\t\t\t\t}\n\n\t\t\t\tfor (var i = deps.settings.length - 1; i >= 0; i--) {\n\t\t\t\t\tlet name = deps.settings[i].name;\n\t\t\t\t\tthis.dataModel.on( 'change:' + name, this.render, this );\n\t\t\t\t}\n\t\t\t}\n            this.listenTo( nfRadio.channel( 'option-repeater' ), 'added:option', this.maybeHideNew );\n            this.listenTo( nfRadio.channel( 'option-repeater' ), 'removed:option', this.maybeHideNew );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor (var i = deps.settings.length - 1; i >= 0; i--) {\n\t\t\t\t\tname = deps.settings[i].name;\n\t\t\t\t\tthis.dataModel.off( 'change:' + name, this.render );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tonRender: function() {\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\t\t\n\t\t\tvar that = this;\n\t\t\tjQuery( this.el ).find( '.nf-list-options-tbody' ).sortable( {\n\t\t\t\thandle: '.handle',\n\t\t\t\thelper: 'clone',\n\t\t\t\tplaceholder: 'nf-list-options-sortable-placeholder',\n\t\t\t\tforcePlaceholderSize: true,\n\t\t\t\topacity: 0.95,\n\t\t\t\ttolerance: 'pointer',\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'start:optionSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'stop:optionSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tupdate: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).request( 'update:optionSortable', ui, this, that );\n\t\t\t\t}\n\t\t\t} );\n\n            that.setupTooltip();\n            that.maybeHideNew( that.collection );\n\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t\n\t\t},\n\n\t\tonAttach: function() {\n            \n\t\t\tvar importLink = jQuery( this.el ).find( '.nf-open-import-tooltip' );\n\t\t\tvar jBox = jQuery( importLink ).jBox( 'Tooltip', {\n                title: '<h3>Please enter your options below:</h3>',\n                content: ( \"1\" == nfAdmin.devMode ? jQuery( this.el ).find( '.nf-dev-import-options' ) : jQuery( this.el ).find( '.nf-import-options' ) ),\n                trigger: 'click',\n                closeOnClick: 'body',\n                closeButton: 'box',\n                offset: { x: 20, y: 0 },\n                addClass: 'import-options',\n\n                onOpen: function() {\n                \tvar that = this;\n                \tsetTimeout( function() { jQuery( that.content ).find( 'textarea' ).focus(); }, 200 );\n                }\n            } );\n\n\t\t\tjQuery( this.el ).find( '.nf-import' ).on( 'click', { view: this, jBox: jBox }, this.clickImport );\n\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\n\t\t\tnfRadio.channel( 'setting-type-' + this.model.get( 'type' ) ).trigger( 'attach:setting', this.model, this.dataModel, this );\n\t\t},\n        \n        /**\n         * Function to append jBox modals to each tooltip element in the option repeater.\n         */\n        setupTooltip: function() {\n            // For each .nf-help in the option repeater...\n            jQuery( this.el ).find( '.nf-list-options' ).find( '.nf-help' ).each(function() {\n                // Get the content.\n                var content = jQuery(this).next('.nf-help-text');\n                // Declare the modal.\n                jQuery( this ).jBox( 'Tooltip', {\n                    content: content,\n                    maxWidth: 200,\n                    theme: 'TooltipBorder',\n                    trigger: 'click',\n                    closeOnClick: true\n                })\n            });\n        },\n\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\n\t    \treturn {\n\t    \t\trenderHeaders: function() {\n                    // If this is a Field...\n                    // AND If the type includes 'list'...\n                    if ( 'Field' == that.dataModel.get( 'objectType' ) && -1 !== that.dataModel.get( 'type' ).indexOf( 'list' ) ) {\n                        // Declare help text.\n                        var helpText, helpTextContainer, helpIcon, helpIconLink, helpTextWrapper;\n\n                        helpText = document.createTextNode( nfi18n.valueChars );\n                        helpTextContainer = document.createElement( 'div' );\n                        helpTextContainer.classList.add( 'nf-help-text' );\n                        helpTextContainer.appendChild( helpText );\n\n                        helpIcon = document.createElement( 'span' );\n                        helpIcon.classList.add( 'dashicons', 'dashicons-admin-comments' );\n                        helpIconLink = document.createElement( 'a' );\n                        helpIconLink.classList.add( 'nf-help' );\n                        helpIconLink.setAttribute( 'href', '#' );\n                        helpIconLink.setAttribute( 'tabindex', '-1' );\n                        helpIconLink.appendChild( helpIcon );\n\n                        helpTextWrapper = document.createElement( 'span' );\n                        helpTextWrapper.appendChild( helpIconLink );\n                        helpTextWrapper.appendChild( helpTextContainer );\n\n\t\t\t\t\t\t// Append the help text to the 'value' header.\n\t\t\t\t\t\tif('undefined' !== typeof that.model.get('columns') ){\n\t\t\t\t\t\t\tif('undefined' !== typeof that.model.get('columns').value ){\n\t\t\t\t\t\t\t\tif ( -1 == that.model.get('columns').value.header.indexOf( helpTextWrapper.innerHTML ) ) {\n\t\t\t\t\t\t\t\t\tthat.model.get('columns').value.header += helpTextWrapper.innerHTML;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n                    }\n\t    \t\t\tvar columns, beforeColumns, afterColumns;\n\n\t    \t\t\tbeforeColumns = document.createElement( 'div' );\n\n\t    \t\t\tcolumns = document.createElement( 'span' );\n\t    \t\t\tcolumns.appendChild( beforeColumns );\n\n\t\t\t\t\tif(!nfAdmin.devMode){\n\t\t\t\t\t\tdelete this.columns.value;\n\t\t\t\t\t}\n\n\t    \t\t\t_.each( this.columns, function( col ) {\n\t    \t\t\t\tvar headerText, headerContainer;\n\n\t    \t\t\t\t// Use a fragment to support HTML in the col.header property, ie Dashicons.\n                        headerText = document.createRange().createContextualFragment( col.header );\n\t    \t\t\t\theaderContainer = document.createElement( 'div' );\n\t    \t\t\t\theaderContainer.appendChild( headerText );\n\n\t    \t\t\t\tcolumns.appendChild( headerContainer );\n\t    \t\t\t} );\n\n                    afterColumns = document.createElement( 'div' );\n                    columns.appendChild( afterColumns );\n\n\t\t\t\t\treturn columns.innerHTML;\n\t\t\t\t},\n\n\t    \t\trenderSetting: function() {\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\n\t\t\t\t\treturn setting( this );\n\t\t\t\t},\n\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = '';\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\n\t\t\t\t\t\tclasses += this.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclasses += ' one-half';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\tclasses += ' nf-error';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderVisible: function() {\n\t\t\t\t\treturn nfRadio.channel( 'settings' ).request( 'check:deps', this, that );\n\t    \t\t},\n\n\t\t\t\trenderError: function() {\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\treturn this.error;\n\t\t\t\t\t}\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\n\t\t\t\trenderFieldsetClasses: function() {\n\t\t\t\t\treturn that.model.get( 'name' );\n\t\t\t\t},\n\n\t\t\t\tcurrencySymbol: function() {\n\t\t\t\t\treturn nfRadio.channel( 'settings' ).request( 'get:setting', 'currency' ) || nfi18n.currency_symbol;\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.nf-list-options-tbody' ).append( childView.el );\n\t\t\tnfRadio.channel( 'mergeTags' ).request( 'init', this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-add-new': 'clickAddOption',\n\t\t\t'click .extra': 'clickExtra'\n\t\t},\n        \n        maybeHideNew: function( collection ) {\n\t\t\tif( 'undefined' == typeof collection.settingModel ) return false;\n            var limit = collection.settingModel.get( 'max_options' );\n            if( 0 !== limit && collection.models.length >= ( limit ) ) {\n                jQuery(this.el).find('.nf-add-new').addClass('disabled');\n            } else {\n                jQuery(this.el).find('.nf-add-new').removeClass('disabled');\n            }\n        },\n\n\t\tclickAddOption: function( e ) {\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:addOption', this.collection, this.dataModel );\n\t\t\tjQuery( this.children.findByIndex(this.children.length - 1).el ).find( '[data-id=\"label\"]' ).focus();\n\t\t},\n\n\t\tclickExtra: function( e ) {\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'click:extra', e, this.collection, this.dataModel );\n\t\t\tnfRadio.channel( 'option-repeater-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.collection, this.dataModel );\n\t\t},\n\n\t\tclickImport: function( e ) {\n\t\t\tvar textarea = jQuery( e.data.jBox.content ).find( 'textarea' );\n\t\t\tvar value = textarea.val().trimLeft().trimRight();\n\t\t\t/*\n\t\t\t * Return early if we have no strings.\n\t\t\t */\n\t\t\tif ( 0 == value.length ) {\n\t\t\t\te.data.jBox.close();\n\t\t\t\treturn false;\n\t\t\t}\t\t\t\n\t\t\t/*\n\t\t\t * Split our value based on new lines.\n\t\t\t */\n\n\t\t\tvar lines = value.split(/\\n/);\n\t\t\tif ( _.isArray( lines ) ) {\n\t\t\t\t/*\n\t\t\t\t * Loop over \n\t\t\t\t */\n\t\t\t\t_.each( lines, function( line ) {\n\t\t\t\t\tvar row = line.split( ',' );\n\t\t\t\t\tvar label = row[0];\n\t\t\t\t\tvar value = row[1] || jQuery.slugify( label, { separator: '-' } );\n\t\t\t\t\tvar calc = row[2] || '';\n\n\t\t\t\t\tlabel = label.trimLeft().trimRight();\n\t\t\t\t\tvalue = value.trimLeft().trimRight();\n\t\t\t\t\tcalc = calc.trimLeft().trimRight();\n\t\t\t\t\t/*\n\t\t\t\t\t * Add our row to the collection\n\t\t\t\t\t */\n\t\t\t\t\tvar model = e.data.view.collection.add( { label: row[0], value: value, calc: calc } );\n\t\t\t\t\t// Add our field addition to our change log.\n\t\t\t\t\tvar label = {\n\t\t\t\t\t\tobject: 'field',\n\t\t\t\t\t\tlabel: row[0],\n\t\t\t\t\t\tchange: 'Option Added',\n\t\t\t\t\t\tdashicon: 'plus-alt'\n\t\t\t\t\t};\n\n\t\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addListOption', model, null, label );\n\t\t\t\t\tnfRadio.channel( 'option-repeater-' + e.data.view.model.get( 'name' ) ).trigger( 'add:option', model );\n\t\t\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'add:option', model );\n\t\t\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', model );\n\t\t\t\t}, this );\n\t\t\t\t/*\n\t\t\t\t * Set our state to unclean so that the user can publish.\n\t\t\t\t */\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * TODO: Error Handling Here\n\t\t\t\t */\n\t\t\t}\n\t\t\ttextarea.val( '' );\n\t\t\te.data.jBox.close();\n\t\t},\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Handles tasks associated with our option-repeater.\n * \n * Return our repeater child view.\n *\n * Also listens for changes to the options settings.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/optionRepeater',['models/app/optionRepeaterModel', 'models/app/optionRepeaterCollection', 'views/app/drawer/optionRepeaterComposite'], function( listOptionModel, listOptionCollection, listCompositeView ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests for the childView for list type fields.\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'get:settingChildView', this.getSettingChildView, this );\n\t\t\t\n\t\t\t// Listen for changes to our list options.\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'change:option', this.changeOption );\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'click:addOption', this.addOption );\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'click:deleteOption', this.deleteOption );\n\n\t\t\t// Respond to requests related to our list options sortable.\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'update:optionSortable', this.updateOptionSortable, this );\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'stop:optionSortable', this.stopOptionSortable, this );\n\t\t\tnfRadio.channel( 'option-repeater' ).reply( 'start:optionSortable', this.startOptionSortable, this );\n\t\t\n\t\t\t/**\n\t\t\t * When we init our setting model, we need to convert our array/objects into collections/models\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater' ), 'init:dataModel', this.convertSettings );\n\t\t},\n\n\t\t/**\n\t\t * Update an option value in our model.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te          event\n\t\t * @param  backbone.model \tmodel      option model\n\t\t * @param  backbone.model \tdataModel\n\t\t * @return void\n\t\t */\n\t\tchangeOption: function( e, model, dataModel, settingModel, optionView ) {\n\t\t\tvar name = jQuery( e.target ).data( 'id' );\n\t\t\tif ( 'selected' == name ) {\n\t\t\t\tif ( jQuery( e.target ).prop( 'checked' ) ) {\n\t\t\t\t\tvar value = 1;\n\t\t\t\t} else {\n\t\t\t\t\tvar value = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar value = jQuery( e.target ).val();\n\t\t\t}\n\t\t\t\n\t\t\tvar before = model.get( name );\n\t\t\t\n\t\t\tmodel.set( name, value );\n\t\t\t// Trigger an update on our dataModel\n\t\t\tthis.triggerDataModel( model, dataModel );\n\n\t\t\tvar after = value;\n\t\t\t\n\t\t\tvar changes = {\n\t\t\t\tattr: name,\n\t\t\t\tbefore: before,\n\t\t\t\tafter: after\n\t\t\t}\n\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option ' + model.get( 'label' ) + ' ' + name + ' changed from ' + before + ' to ' + after\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', model, changes, label );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'update:option', model, dataModel, settingModel, optionView );\n\t\t\tnfRadio.channel( 'option-repeater-option-' + name  ).trigger( 'update:option', e, model, dataModel, settingModel, optionView );\n\t\t\tnfRadio.channel( 'option-repeater-' + settingModel.get( 'name' ) ).trigger( 'update:option', model, dataModel, settingModel, optionView );\n\t\t},\n\n\t\t/**\n\t\t * Add an option to our list\n\t\t * \n\t\t * @since 3.0\n\t\t * @param backbone.collection \tcollection \tlist option collection\n\t\t * @param backbone.model \t\tdataModel\n\t\t * @return void\n\t\t */\n\t\taddOption: function( collection, dataModel ) {\n\t\t\tvar modelData = {\n\t\t\t\torder: collection.length,\n\t\t\t\tnew: true,\n\t\t\t\toptions: {}\n\t\t\t};\n\t\t\t/**\n\t\t\t * If we don't actually have a 'settingModel' duplicated fields\n\t\t\t * can't add options until publish and the builder is reloaded.\n\t\t\t * If we ignore the code if we don't have settingsModel, then it\n\t\t\t * works.\n\t\t\t */\n\t\t\tif  ( 'undefined' !== typeof collection.settingModel ) {\n\t\t\t\tvar limit = collection.settingModel.get( 'max_options' );\n\t\t\t\tif ( 0 !== limit && collection.models.length >= limit ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t_.each( collection.settingModel.get( 'columns' ), function ( col, key ) {\n\t\t\t\t\tmodelData[ key ] = col.default;\n\n\t\t\t\t\tif ( 'undefined' != typeof col.options ) {\n\t\t\t\t\t\tmodelData.options[ key ] = col.options;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tvar model = new listOptionModel( modelData );\n\t\t\tcollection.add( model );\n\n\t\t\t// Add our field addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addListOption', model, null, label );\n\n\t\t\tif ( 'undefined' !== typeof collection.settingModel ) {\n\t\t\t\tnfRadio.channel('option-repeater-' + collection.settingModel.get('name')).trigger('add:option', model);\n\t\t\t}\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'add:option', model );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'added:option', collection );\n\t\t\tthis.triggerDataModel( model, dataModel );\n\t\t},\n\n\t\t/**\n\t\t * Delete an option from our list\n\t\t * \n\t\t * @since  3.0\n\t\t * @param backbone.model \t\tmodel       list option model\n\t\t * @param backbone.collection \tcollection \tlist option collection\n\t\t * @param backbone.model \t\tdataModel\n\t\t * @return void\n\t\t */\n\t\tdeleteOption: function( model, collection, dataModel ) {\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\n\n\t\t\t// Add our field deletion to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option ' + newModel.get( 'label' ) + ' Removed',\n\t\t\t\tdashicon: 'dismiss'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: collection\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'removeListOption', newModel, null, label, data );\n\t\t\t\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tvar results = changeCollection.where( { model: model } );\n\n\t\t\t_.each( results, function( changeModel ) {\n\t\t\t\tif ( 'object' == typeof changeModel.get( 'data' ) ) {\n\t\t\t\t\t_.each( changeModel.get( 'data' ), function( dataModel ) {\n\t\t\t\t\t\tif ( dataModel.model == dataModel ) {\n\t\t\t\t\t\t\tdataModel.model = newModel;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\tchangeModel.set( 'model', newModel );\n\t\t\t\tchangeModel.set( 'disabled', true );\n\t\t\t} );\n\n\t\t\tcollection.remove( model );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'remove:option', model );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'removed:option', collection );\n\t\t\tnfRadio.channel( 'option-repeater-' + collection.settingModel.get( 'name' ) ).trigger( 'remove:option', model );\n\t\t\tthis.triggerDataModel( model, dataModel );\n\t\t},\n\n\t\t/**\n\t\t * Creates an arbitrary value on our collection, then clones and updates that collection.\n\t\t * This forces a change event to be fired on the dataModel where the list option collection data is stored.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param backbone.collection \tcollection \tlist option collection\n\t\t * @param backbone.model \t\tdataModel\n\t\t * @return void\n\t\t */\n\t\ttriggerDataModel: function( model, dataModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', model );\t\n\t\t},\n\n\t\t/**\n\t\t * Return our list composite view to the setting collection view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \tsettings model\n\t\t * @return void\n\t\t */\n\t\tgetSettingChildView: function( model ) {\n\t\t\treturn listCompositeView;\n\t\t},\n\n\t\t/**\n\t\t * When we sort our list options, change the order in our option model and trigger a change.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t \t\tsortable \tjQuery UI element\n\t\t * @param  backbone.view \tsetting  \tSetting view\n\t\t * @return void\n\t\t */\n\t\tupdateOptionSortable: function( ui, sortable, setting ) {\n\t\t\tvar newOrder = jQuery( sortable ).sortable( 'toArray' );\n\t\t\tvar dragModel = setting.collection.get( { cid: jQuery( ui.item ).prop( 'id' ) } );\n\t\t\tvar data = {\n\t\t\t\tcollection: setting.collection,\n\t\t\t\tobjModels: []\n\t\t\t};\n\n\t\t\t_.each( newOrder, function( cid, index ) {\n\t\t\t\tvar optionModel = setting.collection.get( { cid: cid } );\n\t\t\t\tvar oldPos = optionModel.get( 'order' );\n\t\t\t\toptionModel.set( 'order', index );\n\t\t\t\tvar newPos = index;\n\n\t\t\t\tdata.objModels.push( {\n\t\t\t\t\tmodel: optionModel,\n\t\t\t\t\tattr: 'order',\n\t\t\t\t\tbefore: oldPos,\n\t\t\t\t\tafter: newPos\n\t\t\t\t} );\n\t\t\t} );\n\t\t\t\n\t\t\tsetting.collection.sort( { silent: true } );\n\t\t\t\n\t\t\tvar label = {\n\t\t\t\tobject: setting.dataModel.get( 'objectType' ),\n\t\t\t\tlabel: setting.dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option ' + dragModel.get( 'label' ) + ' re-ordered from ' + dragModel._previousAttributes.order + ' to ' + dragModel.get( 'order' ),\n\t\t\t\tdashicon: 'sort'\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'sortListOptions', dragModel, null, label, data );\n\t\t\tthis.triggerDataModel( dragModel, setting.dataModel );\n\t\t\tnfRadio.channel( 'option-repeater' ).trigger( 'sort:option', dragModel, setting );\n\t\t\tnfRadio.channel( 'option-repeater-' + setting.model.get( 'name' ) ).trigger( 'sort:option', dragModel, setting );\n\t\t},\n\n\t\t/**\n\t\t * When we stop sorting our list options, reset our item opacity.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopOptionSortable: function( ui ) {\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\n\t\t},\n\n\t\t/**\n\t\t * When we start sorting our list options, remove containing divs and set our item opacity to 0.5\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Objects ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartOptionSortable: function( ui ) {\n\t\t\tjQuery( ui.placeholder ).find( 'div' ).remove();\n\t\t\tjQuery( ui.item ).css( 'opacity', '0.5' ).show();\n\t\t},\n\n\t\t/**\n\t\t * Convert settings from an array/object to a collection/model\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Backbone.Model dataModel\n\t\t * @param  Backbone.Model settingModel\n\t\t * @return void\n\t\t */\n\t\tconvertSettings: function( dataModel, settingModel ) {\n\t\t\t/*\n\t\t\t * Our options are stored in our database as objects, not collections.\n\t\t\t * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\n\t\t\t */ \n\t\t\tvar optionCollection = dataModel.get( settingModel.get( 'name' ) );\n\n\t\t\tif ( false == optionCollection instanceof Backbone.Collection ) {\n\t\t\t\toptionCollection = new listOptionCollection( [], { settingModel: settingModel } );\n\t\t\t\toptionCollection.add( dataModel.get( settingModel.get( 'name' ) ) );\n\t\t\t\tdataModel.set( settingModel.get( 'name' ), optionCollection, { silent: true } );\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","define( 'views/app/drawer/imageOptionRepeaterOption',['views/app/drawer/optionRepeaterError'], function( ErrorView ) {\n    var view = Marionette.LayoutView.extend({\n        tagName: 'div',\n        className: 'nf-table-row',\n        template: '#tmpl-nf-edit-setting-image-option-repeater-default-row',\n        id: function() {\n            return this.model.cid;\n        },\n\n        regions: {\n            error: '.nf-option-error'\n        },\n\n        initialize: function( data ) {\n            this.settingModel = data.settingModel;\n            this.dataModel = data.dataModel;\n            this.collection = data.collection;\n            this.columns = data.columns;\n            this.parentView = data.parentView;\n            this.model.on( 'change:errors', this.renderErrors, this );\n\n            // Removed because the re-render was breaking tag insertion for merge tags.\n            // this.model.on( 'change', this.render, this );\n\n            if ( 'undefined' != typeof this.settingModel.get( 'tmpl_row' ) ) {\n                this.template = '#' + this.settingModel.get( 'tmpl_row' );\n            }\n\n            this.listenTo( nfRadio.channel( 'image-option-repeater' ), 'click:extra', this.clickExtra );\n\n            this.hasErrors = false;\n        },\n\n        onBeforeDestroy: function() {    \n            this.model.off( 'change', this.render );\n            this.model.off( 'change:errors', this.renderErrors );\n        },\n\n        onBeforeRender: function() {\n            /*\n             * We want to escape any HTML being output for our image.\n             */\n            if ( this.model.get( 'image' ) ) {\n                var image = this.model.get( 'image' );\n                this.model.set( 'image', _.escape( image ), { silent: true } );\n            }\n            \n        },\n\n        onRender: function() {\n            nfRadio.channel( 'mergeTags' ).request( 'init', this );\n            /*\n             * Send out a radio message.\n             */\n            nfRadio.channel( 'setting-' + this.settingModel.get( 'name' ) + '-option' ).trigger( 'render:setting', this.model, this.dataModel, this );\n            /*\n             * We want to unescape any HTML being output for our image.\n             */\n            if ( this.model.get( 'image' ) ) {\n                var image = this.model.get( 'image' );\n                this.model.set( 'image', _.unescape( image ), { silent: true } );\n            }\n        },\n\n        onShow: function() {\n            if ( this.model.get( 'new' ) ) {\n                jQuery( this.el ).find( 'input:first' ).focus();\n                this.model.set( 'new', false );\n            }\n        },\n\n        events: {\n            'change .setting': 'changeOption',\n            'click .nf-delete': 'deleteOption',\n            'keyup': 'keyupOption',\n            // 'click .open-media-manager': 'openMediaModal'\n        },\n\n        changeOption: function( e ) {\n            nfRadio.channel( 'image-option-repeater' ).trigger( 'change:option', e, this.model, this.dataModel, this.settingModel, this );\n        },\n\n        deleteOption: function( e ) {\n            nfRadio.channel( 'image-option-repeater' ).trigger( 'click:deleteOption', this.model, this.collection, this.dataModel, this );\n        },\n\n        keyupOption: function( e ) {\n            this.maybeAddOption( e );\n            nfRadio.channel( 'image-option-repeater' ).trigger( 'keyup:option', e, this.model, this.dataModel, this.settingModel, this )\n            nfRadio.channel( 'image-option-repeater-' + this.settingModel.get( 'name' ) ).trigger( 'keyup:option', e, this.model, this.dataModel, this.settingModel, this )\n        },\n\n        maybeAddOption: function( e ) {\n            if ( 13 == e.keyCode && 'calculations' != this.settingModel.get( 'name' ) ) {\n                nfRadio.channel( 'image-option-repeater' ).trigger( 'click:addOption', this.collection, this.dataModel, this );\n                jQuery( this.parentView.children.findByIndex(this.parentView.children.length - 1).el ).find( '[data-id=\"image\"]' ).focus();\n            }\n        },\n\n        clickExtra: function(e, settingModel, dataModel, settingView) {\n            \n            var textEl = jQuery(e.target).parent().find('.setting');\n            var optionContainerDiv = jQuery(e.target).parent().parent().parent();\n\n            var valueEl = jQuery(optionContainerDiv[0]).find('[data-id=\"value\"]');\n\n            var imageIdEl = jQuery(optionContainerDiv[0]).find('[data-id=\"image_id\"]');\n\n            var labelEl = jQuery(optionContainerDiv[0]).find('[data-id=\"label\"]');\n            \n            if ( jQuery( e.target ).hasClass( 'open-media-manager' )\n                && this.el.id === optionContainerDiv[0].id) {\n                // If the frame already exists, re-open it.\n                if ( this.meta_image_frame ) {\n                    this.meta_image_frame.open();\n                    return;\n                }\n\n                // Sets up the media library frame\n                this.meta_image_frame = wp.media.frames.meta_image_frame = wp.media({\n                    title: 'Select a file',\n                    button: { text:  'insert' }\n                });\n\n                var that = this;\n\n                // Runs when an image is selected.\n                this.meta_image_frame.on('select', function(){\n                    // Grabs the attachment selection and creates a JSON representation of the model.\n                    var media_attachment = that.meta_image_frame.state().get('selection').first().toJSON();\n                    \n                    textEl.val(media_attachment.url).change();\n                    valueEl.val(media_attachment.filename).change();\n                    labelEl.val(media_attachment.title).change();\n                    imageIdEl.val(media_attachment.id).change();\n                    var img_container = optionContainerDiv.find('.option-image-container');\n\n                    if(img_container) {\n                        $imgs = jQuery(img_container).find('img');\n                        if($imgs.length > 0) {\n                            jQuery($imgs[0]).attr('src', media_attachment.url);\n                        } else {\n                            var new_img = document.createElement('img');\n                            new_img.style=\"max-width:100px;display:inline-block;\";\n                            new_img.src = media_attachment.url;\n                            jQuery(img_container).append(new_img);\n                        }\n                    }\n                });\n\n                // Opens the media library frame.\n                this.meta_image_frame.open();\n            }\n        },\n\n        renderErrors: function() {\n            \n            // if ( jQuery.isEmptyObject( this.model.get( 'errors' ) ) ) {\n            //     return false;\n            // }\n\n            /*\n             * We don't want to redraw the entire row, which would remove focus from the eq textarea,\n             * so we add and remove error classes manually.\n             */\n            if ( 0 == Object.keys( this.model.get( 'errors' ) ) ) {\n                if ( this.hasErrors ) {\n                    this.error.empty();\n                    jQuery( this.el ).removeClass( 'nf-error' );\n                }\n            } else {\n                this.hasErrors = true;\n                this.error.show( new ErrorView( { model: this.model } ) );\n                jQuery( this.el ).addClass( 'nf-error' );\n            }\n        },\n\n        templateHelpers: function() {\n            var that = this;\n            return {\n                getColumns: function() {\n                    var columns = that.columns;\n                    if(!nfAdmin.devMode){\n                        delete columns.value;\n                    }\n                    return columns;\n                },\n                renderFieldSelect: function( dataID, value ){\n                    var initialOption, select, emptyContainer, image;\n\n                    var fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\n                    initialOption = document.createElement( 'option' );\n                    initialOption.value = '';\n                    initialOption.image = '';\n                    initialOption.innerHTML = '--';\n\n                    select = document.createElement( 'select' );\n                    select.classList.add( 'setting' );\n                    select.setAttribute( 'data-id', dataID );\n                    select.appendChild( initialOption );\n\n                    fields.each( function( field ){\n                        var option = document.createElement( 'option' );\n                        if ( value == field.get( 'key' ) ) {\n                            option.setAttribute( 'selected', 'selected' );\n                        }\n                        option.value = field.get( 'key' );\n                        option.innerHTML = field.formatLabel();\n                        option.image = field.formatLabel();\n                        select.appendChild( option );\n                    });\n\n                    image = document.createElement( 'image' );\n                    image.classList.add( 'nf-select' );\n                    image.appendChild( select );\n\n                    // Select Lists need an empty '<div></div>' for styling purposes.\n                    emptyContainer = document.createElement( 'div' );\n                    emptyContainer.style.bottom = '6px';\n                    image.appendChild( emptyContainer );\n\n                    // The template requires a string.\n                    return image.innerHTML;\n                },\n                renderNonSaveFieldSelect: function( dataID, value ){\n                    var initialOption, select, emptyContainer, image;\n\n                    var fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\n                    initialOption = document.createElement( 'option' );\n                    initialOption.value = '';\n                    initialOption.image = '';\n                    initialOption.innerHTML = '--';\n\n                    select = document.createElement( 'select' );\n                    select.classList.add( 'setting' );\n                    select.setAttribute( 'data-id', dataID );\n                    select.appendChild( initialOption );\n\n                    // Build a lookup table for fields we want to remove from our fields list.\n                    var removeFieldsLookup = [ 'html', 'submit', 'hr',\n                        'recaptcha', 'spam', 'creditcard', 'creditcardcvc',\n                        'creditcardexpiration', 'creditcardfullname',\n                        'creditcardnumber', 'creditcardzip' ];\n\n                    fields.each( function( field ){\n                        // Check for the field type in our lookup array and...\n                        if( jQuery.inArray( field.get( 'type' ), removeFieldsLookup ) !== -1 ) {\n                            // Return if the type is in our lookup array.\n                            return '';\n                        }\n\n                        var option = document.createElement( 'option' );\n                        if ( value == field.get( 'key' ) ) {\n                            option.setAttribute( 'selected', 'selected' );\n                        }\n                        option.value = field.get( 'key' );\n                        option.innerHTML = field.formatLabel();\n                        option.image = field.formatLabel();\n                        select.appendChild( option );\n                    });\n\n                    image = document.createElement( 'image' );\n                    image.classList.add( 'nf-select' );\n                    image.appendChild( select );\n\n                    // Select Lists need an empty '<div></div>' for styling purposes.\n                    emptyContainer = document.createElement( 'div' );\n                    emptyContainer.style.bottom = '6px';\n                    image.appendChild( emptyContainer );\n\n                    // The template requires a string.\n                    return image.innerHTML;\n                },\n                renderOptions: function( column, value ) {\n\n                    if( 'undefined' == typeof that.options.columns[ column ] ) return;\n\n                    var select = document.createElement( 'select' );\n                    \n                    _.each( that.options.columns[ column ].options, function( option ){\n                        var optionNode = document.createElement( 'option' );\n                        if ( value === option.value ) {\n                            optionNode.setAttribute( 'selected', 'selected' );\n                        }\n                        optionNode.setAttribute( 'value', option.value );\n                        optionNode.setAttribute( 'image_id', option.image_id);\n                        optionNode.setAttribute( 'image', option.image );\n                        optionNode.innerText = option.image;\n                        select.appendChild( optionNode );\n                    });\n\n                    // The template only needs the options.\n                    return select.innerHTML;\n                }\n\n            }\n        }\n\n    });\n\n    return view;\n} );\n\n","define( 'views/app/drawer/imageOptionRepeaterComposite',['views/app/drawer/imageOptionRepeaterOption', 'views/app/drawer/optionRepeaterEmpty', 'models/app/optionRepeaterCollection'], function( listOptionView, listEmptyView, listOptionCollection ) {\n\tvar view = Marionette.CompositeView.extend( {\n\t\ttemplate: '#tmpl-nf-edit-setting-image-option-repeater-wrap',\n\t\tchildView: listOptionView,\n\t\temptyView: listEmptyView,\n\t\treorderOnSort: false,\n\n\t\tinitialize: function( data ) {\n\n\t\t\t/*\n\t\t\t * Our options are stored in our database as objects, not collections.\n\t\t\t * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\n\t\t\t */ \n\t\t\tvar optionCollection = data.dataModel.get( this.model.get( 'name' ) );\n\n\t\t\tif ( false == optionCollection instanceof Backbone.Collection ) {\n\t\t\t\toptionCollection = new listOptionCollection( [], { settingModel: this.model } );\n\t\t\t\toptionCollection.add( data.dataModel.get( this.model.get( 'name' ) ) );\n\t\t\t\tdata.dataModel.set( this.model.get( 'name' ), optionCollection, { silent: true } );\n\t\t\t}\n\n\t\t\tthis.collection = optionCollection;\n\t\t\tthis.dataModel = data.dataModel;\n\t\t\tthis.childViewOptions = { parentView: this, settingModel: this.model, collection: this.collection, dataModel: data.dataModel, columns: this.model.get( 'columns' ) };\n\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\t// If we don't have a 'settings' property, this is a legacy depdency setup.\n\t\t\t\tif ( 'undefined' == typeof deps.settings ) {\n\t\t\t\t\tdeps.settings = [];\n\t\t\t\t\t_.each(deps, function(dep, name){\n\t\t\t\t\t\tif( 'settings' !== name ) {\n\t\t\t\t\t\t\tdeps.settings.push( { name: name, value: dep } );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tdeps.match = 'all';\n\t\t\t\t}\n\n\t\t\t\tfor (var i = deps.settings.length - 1; i >= 0; i--) {\n\t\t\t\t\tlet name = deps.settings[i].name;\n\t\t\t\t\tthis.dataModel.on( 'change:' + name, this.render, this );\n\t\t\t\t}\n\t\t\t}\n            this.listenTo( nfRadio.channel( 'image-option-repeater' ), 'added:option', this.maybeHideNew );\n            this.listenTo( nfRadio.channel( 'image-option-repeater' ), 'removed:option', this.maybeHideNew );\n\t\t},\n\n\t\tonBeforeDestroy: function() {\n\t\t\tvar deps = this.model.get( 'deps' );\n\t\t\tif ( deps ) {\n\t\t\t\tfor (var i = deps.settings.length - 1; i >= 0; i--) {\n\t\t\t\t\tlet name = deps.settings[i].name;\n\t\t\t\t\tthis.dataModel.off( 'change:' + name, this.render );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tonRender: function() {\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\n\t\t\t// this.$el = this.$el.children();\n\t\t\t// this.$el.unwrap();\n\t\t\t// this.setElement( this.$el );\n\t\t\n\t\t\tvar that = this;\n\t\t\tjQuery( this.el ).find( '.nf-listimage-options-tbody' ).sortable( {\n\t\t\t\thandle: '.handle',\n\t\t\t\thelper: 'clone',\n\t\t\t\tplaceholder: 'nf-listimage-options-sortable-placeholder',\n\t\t\t\tforcePlaceholderSize: true,\n\t\t\t\topacity: 0.95,\n\t\t\t\ttolerance: 'pointer',\n\n\t\t\t\tstart: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'image-option-repeater' ).request( 'start:optionSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tstop: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'image-option-repeater' ).request( 'stop:optionSortable', ui );\n\t\t\t\t},\n\n\t\t\t\tupdate: function( e, ui ) {\n\t\t\t\t\tnfRadio.channel( 'image-option-repeater' ).request( 'update:optionSortable', ui, this, that );\n\t\t\t\t}\n\t\t\t} );\n\n            that.setupTooltip();\n            that.maybeHideNew( that.collection );\n\n\t\t\t/*\n\t\t\t * Send out a radio message.\n\t\t\t */\n\t\t\tnfRadio.channel( 'setting-' + this.model.get( 'name' ) ).trigger( 'render:setting', this.model, this.dataModel, this );\n\t\t\n\t\t},\n\n\t\tonAttach: function() {\n\n\t\t},\n        \n        /**\n         * Function to append jBox modals to each tooltip element in the option repeater.\n         */\n        setupTooltip: function() {\n            // For each .nf-help in the option repeater...\n            jQuery( this.el ).find( '.nf-listimage-options' ).find( '.nf-help' ).each(function() {\n                // Get the content.\n                var content = jQuery(this).next('.nf-help-text');\n                // Declare the modal.\n                jQuery( this ).jBox( 'Tooltip', {\n                    content: content,\n                    maxWidth: 200,\n                    theme: 'TooltipBorder',\n                    trigger: 'click',\n                    closeOnClick: true\n                })\n            });\n        },\n\n\t\ttemplateHelpers: function () {\n\t\t\tvar that = this;\n\n\t    \treturn {\n\t    \t\trenderHeaders: function() {\n                    // If this is a Field...\n                    // AND If the type includes 'list'...\n                    if ( 'Field' == that.dataModel.get( 'objectType' ) && -1 !== that.dataModel.get( 'type' ).indexOf( 'list' ) ) {\n                        // Declare help text.\n                        var helpText, helpTextContainer, helpIcon, helpIconLink, helpTextWrapper;\n\n                        helpText = document.createTextNode( nfi18n.valueChars );\n                        helpTextContainer = document.createElement( 'div' );\n                        helpTextContainer.classList.add( 'nf-help-text' );\n                        helpTextContainer.appendChild( helpText );\n\n                        helpIcon = document.createElement( 'span' );\n                        helpIcon.classList.add( 'dashicons', 'dashicons-admin-comments' );\n                        helpIconLink = document.createElement( 'a' );\n                        helpIconLink.classList.add( 'nf-help' );\n                        helpIconLink.setAttribute( 'href', '#' );\n                        helpIconLink.setAttribute( 'tabindex', '-1' );\n                        helpIconLink.appendChild( helpIcon );\n\n                        helpTextWrapper = document.createElement( 'span' );\n                        helpTextWrapper.appendChild( helpIconLink );\n                        helpTextWrapper.appendChild( helpTextContainer );\n\n\t\t\t\t\t\t// Append the help text to the 'value' header.\n\t\t\t\t\t\tif('undefined' !== typeof that.model.get('columns') ){\n\t\t\t\t\t\t\tif('undefined' !== typeof that.model.get('columns').value ){\n\t\t\t\t\t\t\t\tif ( -1 == that.model.get('columns').value.header.indexOf( helpTextWrapper.innerHTML ) ) {\n\t\t\t\t\t\t\t\t\tthat.model.get('columns').value.header += helpTextWrapper.innerHTML;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n                    }\n\t    \t\t\tvar columns, beforeColumns, afterColumns;\n\n\t    \t\t\tbeforeColumns = document.createElement( 'div' );\n\n\t    \t\t\tcolumns = document.createElement( 'span' );\n\t    \t\t\tcolumns.appendChild( beforeColumns );\n\n\t\t\t\t\tif(!nfAdmin.devMode){\n\t\t\t\t\t\tdelete this.columns.value;\n\t\t\t\t\t}\n\n\t    \t\t\t_.each( this.columns, function( col ) {\n\t    \t\t\t\tvar headerText, headerContainer;\n\n\t    \t\t\t\t// Use a fragment to support HTML in the col.header property, ie Dashicons.\n                        headerText = document.createRange().createContextualFragment( col.header );\n\t    \t\t\t\theaderContainer = document.createElement( 'div' );\n\t    \t\t\t\theaderContainer.appendChild( headerText );\n\n\t    \t\t\t\tcolumns.appendChild( headerContainer );\n\t    \t\t\t} );\n\n                    afterColumns = document.createElement( 'div' );\n                    columns.appendChild( afterColumns );\n\n\t\t\t\t\treturn columns.innerHTML;\n\t\t\t\t},\n\n\t    \t\trenderSetting: function() {\n\t    \t\t\tvar setting = nfRadio.channel( 'app' ).request( 'get:template',  '#tmpl-nf-edit-setting-' + this.type );\n\t\t\t\t\treturn setting( this );\n\t\t\t\t},\n\n\t\t\t\trenderClasses: function() {\n\t\t\t\t\tvar classes = '';\n\t\t\t\t\tif ( 'undefined' != typeof this.width ) {\n\t\t\t\t\t\tclasses += this.width;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclasses += ' one-half';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\tclasses += ' nf-error';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\trenderVisible: function() {\n\t\t\t\t\treturn nfRadio.channel( 'settings' ).request( 'check:deps', this, that );\n\t    \t\t},\n\n\t\t\t\trenderError: function() {\n\t\t\t\t\tif ( this.error ) {\n\t\t\t\t\t\treturn this.error;\n\t\t\t\t\t}\n\t\t\t\t\treturn '';\n\t\t\t\t},\n\n\t\t\t\trenderFieldsetClasses: function() {\n\t\t\t\t\treturn that.model.get( 'name' );\n\t\t\t\t},\n\n\t\t\t\tcurrencySymbol: function() {\n\t\t\t\t\treturn nfRadio.channel( 'settings' ).request( 'get:setting', 'currency' ) || nfi18n.currency_symbol;\n\t\t\t\t}\n\t\t\t};\n\t\t},\n\n\t\tattachHtml: function( collectionView, childView ) {\n\t\t\tjQuery( collectionView.el ).find( '.nf-listimage-options-tbody' ).append( childView.el );\n\t\t\tnfRadio.channel( 'mergeTags' ).request( 'init', this );\n\t\t},\n\n\t\tevents: {\n\t\t\t'click .nf-add-new': 'clickAddOption',\n\t\t\t'click .extra': 'clickExtra'\n\t\t},\n        \n        maybeHideNew: function( collection ) {\n\t\t\tif( 'undefined' == typeof collection.settingModel ) return false;\n            var limit = collection.settingModel.get( 'max_options' );\n            if( 0 !== limit && collection.models.length >= ( limit ) ) {\n                jQuery(this.el).find('.nf-add-new').addClass('disabled');\n            } else {\n                jQuery(this.el).find('.nf-add-new').removeClass('disabled');\n            }\n        },\n\n\t\tclickAddOption: function( e ) {\n\t\t\tnfRadio.channel( 'image-option-repeater' ).trigger( 'click:addOption', this.collection, this.dataModel );\n\t\t\tjQuery( this.children.findByIndex(this.children.length - 1).el ).find( '[data-id=\"image\"]' ).focus();\n\t\t},\n\n\t\tclickExtra: function( e ) {\n\t\t\tnfRadio.channel( 'image-option-repeater' ).trigger( 'click:extra', e, this.collection, this.dataModel );\n\t\t\tnfRadio.channel( 'image-option-repeater-' + this.model.get( 'name' ) ).trigger( 'click:extra', e, this.model, this.collection, this.dataModel );\n\t\t},\n\n\t\tclickImport: function( e ) {\n\t\t\tvar textarea = jQuery( e.data.jBox.content ).find( 'textarea' );\n\t\t\tvar value = textarea.val().trimLeft().trimRight();\n\t\t\t/*\n\t\t\t * Return early if we have no strings.\n\t\t\t */\n\t\t\tif ( 0 == value.length ) {\n\t\t\t\te.data.jBox.close();\n\t\t\t\treturn false;\n\t\t\t}\t\t\t\n\t\t\t/*\n\t\t\t * Split our value based on new lines.\n\t\t\t */\n\n\t\t\tvar lines = value.split(/\\n/);\n\t\t\tif ( _.isArray( lines ) ) {\n\t\t\t\t/*\n\t\t\t\t * Loop over \n\t\t\t\t */\n\t\t\t\t_.each( lines, function( line ) {\n\t\t\t\t\tvar row = line.split( ',' );\n\t\t\t\t\tvar image = row[0];\n\t\t\t\t\tvar value = row[1] || jQuery.slugify( image, { separator: '-' } );\n\t\t\t\t\tvar calc = row[2] || '';\n\n\t\t\t\t\timage = image.trimLeft().trimRight();\n\t\t\t\t\tvalue = value.trimLeft().trimRight();\n\t\t\t\t\tcalc = calc.trimLeft().trimRight();\n\t\t\t\t\t/*\n\t\t\t\t\t * Add our row to the collection\n\t\t\t\t\t */\n\t\t\t\t\tvar model = e.data.view.collection.add( { image: row[0], value: value, calc: calc } );\n\t\t\t\t\t// Add our field addition to our change log.\n\t\t\t\t\tvar image = {\n\t\t\t\t\t\tobject: 'field',\n\t\t\t\t\t\timage: row[0],\n\t\t\t\t\t\tchange: 'Option Added',\n\t\t\t\t\t\tdashicon: 'plus-alt'\n\t\t\t\t\t};\n\n\t\t\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addListOption', model, null, image );\n\t\t\t\t\tnfRadio.channel( 'image-option-repeater-' + e.data.view.model.get( 'name' ) ).trigger( 'add:option', model );\n\t\t\t\t\tnfRadio.channel( 'image-option-repeater' ).trigger( 'add:option', model );\n\t\t\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', model );\n\t\t\t\t}, this );\n\t\t\t\t/*\n\t\t\t\t * Set our state to unclean so that the user can publish.\n\t\t\t\t */\n\t\t\t} else {\n\t\t\t\t/*\n\t\t\t\t * TODO: Error Handling Here\n\t\t\t\t */\n\t\t\t}\n\t\t\ttextarea.val( '' );\n\t\t\te.data.jBox.close();\n\t\t},\n\t} );\n\n\treturn view;\n} );\n\n","/**\n * Handles tasks associated with our option-repeater.\n * \n * Return our repeater child view.\n *\n * Also listens for changes to the options settings.\n * \n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/app/imageOptionRepeater',['models/app/optionRepeaterModel', 'models/app/optionRepeaterCollection', 'views/app/drawer/imageOptionRepeaterComposite'], function( listOptionModel, listOptionCollection, listCompositeView ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests for the childView for list type fields.\n\t\t\tnfRadio.channel( 'image-option-repeater' ).reply( 'get:settingChildView', this.getSettingChildView, this );\n\t\t\t\n\t\t\t// Listen for changes to our list options.\n\t\t\tthis.listenTo( nfRadio.channel( 'image-option-repeater' ), 'change:option', this.changeOption );\n\t\t\tthis.listenTo( nfRadio.channel( 'image-option-repeater' ), 'click:addOption', this.addOption );\n\t\t\tthis.listenTo( nfRadio.channel( 'image-option-repeater' ), 'click:deleteOption', this.deleteOption );\n\n\t\t\t// Respond to requests related to our list options sortable.\n\t\t\tnfRadio.channel( 'image-option-repeater' ).reply( 'update:optionSortable', this.updateOptionSortable, this );\n\t\t\tnfRadio.channel( 'image-option-repeater' ).reply( 'stop:optionSortable', this.stopOptionSortable, this );\n\t\t\tnfRadio.channel( 'image-option-repeater' ).reply( 'start:optionSortable', this.startOptionSortable, this );\n\t\t\n\t\t\t/**\n\t\t\t * When we init our setting model, we need to convert our array/objects into collections/models\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'image-option-repeater' ), 'init:dataModel', this.convertSettings );\n\t\t},\n\n\t\t/**\n\t\t * Update an option value in our model.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t\t\te          event\n\t\t * @param  backbone.model \tmodel      option model\n\t\t * @param  backbone.model \tdataModel\n\t\t * @return void\n\t\t */\n\t\tchangeOption: function( e, model, dataModel, settingModel, optionView ) {\n\t\t\tvar name = jQuery( e.target ).data( 'id' );\n\t\t\tif ( 'selected' == name ) {\n\t\t\t\tif ( jQuery( e.target ).prop( 'checked' ) ) {\n\t\t\t\t\tvar value = 1;\n\t\t\t\t} else {\n\t\t\t\t\tvar value = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar value = jQuery( e.target ).val();\n\t\t\t}\n\t\t\t\n\t\t\tvar before = model.get( name );\n\t\t\t\n\t\t\tmodel.set( name, value );\n\t\t\t// Trigger an update on our dataModel\n\t\t\tthis.triggerDataModel( model, dataModel );\n\n\t\t\tvar after = value;\n\t\t\t\n\t\t\tvar changes = {\n\t\t\t\tattr: name,\n\t\t\t\tbefore: before,\n\t\t\t\tafter: after\n\t\t\t}\n\t\t\t\n\t\t\tvar label = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\tlabel: dataModel.get( 'label' ),\n\t\t\t\tchange: 'Option ' + model.get( 'label' ) + ' ' + name + ' changed from ' + before + ' to ' + after\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'changeSetting', model, changes, label );\n\t\t\tnfRadio.channel( 'image-option-repeater' ).trigger( 'update:option', model, dataModel, settingModel, optionView );\n\t\t\tnfRadio.channel( 'image-option-repeater-option-' + name  ).trigger( 'update:option', e, model, dataModel, settingModel, optionView );\n\t\t\tnfRadio.channel( 'image-option-repeater-' + settingModel.get( 'name' ) ).trigger( 'update:option', model, dataModel, settingModel, optionView );\n\t\t},\n\n\t\t/**\n\t\t * Add an option to our list\n\t\t * \n\t\t * @since 3.0\n\t\t * @param backbone.collection \tcollection \tlist option collection\n\t\t * @param backbone.model \t\tdataModel\n\t\t * @return void\n\t\t */\n\t\taddOption: function( collection, dataModel ) {\n\t\t\tvar modelData = {\n\t\t\t\torder: collection.length,\n\t\t\t\tnew: true,\n\t\t\t\toptions: {}\n\t\t\t};\n\t\t\t/**\n\t\t\t * If we don't actually have a 'settingModel' duplicated fields\n\t\t\t * can't add options until publish and the builder is reloaded.\n\t\t\t * If we ignore the code if we don't have settingsModel, then it\n\t\t\t * works.\n\t\t\t */\n\t\t\tif  ( 'undefined' !== typeof collection.settingModel ) {\n\t\t\t\tvar limit = collection.settingModel.get( 'max_options' );\n\t\t\t\tif ( 0 !== limit && collection.models.length >= limit ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t_.each( collection.settingModel.get( 'columns' ), function ( col, key ) {\n\t\t\t\t\tmodelData[ key ] = col.default;\n\n\t\t\t\t\tif ( 'undefined' != typeof col.options ) {\n\t\t\t\t\t\tmodelData.options[ key ] = col.options;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tvar model = new listOptionModel( modelData );\n\t\t\tcollection.add( model );\n\n\t\t\t// Add our field addition to our change log.\n\t\t\tvar image = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\timage: dataModel.get( 'image' ),\n\t\t\t\tchange: 'Option Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addListOption', model, null, image );\n\n\t\t\tif ( 'undefined' !== typeof collection.settingModel ) {\n\t\t\t\tnfRadio.channel('image-option-repeater-' + collection.settingModel.get('name')).trigger('add:option', model);\n\t\t\t}\n\t\t\tnfRadio.channel( 'image-option-repeater' ).trigger( 'add:option', model );\n\t\t\tnfRadio.channel( 'image-option-repeater' ).trigger( 'added:option', collection );\n\t\t\tthis.triggerDataModel( model, dataModel );\n\t\t},\n\n\t\t/**\n\t\t * Delete an option from our list\n\t\t * \n\t\t * @since  3.0\n\t\t * @param backbone.model \t\tmodel       list option model\n\t\t * @param backbone.collection \tcollection \tlist option collection\n\t\t * @param backbone.model \t\tdataModel\n\t\t * @return void\n\t\t */\n\t\tdeleteOption: function( model, collection, dataModel ) {\n\t\t\tvar newModel = nfRadio.channel( 'app' ).request( 'clone:modelDeep', model );\n\n\t\t\t// Add our field deletion to our change log.\n\t\t\tvar image = {\n\t\t\t\tobject: dataModel.get( 'objectType' ),\n\t\t\t\timage: dataModel.get( 'image' ),\n\t\t\t\tchange: 'Option ' + newModel.get( 'image' ) + ' Removed',\n\t\t\t\tdashicon: 'dismiss'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: collection\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'removeListOption', newModel, null, image, data );\n\t\t\t\n\t\t\tvar changeCollection = nfRadio.channel( 'changes' ).request( 'get:collection' );\n\t\t\tvar results = changeCollection.where( { model: model } );\n\n\t\t\t_.each( results, function( changeModel ) {\n\t\t\t\tif ( 'object' == typeof changeModel.get( 'data' ) ) {\n\t\t\t\t\t_.each( changeModel.get( 'data' ), function( dataModel ) {\n\t\t\t\t\t\tif ( dataModel.model == dataModel ) {\n\t\t\t\t\t\t\tdataModel.model = newModel;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t\tchangeModel.set( 'model', newModel );\n\t\t\t\tchangeModel.set( 'disabled', true );\n\t\t\t} );\n\n\t\t\tcollection.remove( model );\n\t\t\tnfRadio.channel( 'image-option-repeater' ).trigger( 'remove:option', model );\n\t\t\tnfRadio.channel( 'image-option-repeater' ).trigger( 'removed:option', collection );\n\t\t\tnfRadio.channel( 'image-option-repeater-' + collection.settingModel.get( 'name' ) ).trigger( 'remove:option', model );\n\t\t\tthis.triggerDataModel( model, dataModel );\n\t\t},\n\n\t\t/**\n\t\t * Creates an arbitrary value on our collection, then clones and updates that collection.\n\t\t * This forces a change event to be fired on the dataModel where the list option collection data is stored.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param backbone.collection \tcollection \tlist option collection\n\t\t * @param backbone.model \t\tdataModel\n\t\t * @return void\n\t\t */\n\t\ttriggerDataModel: function( model, dataModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', model );\t\n\t\t},\n\n\t\t/**\n\t\t * Return our list composite view to the setting collection view.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \tsettings model\n\t\t * @return void\n\t\t */\n\t\tgetSettingChildView: function( model ) {\n\t\t\treturn listCompositeView;\n\t\t},\n\n\t\t/**\n\t\t * When we sort our list options, change the order in our option model and trigger a change.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object\t \t\tsortable \tjQuery UI element\n\t\t * @param  backbone.view \tsetting  \tSetting view\n\t\t * @return void\n\t\t */\n\t\tupdateOptionSortable: function( ui, sortable, setting ) {\n\t\t\tvar newOrder = jQuery( sortable ).sortable( 'toArray' );\n\t\t\tvar dragModel = setting.collection.get( { cid: jQuery( ui.item ).prop( 'id' ) } );\n\t\t\tvar data = {\n\t\t\t\tcollection: setting.collection,\n\t\t\t\tobjModels: []\n\t\t\t};\n\n\t\t\t_.each( newOrder, function( cid, index ) {\n\t\t\t\tvar optionModel = setting.collection.get( { cid: cid } );\n\t\t\t\tvar oldPos = optionModel.get( 'order' );\n\t\t\t\toptionModel.set( 'order', index );\n\t\t\t\tvar newPos = index;\n\n\t\t\t\tdata.objModels.push( {\n\t\t\t\t\tmodel: optionModel,\n\t\t\t\t\tattr: 'order',\n\t\t\t\t\tbefore: oldPos,\n\t\t\t\t\tafter: newPos\n\t\t\t\t} );\n\t\t\t} );\n\t\t\t\n\t\t\tsetting.collection.sort( { silent: true } );\n\t\t\t\n\t\t\tvar image = {\n\t\t\t\tobject: setting.dataModel.get( 'objectType' ),\n\t\t\t\timage: setting.dataModel.get( 'image' ),\n\t\t\t\tchange: 'Option ' + dragModel.get( 'image' ) + ' re-ordered from ' + dragModel._previousAttributes.order + ' to ' + dragModel.get( 'order' ),\n\t\t\t\tdashicon: 'sort'\n\t\t\t};\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'sortListOptions', dragModel, null, image, data );\n\t\t\tthis.triggerDataModel( dragModel, setting.dataModel );\n\t\t\tnfRadio.channel( 'image-option-repeater' ).trigger( 'sort:option', dragModel, setting );\n\t\t\tnfRadio.channel( 'image-option-repeater-' + setting.model.get( 'name' ) ).trigger( 'sort:option', dragModel, setting );\n\t\t},\n\n\t\t/**\n\t\t * When we stop sorting our list options, reset our item opacity.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopOptionSortable: function( ui ) {\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\n\t\t},\n\n\t\t/**\n\t\t * When we start sorting our list options, remove containing divs and set our item opacity to 0.5\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Objects ui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartOptionSortable: function( ui ) {\n\t\t\tjQuery( ui.placeholder ).find( 'div' ).remove();\n\t\t\tjQuery( ui.item ).css( 'opacity', '0.5' ).show();\n\t\t},\n\n\t\t/**\n\t\t * Convert settings from an array/object to a collection/model\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Backbone.Model dataModel\n\t\t * @param  Backbone.Model settingModel\n\t\t * @return void\n\t\t */\n\t\tconvertSettings: function( dataModel, settingModel ) {\n\t\t\t/*\n\t\t\t * Our options are stored in our database as objects, not collections.\n\t\t\t * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\n\t\t\t */ \n\t\t\tvar optionCollection = dataModel.get( settingModel.get( 'name' ) );\n\n\t\t\tif ( false == optionCollection instanceof Backbone.Collection ) {\n\t\t\t\toptionCollection = new listOptionCollection( [], { settingModel: settingModel } );\n\t\t\t\toptionCollection.add( dataModel.get( settingModel.get( 'name' ) ) );\n\t\t\t\tdataModel.set( settingModel.get( 'name' ), optionCollection, { silent: true } );\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles adding and removing the active class from a field currently being edited.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - Edit Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/editActive',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests to remove the active class from all our fields.\n\t\t\tnfRadio.channel( 'fields' ).reply( 'clear:editActive', this.clearEditActive, this );\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\n\t\t},\n\n\t\t/**\n\t\t * Loops through our fields collection and sets editActive to false.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n        clearEditActive: function() {\n            var fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n            _.each( fieldCollection.models, function( field ) {\n\t\t\t\tfield.set( 'editActive', false );\n            } );\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Fetches settings models so that we can get setting information\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldSettings',['models/app/settingCollection'], function( settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.collection = new settingCollection( fieldSettings, { objectType: 'fields' } );\n\n\t\t\t// Responds to requests for settings models.\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:settingModel', this.getSettingModel, this );\n\t\t\t\n\t\t\t// Responds to requests for our collection.\n\t\t\tnfRadio.channel( 'fields' ).reply( 'get:settingCollection', this.getSettingCollection, this );\n\t\t},\n\n\t\tgetSettingModel: function( name ) {\n\t\t\treturn this.collection.findWhere( { name: name } );\n\t\t},\n\n\t\tgetSettingCollection: function() {\n\t\t\treturn this.collection;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel to add the individual Credit Card Fields.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldCreditCard',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n          this.listenTo( nfRadio.channel( 'fields' ), 'after:addField', this.dropCreditCardField );\n        },\n\n        dropCreditCardField: function( fieldModel ) {\n\n            if( 'creditcard' == fieldModel.get( 'type' ) ) {\n\n                var order = fieldModel.get( 'order' );\n\n                nfRadio.channel( 'fields' ).request( 'delete', fieldModel );\n\n                _.each( [ 'creditcardfullname', 'creditcardnumber', 'creditcardcvc', 'creditcardexpiration', 'creditcardzip'], function( type ) {\n\n                    var fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\n                    var newField = {\n                        id: nfRadio.channel( 'fields' ).request( 'get:tmpID' ),\n                        type: type,\n                        label: fieldType.get( 'nicename' ),\n                        order: order\n                    };\n\n                    nfRadio.channel( 'fields' ).request( 'add', newField );\n                });\n            }\n\n        },\n\n        stageCreditCardField: function( model ) {\n\n            if( 'creditcard' == model.get( 'slug' ) ) {\n\n                nfRadio.channel( 'fields' ).request( 'remove:stagedField', '', model );\n\n                _.each( [ 'creditcardfullname', 'creditcardnumber', 'creditcardcvc', 'creditcardexpiration', 'creditcardzip'], function( type ) {\n                    nfRadio.channel('fields').request('add:stagedField', type );\n                });\n            }\n        }\n\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel to add the individual List Fields.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldList',[ 'models/app/optionRepeaterCollection' ], function( ListOptionCollection ) {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'option-repeater-option-label' ), 'update:option', this.updateOptionLabel );\n            this.listenTo( nfRadio.channel( 'option-repeater-option-value' ), 'update:option', this.updateOptionValue );\n            \n            /*\n             * When we init our model, convert our options from an array of objects to a collection of models.\n             */\n            this.listenTo( nfRadio.channel( 'fields-list' ), 'init:fieldModel', this.convertOptions );\n        },\n\n        updateOptionLabel: function( e, model, dataModel, settingModel, optionView ) {\n\n            if( 'list' != _.findWhere( fieldTypeData, { id: dataModel.get( 'type' ) } ).parentType ) return;\n\n            if( model.get( 'manual_value' ) ) return;\n\n            value = jQuery.slugify( model.get( 'label' ), { separator: '-' } );\n\n            model.set( 'value', value );\n            model.trigger( 'change', model );\n\n            // Set focus on value input\n            jQuery( optionView.el ).find( '[data-id=\"value\"]' ).focus().select();\n        },\n\n        updateOptionValue: function( e, model, dataModel, settingModel, optionView ) {\n            if ( 'Field' == dataModel.get( 'objectType' ) ) {\n                var newVal = model.get( 'value' );\n                // Sanitize any unwanted special characters.\n                // TODO: This assumes English is the standard language.\n                //       We might want to allow other language characters through this check later.\n                var pattern = /[^0-9a-zA-Z _@.-]/g;\n                newVal = newVal.replace( pattern, '' );\n                model.set( 'value', newVal );\n                // Re-render the value.\n                optionView.render();\n            }\n            \n            var findWhere = _.findWhere( fieldTypeData, { id: dataModel.get( 'type' ) } );\n            if( 'undefined' == typeof findWhere ) return;\n            if( 'list' != findWhere.parentType ) return;\n\n            model.set( 'manual_value', true );\n            \n            // Set focus on calc input\n            jQuery( optionView.el ).find( '[data-id=\"calc\"]' ).focus().select();\n        },\n\n        convertOptions: function( fieldModel ) {\n            /*\n             * Our options are stored in our database as objects, not collections.\n             * Before we attempt to render them, we need to convert them to a collection if they aren't already one.\n             */ \n            var options = fieldModel.get( 'options' );\n\n            var settingModel = nfRadio.channel( 'fields' ).request( 'get:settingModel', 'options' );\n\n            if ( false == options instanceof Backbone.Collection ) {\n                options = new ListOptionCollection( [], { settingModel: settingModel } );\n                options.add( fieldModel.get( 'options' ) );\n                fieldModel.set( 'options', options, { silent: true } );\n            }\n        }\n\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel to add the individual Credit Card Fields.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldPassword',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'fields' ), 'after:addField', this.addField );\n        },\n\n        addField: function( model ) {\n\n            if( 'password' == model.get( 'type' ) ) {\n\n                var order = model.get( 'order' );\n\n                var confirm = this.insertField( 'passwordconfirm', order + 1 );\n\n                confirm.set( 'confirm_field', model.get( 'key' ) );\n            }\n        },\n\n        insertField: function( type, order ) {\n            var fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\n            var newField = {\n                id: nfRadio.channel( 'fields' ).request( 'get:tmpID' ),\n                type: type,\n                label: fieldType.get( 'nicename' ),\n                order: order\n            };\n\n            return nfRadio.channel('fields').request('add', newField );\n        }\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a product_assignment setting, add our products to the data model.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldQuantity',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n\t\t},\n\n\t\tbeforeRenderSetting: function( settingModel, dataModel, view ) {\n\t\t\tif ( 'product_assignment' == settingModel.get( 'name' ) ) {\n\t\t\t\tvar productFields = this.getProductFields( settingModel );\n\t\t\t\tsettingModel.set( 'options', productFields );\n\t\t\t}\n\t\t},\n\n\t\tgetProductFields: function( settingModel ) {\n\t\t\tvar productFields = [ settingModel.get( 'select_product' ) ];\n\t\t\t// Update our dataModel with all of our product fields.\n\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fields.models, function( field ) {\n\t\t\t\tif ( 'product' == field.get( 'type' ) ) {\n\t\t\t\t\tproductFields.push( { label: field.get( 'label' ), value: field.get( 'id' ) } );\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn productFields;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a product_assignment setting, add our products to the data model.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldShipping',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-shipping_options' ), 'render:setting', this.addMask );\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-shipping_options-option' ), 'render:setting', this.addMask );\n\t\t},\n\n\t\taddMask: function( settingModel, dataModel, view ) {\n\t\t\tjQuery( view.el ).find( '[data-id=\"value\"]' ).each( function() {\n\t\t\t\tvar autoNumericOptions = {\n\t\t\t\t\tdigitGroupSeparator: nfi18n.thousands_sep,\n\t\t\t\t\tdecimalCharacter: nfi18n.decimal_point,\n\t\t\t\t\tcurrencySymbol: nfi18n.currencySymbol\n\t\t\t\t};\n\t\t\t\tnew AutoNumeric( this, autoNumericOptions );\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * When we add a new field, update its key.\n *\n * When we change the key, update any refs to the key.\n *\n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/key',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// When we add a field, update its key.\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:field', this.newFieldKey );\n\n\t\t\t// When we edit a label, update our key.\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-label' ), 'update:setting', this.updateLabel );\n\n\t\t\t// When we edit a key, check for places that key might be used.\n\t\t\tthis.listenTo( nfRadio.channel( 'fieldSetting-key' ), 'update:setting', this.updateKey );\n\n\t\t\t// When we type inside the admin key field, we need to save our manual_key setting.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-key' ), 'keyup:setting', this.keyUp );\n\t\t},\n\n\t\t/**\n\t\t * Add a key to our new field model.\n\t\t *\n\t\t * @since 3.0\n\t\t * @param backbone.model model new field model\n\t\t * @return void\n\t\t */\n\t\tnewFieldKey: function( model ) {\n\t\t\tvar d = new Date();\n\t\t\tvar n = d.valueOf();\n\t\t\tvar key = this.slugify( model.get( 'type' ) + '_' + n );\n\n\t\t\tmodel.set( 'key', key, { silent: true } );\n\n\t\t\tif( 'undefined' == model.get( 'manual_key' ) ) {\n\t\t\t\tmodel.set('manual_key', false, {silent: true});\n\t\t\t}\n\t\t},\n\n\t\tupdateLabel: function( model ) {\n\n\t\t\t/*\n\t\t\t * If we haven't entered a key manually, update our key when our label changes.\n\t\t\t */\n\t\t\tif ( ! model.get( 'manual_key' ) && 0 != jQuery.trim( model.get( 'label' ) ).length ) {\n\t\t\t\t/*\n\t\t\t\t * When we're editing settings, we expect the edits to fire one at a time.\n\t\t\t\t * Since we're calling this in the middle of our label update, anything that inquires about what has changed after we set our key will see both label and key.\n\t\t\t\t * We need to remove the label from our model.changed property so that all that has changed is the key.\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\tdelete model.changed.label;\n\t\t\t\tvar d = new Date();\n\t\t\t\tvar n = d.valueOf();\n\t\t\t\tvar key = this.slugify( model.get( 'label' ) + '_' + n );\n                // If our slug didn't setup correctly...\n                // Force a valid entry.\n                if ( -1 == key.indexOf( '_' ) ) key = 'field_' + key;\n\t\t\t\tmodel.set( 'key', key );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When a field key is updated, find any merge tags using the key and update them.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  backbone.model model field model\n\t\t * @return void\n\t\t */\n\t\tupdateKey: function( dataModel ) {\n\t\t\tvar key = dataModel.get( 'key' );\n\t\t\tthis.settingModel = nfRadio.channel( 'fields' ).request( 'get:settingModel', 'key' );\n\t\t\tthis.setError( key, dataModel );\n\t\t},\n\n\t\tkeyUp: function( e, settingModel, dataModel ) {\n\t\t\tdataModel.set( 'manual_key', true );\n\t\t\tthis.settingModel = settingModel;\n\t\t\tvar key = jQuery( e.target ).val();\n\t\t\tthis.setError( key, dataModel );\n\t\t},\n\n\t\tsetError: function( key, dataModel ) {\n\t\t\tvar error = false;\n\t\t\tif ( '' == jQuery.trim( key ) ) {\n\t\t\t\terror = 'Field keys can\\'t be empty. Please enter a key.';\n\t\t\t} else if ( key != key.toLowerCase() ) {\n\t\t\t\terror = 'Field keys must be lowercase.';\n\t\t\t} else if ( key != key.replace( ' ', '_' ) ) {\n\t\t\t\terror = 'Field keys must cannot use spaces. Separate with \"_\" instead.';\n\t\t\t} else if ( '_' == key.slice( -1 ) ) {\n\t\t\t\terror = 'Field keys cannot end with a \"_\"';\n\t\t\t} else if ( key != this.slugify( key ) ) {\n\t\t\t\terror = 'Invalid Format.';\n\t\t\t} else if ( key != this.keyExists( key, dataModel ) ) {\n\t\t\t\terror = 'Field keys must be unique. Please enter another key.'\n\t\t\t}\n\n\t\t\tif ( error ) {\n\t\t\t\tthis.settingModel.set( 'error', error );\n\t\t\t} else {\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'update:fieldKey', dataModel );\n\t\t\t\tthis.settingModel.set( 'error', false );\n\t\t\t}\n\t\t},\n\n\t\tkeyExists: function( key, dataModel ) {\n\t\t\tvar newKey = this.slugify( key );\n\t\t\tif ( 0 != newKey.length ) {\n\t\t\t\tkey = newKey;\n\t\t\t}\n\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\tvar x = 1;\n\t\t\tvar testKey = key;\n\t\t\t_.each( fieldCollection.models, function( field ) {\n\t\t\t\tif ( dataModel != field && testKey == field.get( 'key' ) ) {\n\t\t\t\t\ttestKey = key + '_' + x;\n\t\t\t\t\tx++;\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\tkey = testKey;\n\n\t\t\treturn key;\n\t\t},\n\n\t\tslugify: function( string ){\n\t\t\treturn jQuery.slugify( string, { separator: '_' } )\n\t\t}\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Creates notices for our fields domain.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/notices',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'add:stagedField', this.addStagedField );\n\t\t},\n\n\t\taddStagedField: function( model ) {\n\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'addStagedField', model.get( 'nicename' ) + ' added to staging' );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles mobile-specific JS for our fields domain.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/mobile',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for the start of our sorting.\n\t\t\t// this.listenTo( nfRadio.channel( 'app' ), 'render:fieldsSortable', this.initWiggle );\n\t\t\t// Listen for when we start sorting.\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'sortable:start', this.startWiggle );\n\t\t\t// Listen for when we stop sorting.\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'sortable:stop', this.stopWiggle );\n\t\t},\n\n\t\tinitWiggle: function( view ) {\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( view.el ).find( '.nf-field-wrap' ).on( 'taphold', function() {\n\t\t\t\t\tjQuery( this ).ClassyWiggle( 'start', { degrees: ['.65', '1', '.65', '0', '-.65', '-1', '-.65', '0'], delay: 50 } );\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\n\t\tstartWiggle: function( ui ) {\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( ui.item ).removeClass( 'ui-sortable-helper' ).ClassyWiggle( 'stop' );\n\t\t\t\tjQuery( ui.helper ).css( 'opacity', '0.75' ).ClassyWiggle( 'start', { degrees: ['.5', '1', '.5', '0', '-.5', '-1', '-.5', '0'] } );\n\t\t\t}\n\t\t},\n\n\t\tstopWiggle: function( ui ) {\n\t\t\tif ( nfRadio.channel( 'app' ).request( 'is:mobile' ) ) {\n\t\t\t\tjQuery( ui.helper ).ClassyWiggle( 'stop' );\n\t\t\t\tjQuery( ui.item ).removeClass( 'ui-sortable-helper drag-selected' );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * If we add a saved field to our form and then update it, set the \"saved\" flag to false.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/savedFields',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tignoreAttributes: [\n\t\t\t'editActive',\n\t\t\t'order',\n\t\t\t'saved',\n\t\t\t'jBox'\n\t\t],\n\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'fields' ), 'update:setting', this.updateField );\n\t\t\t// Listen to clicks on our add saved field button.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer' ), 'click:addSavedField', this.clickAddSavedField, this );\n\t\t},\n\n\t\tupdateField: function( dataModel ) {\n\t\t\tif ( dataModel.get( 'saved' ) ) {\n\t\t\t\t\n\t\t\t\tvar modified = false;\n\t\t\t\tvar changedAttributes = _.keys( dataModel.changedAttributes() );\n\t\t\t\tvar that = this;\n\t\t\t\t_.each( changedAttributes, function( changed ) {\n\t\t\t\t\tif ( -1 == that.ignoreAttributes.indexOf( changed ) ) {\n\t\t\t\t\t\tmodified = true;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t\t\n\t\t\t\tif ( modified ) {\n\t\t\t\t\tdataModel.set( 'saved', false );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tclickAddSavedField: function( e, dataModel ) {\n\t\t\tvar modelClone = nfRadio.channel( 'app' ).request( 'clone:modelDeep', dataModel );\n\n\t\t\tvar fieldData = modelClone.attributes;\n\t\t\tfieldData.saved = true;\n\n\t\t\tdelete fieldData.jBox;\n\t\t\tdelete fieldData.editActive;\n\t\t\tdelete fieldData.created_at;\n\t\t\tdelete fieldData.order;\n\t\t\tdelete fieldData.id;\n\t\t\tdelete fieldData.formID;\n\t\t\tdelete fieldData.parent_id;\n\t\t\t\n\t\t\tvar type = nfRadio.channel( 'fields' ).request( 'get:type', fieldData.type );\n\t\t\tvar newType = _.clone( type.attributes );\n\n\t\t\tvar nicename = jQuery( e.target ).parent().parent().find( 'input' ).val();\n\t\t\tconsole.log( nicename );\n\t\t\tnewType.nicename = nicename;\n\t\t\tfieldData.label = nicename;\n\t\t\tfieldData.nicename = nicename;\n\t\t\tdataModel.set( 'addSavedLoading', true );\n\t\t\tvar newTypeDefaults = JSON.stringify( fieldData );\n\n\t\t\tjQuery.post( ajaxurl, { action: 'nf_create_saved_field', field: newTypeDefaults, security: nfAdmin.ajaxNonce }, function( response ) {\n\t\t\t\tresponse = JSON.parse( response );\n\t\t\t\tnewType.id = response.data.id;\n\t\t\t\tnewType.nicename = nicename;\n\t\t\t\tnewType.settingDefaults = fieldData;\n\n\t\t\t\tvar typeCollection = nfRadio.channel( 'fields' ).request( 'get:typeCollection' );\n\t\t\t\tvar newModel = typeCollection.add( newType );\n\n\t\t\t\tvar typeSections = nfRadio.channel( 'fields' ).request( 'get:typeSections' );\n\t\t\t\ttypeSections.get( 'saved' ).get( 'fieldTypes' ).push( newType.id );\n\n\t\t\t\t// dataModel.set( 'type', response.data.id );\n\t\t\t\tdataModel.set( 'addSavedLoading', false );\n\t\t\t\tdataModel.unset( 'addSavedLoading', { silent: true } );\n\t\t\t\tdataModel.get( 'jBox' ).close();\n\t\t\t\t// dataModel.set( 'saved', true );\n\n\t\t\t\tnfRadio.channel( 'notices' ).request( 'add', 'addSaved', 'Saved Field Added' );\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a datepicker setting, add our datepicker.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldDatepicker',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-type-datepicker' ), 'render:setting', this.addDatepicker );\n\t\t},\n\n\t\taddDatepicker: function( settingModel, dataModel, view ) {\n\t\t\t//Switch to flatpickr from pikaday\n\t\t\tlet el = jQuery( view.el ).find( '.setting' )[0];\n\t\t\tlet datePickerSettings = {};\n\n\t\t\t// Allow fields to add settings to the datepicker.\n\t\t\tlet filteredDatePickerSettings = nfRadio.channel( 'setting-type-datepicker' ).request( 'filter:settings', datePickerSettings, settingModel, el );\n\t\t\tif ( 'undefined' != typeof filteredDatePickerSettings ) {\n\t\t\t\tdatePickerSettings = filteredDatePickerSettings;\n\t\t\t}\n\n\t\t\tvar dateObject = flatpickr( el, datePickerSettings );\n\n\t\t\tnfRadio.channel( 'setting-type-datepicker' ).trigger( 'loadComplete', dateObject, settingModel, dataModel, view );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a product_assignment setting, add our products to the data model.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/fields/fieldDisplayCalc',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\n\t\t\tthis.listenTo( nfRadio.channel( 'setting-calc_var' ), 'before:renderSetting', this.beforeRenderSetting );\n\t\t},\n\n\t\tbeforeRenderSetting: function( settingModel, dataModel, view ) {\n\t\t\t// console.log( 'render!' );\n\t\t},\n\n\t\tgetProductFields: function( settingModel ) {\n\t\t\tvar productFields = [ settingModel.get( 'select_product' ) ];\n\t\t\t// Update our dataModel with all of our product fields.\n\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fields.models, function( field ) {\n\t\t\t\tif ( 'product' == field.get( 'type' ) ) {\n\t\t\t\t\tproductFields.push( { label: field.get( 'label' ), value: field.get( 'id' ) } );\n\t\t\t\t}\n\t\t\t} );\n\t\t\treturn productFields;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles specifics for our repeater field types.\n *\n */\ndefine( 'controllers/fields/fieldRepeater',[ 'models/fields/fieldCollection' ], function( fieldCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\n\t\tinitialize: function() {\n\t\t\t// Listen for repeater field models.\n\t\t\tthis.listenTo( nfRadio.channel( 'fields-repeater' ), 'init:fieldModel', this.setupCollection, this );\n\n\t\t\tnfRadio.channel( 'fields-repeater' ).reply( 'add:childField', this.addChildField, this );\n\t\t\tnfRadio.channel( 'fields-repeater' ).reply( 'receive:fields', this.receiveFields, this );\n\t\t\tnfRadio.channel( 'fields-repeater' ).reply( 'get:childField', this.getChildField, this );\n\t\t\tnfRadio.channel( 'fields-repeater' ).reply( 'process:stagedField', this.processStagedFields, this );\n\t\t\tnfRadio.channel( 'fields-repeater' ).reply( 'sort:repeaterField', this.sortRepeaterField, this );\n\t\t\tnfRadio.channel( 'fields-repeater' ).reply( 'over:repeaterField', this.overRepeaterField, this );\n\t\t\tnfRadio.channel( 'fields-repeater' ).reply( 'out:repeaterField', this.outRepeaterField, this );\n\t\t\tnfRadio.channel( 'fields-repeater' ).reply( 'stop:repeaterField', this.stopRepeaterField, this );\n\t\t\tnfRadio.channel( 'fields-repeater' ).reply( 'start:repeaterField', this.startRepeaterField, this );\n\t\t\tnfRadio.channel( 'fields-repeater' ).reply( 'update:repeaterField', this.updateRepeaterField, this );\n\t\t},\n\n\t\t/**\n\t\t * When we save repeater fields, their 'fields' content will be saved as an array of objects.\n\t\t * When a repeater field model is created, we need to hyrdate the 'fields' settings and turn it into a Backbone Collection.\n\t\t * \n\t\t * @since  version\n\t\t * @param  {[type]} fieldModel [description]\n\t\t * @return {[type]}            [description]\n\t\t */\n\t\tsetupCollection: function( fieldModel ) {\n\t\t\t// The fields var will be an array of field model data.\n\t\t\tlet fields = fieldModel.get( 'fields' );\n\n\t\t\t// Only turn it into a collection if we haven't already.\n\t\t\tif ( false === fields instanceof Backbone.Collection ) {\n\t\t\t\tlet collection =  new fieldCollection( fields );\n\t\t\t\tfieldModel.set( 'fields', collection );\n\n\t\t\t\t//Allows to loop through Repeater fields to reset correct state\n\t\t\t\tcollection.listenTo( nfRadio.channel( 'fields-repeater' ), 'clearEditActive', this.clearEditActive, collection );\n\t\t\t\tcollection.listenTo( nfRadio.channel( 'app' ), 'after:appStart', this.clearEditActive, collection );\n\t\t\t\t\n\t\t\t\t// Listen for radio messages that a field was deleted.\n\t\t\t\tcollection.listenTo( nfRadio.channel( 'fields' ), 'delete:field', this.maybeDeleteField, collection );\n\t\t\t}\t\n\t\t},\n\n\t\t/**\n\t\t * In order to delete items from within a repeater field without creating a new convention, we listen to radio messages for field deletion.\n\t\t * We just have to make sure that these fields weren't just added to our repeater field collection.\n\t\t * \n\t\t * @since  version\n\t\t * @param  {[type]} fieldModel [description]\n\t\t * @return {[type]}            [description]\n\t\t */\n\t\tmaybeDeleteField: function( fieldModel ) {\n\t\t\t// Make sure that we didn't just add this field to our repeater.\n\t\t\tif ( ! fieldModel.get( 'droppedInRepeater' ) ) {\n\t\t\t\tthis.remove( fieldModel );\n\t\t\t}\n\t\t\t// We're done dropping now.\n\t\t\tfieldModel.set( 'droppedInRepeater', false );\n\t\t},\n\n\t\t/**\n\t\t * Loops through our fields collection and sets editActive to false.\n\t\t * \n\t\t * @param  {[type]} fieldModel field that was clicked\n\t\t * @return void\n\t\t */\n        clearEditActive: function( model ) {\n            _.each( this.models, function( field ) {\n\t\t\t\tif( model.cid !== field.cid ){\n\t\t\t\t\tfield.set( 'editActive', true );\n\t\t\t\t\tfield.set( 'editActive', false );\n\t\t\t\t}\n            } );\n\t\t},\n\n\n\t\t/**\n\t\t * Receive fields in the repeater field sortable zone\n\t\t * \n\t\t */\n\t\treceiveFields: function( ui, that, e ) {\n\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-stage' ) ) {\n\t\t\t\tthis.processStagedFields( ui, that, e );\n\t\t\t} else {\n\t\t\t\tthis.addChildField(ui, that, e);\n\t\t\t}\n\n\t\t},\t\n\t\t\n\t\t/**\n\t\t * Add a field in the repeater fields collection\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\taddChildField: function( ui, that, e ) {\n\n\t\t\tlet type = typeof ui.item !== \"undefined\" ? jQuery( ui.item ).data( 'id' ) : ui.get('slug'),\n\t\t\tdroppedFieldModel = nfRadio.channel( 'fields' ).request( 'get:field', type ),\n\t\t\tcollection = that.repeaterFieldModel.get( 'fields' ),\n\t\t\tfieldModel;\n\t\t\t\n\t\t\t\n\t\t\t//Don't process another repeater field\n\t\t\tif(type === \"repeater\") return;\n\t\t\t\n\t\t\t//If a field Model exists and comes from the builder get the field Type and delete Field Model from main collection\n\t\t\tif(droppedFieldModel != null){\n\t\t\t\t//Reset type based on the model\n\t\t\t\ttype = droppedFieldModel.attributes.type;\n\t\t\t\t// Remove the field from the main field collection.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'click:delete', e, droppedFieldModel );\n\t\t\t}\n\n\t\t\t// Get our field type model\n\t\t\tfieldModel = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\n\t\t\t// Get our tmp ID\n\t\t\tlet elId = nfRadio.channel( 'fields' ).request( 'get:tmpID' ) != null ? nfRadio.channel( 'fields' ).request( 'get:tmpID' ) : \"tmp\";\n\t\t\t//Add field to collection\n\t\t\tnewField = collection.add(  { id: elId , label: fieldModel.get( 'nicename' ), type: type, repeaterField: true} );\n\n\t\t\t//Sort fields\n\t\t\tlet sortableEl = nfRadio.channel( 'fields-repeater' ).request( 'get:sortableEl' );\n\t\t\tif(! jQuery(sortableEl).hasClass('ui-sortable')){\n\t\t\t\tnfRadio.channel( 'fields-repeater' ).request( 'init:sortable' );\n\t\t\t}\n\t\t\tlet sortableElArray = jQuery( sortableEl ).sortable( 'toArray' );\n\t\t\t_.each( sortableElArray, function( element, index ) {\n\t\t\t\tif(false === element.length > 0){\n\t\t\t\t\tsortableElArray[index] = elId;\n\t\t\t\t} else if (element === elId) {\n\t\t\t\t\tsortableElArray.splice( index, 1);\n\t\t\t\t}\n\t\t\t});\n\t\t\tnfRadio.channel( 'fields-repeater' ).request( 'sort:repeaterField', sortableElArray);\n\n\t\t\t// Add our field addition to our change log.\n\t\t\tvar label = {\n\t\t\t\tobject: 'Field',\n\t\t\t\tlabel: newField.get( 'label' ),\n\t\t\t\tchange: 'Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: collection\n\t\t\t}\n\t\t\t\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newField, null, label, data );\n\n\t\t\t\n\t\t\tif( typeof elId !== \"undefined\" && typeof ui.helper !== \"undefined\" ){\n\t\t\t\t/*\n\t\t\t\t* Update our helper id to the tmpID.\n\t\t\t\t* We do this so that when we sort, we have the proper ID.\n\t\t\t\t*/ \n\t\t\t\tjQuery( ui.helper ).prop( 'id', elId );\n\t\t\t\t//Sort fields in repeater\n\t\t\t\tnfRadio.channel( 'app' ).request( 'stop:fieldsSortable', ui );\n\t\t\t\t// Remove the helper. Gets rid of a weird type artifact.\n\t\t\t\tjQuery( ui.helper ).remove();\n\t\t\t\t// Trigger a drop field type event.\n\t\t\t\tnfRadio.channel( 'fields' ).trigger( 'drop:fieldType', type, elId );\n\t\t\t}\n\n\t\t\treturn elId;\n\n\t\t},\n\n\t\t/**\n\t\t * Get a field from a repeater field collection\n\t\t * \n\t\t * @return fieldModel\n\t\t */\n\t\tgetChildField: function( childFieldID, parentFieldModel, newID ) {\n\n\t\t\tif( typeof childFieldID === \"undefined\") return;\n\t\t\t//Prepare retuned variable\n\t\t\tlet childFieldModel;\n\t\t\t//Allow to retrieve parentFieldModel by the newID that contains the parent Field ID ( USed to update a field ID after saving the form )\n\t\t\tif( parentFieldModel == null && typeof newID !== \"undefined\" ){\n\t\t\t\tconst parentID = newID.split('.')[0];\n\t\t\t\tparentFieldModel = nfRadio.channel( 'fields' ).request( 'get:field', parentID );\n\t\t\t}\n\t\t\t\n\t\t\t//Check we have the Repeater Field Model\n\t\t\tif( parentFieldModel ) {\n\t\t\t\t//Get the fields collection in the repeater Field model\n\t\t\t\tlet repeaterFieldsCollection = parentFieldModel.get( 'fields' );\n\t\t\t\t//Get the Child Field Model\n\t\t\t\tchildFieldModel = repeaterFieldsCollection.get( childFieldID );\n\t\t\t}\n\t\t\t\n\t\t\treturn childFieldModel;\n\t\t},\n\n\t\t/**\n\t\t * Add Staged fields to repeater fieldset\n\t\t * \n\t\t * @paran object event dropped\n\t\t * @param object ui dropped element\n\t\t */\n\t\tprocessStagedFields( ui, that, e) {\n\n\t\t\t// Make sure that our staged fields are sorted properly.\t\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:staging' );\n\t\t\t// Grab our staged fields.\n\t\t\tvar stagedFields = nfRadio.channel( 'fields' ).request( 'get:staging' );\n\n\t\t\t// Get our current field order.\n\t\t\tvar sortableEl = nfRadio.channel( 'fields-repeater' ).request( 'get:sortableEl' );\n\n\t\t\tlet order = [];\n\t\t\tif ( jQuery( sortableEl ).hasClass( 'repeater' ) ) { // Sortable isn't empty\n\t\t\t\t// If we're dealing with a sortable that isn't empty, get the order.\n\t\t\t\torder = jQuery( sortableEl ).sortable( 'toArray' );\n\t\t\t} else { // Sortable is empty\n\t\t\t\t// Sortable is empty, all we care about is our staged field draggable.\n\t\t\t\torder = ['nf-staged-fields-drag'];\n\t\t\t}    \n\t\t\t\n\t\t\t// Get the index of our droped element.\n\t\t\tlet insertedAt = order.indexOf( 'nf-staged-fields-drag' );\n\n\t\t\t// Loop through each staged fields model and insert a field.\n\t\t\t_.each( stagedFields.models, function( field, index ) {\n\t\t\t\t// Add our field.\n\t\t\t\tvar tmpID = nfRadio.channel( 'fields-repeater' ).request( 'add:childField', field, that, e );\n\t\t\t\t// Add this newly created field to our order array.\n\t\t\t\torder.splice( insertedAt + index, 0, tmpID );\n\t\t\t\t\n\t\t\t} );\n\n\t\t\t// Remove our dropped element from our order array.\n\t\t\tinsertedAt = order.indexOf( 'nf-staged-fields-drag' );\n\t\t\torder.splice( insertedAt, 1 );\n\n\t\t\t// Sort our fields\n\t\t\tnfRadio.channel( 'fields' ).request( 'sort:fields', order );\n\t\t\t// Clear our staging\n\t\t\tnfRadio.channel( 'fields' ).request( 'clear:staging' );\n\t\t\t// Remove our helper. Fixes a weird artifact.\n\t\t\tjQuery( ui.helper ).remove();\n\n\t\t},\n\n\t\t/**\n\t\t * Sort the fields in a repeater Field\n\t\t * \n\t\t * @param  Array \torder optional order array like: [field-1, field-4, field-2]\n\t\t * @return void\n\t\t */\n\t\tsortRepeaterField: function( order, ui, updateDB ) {\n\t\t\t// Add the field to this repeatable collection.\n\t\t\tlet collection = nfRadio.channel( 'fields-repeater' ).request( 'get:repeaterFieldsCollection' );\n\n\t\t\tif ( null == updateDB ) {\n\t\t\t\tupdateDB = true;\n\t\t\t}\n\t\t\t// Get our sortable element\n\t\t\tvar sortableEl = nfRadio.channel( 'fields-repeater' ).request( 'get:sortableEl' );\n\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) { // Make sure that sortable is enabled\n\t\t\t\t// JS ternerary for setting our order\n\t\t\t\tvar order = order || jQuery( sortableEl ).sortable( 'toArray' );\n\t\t\t\t// Loop through all of our fields and update their order value\n\t\t\t\t_.each( collection.models, function( field ) {\n\t\t\t\t\t// Get our current position.\n\t\t\t\t\tvar oldPos = field.get( 'order' );\n\t\t\t\t\tvar id = field.get( 'id' );\n\t\t\t\t\tif ( jQuery.isNumeric( id ) ) {\n\t\t\t\t\t\tvar search = 'field-' + id;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar search = id;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// Get the index of our field inside our order array\n\t\t\t\t\tvar newPos = order.indexOf( search ) + 1;\n\t\t\t\t\tfield.set( 'order', newPos );\n\t\t\t\t} );\n\n\t\t\t\tcollection.sort();\n\t\t\t\t\n\t\t\t\tif ( updateDB ) {\n\t\t\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\t\t\t// Update our preview\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\t\t\t\t\t\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When the user drags a field type or staging over our sortable, we need to modify the helper.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\toverRepeaterField: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type\n\t\t\t\t// String type\n\t\t\t\tvar type = jQuery( ui.helper ).data( 'id' );\n\t\t\t\t// Get our field type model.\n\t\t\t\tvar fieldType = nfRadio.channel( 'fields' ).request( 'get:type', type );\n\t\t\t\t// Get our field type nicename.\n\t\t\t\tvar label = fieldType.get( 'nicename' );\n\t\t\t\t// Get our sortable element.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields-repeater' ).request( 'get:sortableEl' );\n\n\t\t\t\t// Set our currentHelper to an object var so that we can access it later.\n\t\t\t\tthis.currentHelper = ui.helper;\n\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\n\t\t\t\t// Get our sortable, and if it's initialized add our hover class.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields-repeater' ).request( 'get:sortableEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).addClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When the user moves a draggable outside of the sortable, we need to change the helper.\n\t\t * This returns the item to its pre-over state.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\toutRepeaterField: function( ui ) {\n\t\t\tif( jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) ) { // Field Type\n\t\t\t\t/*\n\t\t\t\t * Get our helper clone.\n\t\t\t\t * This will let us access the previous label and classes of our helper.\n\t\t\t\t */ \n\t\t\t\tvar helperClone = nfRadio.channel( 'drawer-addField' ).request( 'get:typeHelperClone' );\n\t\t\t\t// Set our helper label, remove our sortable class, and add the type class back to the type draggable.\n\t\t\t\tjQuery( this.currentHelper ).html( jQuery( helperClone ).html() );\n\t\t\t\tjQuery( this.currentHelper ).removeClass( 'nf-field-wrap' ).addClass( 'nf-field-type-button' ).css( { 'width': '', 'height': '' } );\n\t\t\t\t// Get our sortable and if it has been intialized, remove the droppable hover class.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields-repeater' ).request( 'get:sortableEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t} else if ( jQuery( ui.item ).hasClass( 'nf-stage' ) ) { // Staging\n\t\t\t\t// If we've initialized our sortable, remove the droppable hover class.\n\t\t\t\tvar sortableEl = nfRadio.channel( 'fields-repeater' ).request( 'get:sortableEl' );\n\t\t\t\tif ( jQuery( sortableEl ).hasClass( 'ui-sortable' ) ) {\n\t\t\t\t\tjQuery( sortableEl ).removeClass( 'nf-droppable-hover' );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging in the sortable:\n\t\t * remove our opacity setting\n\t\t * remove our ui helper\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstopRepeaterField: function( ui ) {\n\t\t\tjQuery( ui.item ).css( 'opacity', '' );\n\t\t\tjQuery( ui.helper ).remove();\n\t\t\t//nfRadio.channel( 'fields' ).trigger( 'sortable:stop', ui );\n\t\t},\n\n\t\t/**\n\t\t * When we start dragging in the sortable:\n\t\t * add an opacity setting of 0.5\n\t\t * show our item (jQuery hides the original item by default)\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tstartRepeaterField: function( ui ) {\n\t\t\t// If we aren't dragging an item in from types or staging, update our change log.\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) && ! jQuery( ui.item ).hasClass( 'nf-stage' ) ) { \n\t\t\t\t\n\t\t\t\t// Maintain origional visibility during drag/sort.\n\t\t\t\tjQuery( ui.item ).show();\n\n\t\t\t\t// Determine helper based on builder/layout type.\n\t\t\t\tif(jQuery(ui.item).hasClass('nf-field-wrap')){\n\t\t\t\t\tvar newHelper = jQuery(ui.item).clone();\n\t\t\t\t} else if(jQuery(ui.item).parent().hasClass('layouts-cell')) {\n\t\t\t\t\tvar newHelper = $parentHelper.clone();\n\t\t\t\t} else {\n\t\t\t\t\tvar newHelper = jQuery(ui.item).clone();\n\t\t\t\t}\n\n\t\t\t\t// Remove unecessary item controls from helper.\n\t\t\t\tnewHelper.find('.nf-item-controls').remove();\n\n\t\t\t\t// Update helper with clone's content.\n\t\t\t\tjQuery( ui.helper ).html( newHelper.html() );\n\n\t\t\t\tjQuery( ui.helper ).css( 'opacity', '0.5' );\n\t\t\t\t\n\t\t\t\t// Add de-emphasize origional.\n\t\t\t\tjQuery( ui.item ).css( 'opacity', '0.25' );\n\t\t\t}\n\t\t\t//nfRadio.channel( 'fields' ).trigger( 'sortable:start', ui );\n\t\t},\n\n\t\t/**\n\t\t * Sort our fields when we change the order.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  Object \tui jQuery UI element\n\t\t * @return void\n\t\t */\n\t\tupdateRepeaterField: function( ui, sortable ) {\n\n\t\t\tnfRadio.channel( 'fields-repeater' ).request( 'sort:repeaterField' );\n\n\t\t\t// If we aren't dragging an item in from types or staging, update our change log.\n\t\t\tif( ! jQuery( ui.item ).hasClass( 'nf-field-type-draggable' ) && ! jQuery( ui.item ).hasClass( 'nf-stage' ) ) { \n\n\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields-repeater' ).request( 'get:repeaterFieldsCollection' );\n\t\t\t\tvar dragFieldID = jQuery( ui.item ).prop( 'id' ).replace( 'field-', '' );\n\t\t\t\tvar dragModel = fieldCollection.get( dragFieldID );\n\n\t\t\t\t// Add our change event to the change tracker.\n\t\t\t\tvar data = { fields: [] };\n\t\t\t\t_.each( fieldCollection.models, function( field ) {\n\t\t\t\t\tvar oldPos = field._previousAttributes.order;\n\t\t\t\t\tvar newPos = field.get( 'order' );\n\t\t\t\t\t\n\t\t\t\t\tdata.fields.push( {\n\t\t\t\t\t\tmodel: field,\n\t\t\t\t\t\tattr: 'order',\n\t\t\t\t\t\tbefore: oldPos,\n\t\t\t\t\t\tafter: newPos\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t\tvar label = {\n\t\t\t\t\tobject: 'Field',\n\t\t\t\t\tlabel: dragModel.get( 'label' ),\n\t\t\t\t\tchange: 'Re-ordered from ' + dragModel._previousAttributes.order + ' to ' + dragModel.get( 'order' ),\n\t\t\t\t\tdashicon: 'sort'\n\t\t\t\t};\n\n\t\t\t\t//nfRadio.channel( 'changes' ).request( 'register:change', 'sortFields', dragModel, null, label, data );\n\t\t\t}\n\n\t\t},\n\n\t});\n\n\t\n\t\n\treturn controller;\n} );\n","/**\n * Creates and stores a collection of action types. This includes all of the settings shown when editing a field.\n *\n * Loops over our preloaded data and adds that to our action type collection\n *\n * Also responds to requests for data about action types\n *\n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/types',[ 'models/app/typeCollection' ], function( TypeCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\n\t\t\t/*\n\t\t\t * Instantiate \"installed\" actions collection.\n\t\t\t */\n\t\t\tthis.installedActions = new TypeCollection(\n\t\t\t\t_.filter( actionTypeData, function( type ) {\n\t\t\t\t\treturn type.section == 'installed';\n\t\t\t\t\t} \n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tslug: 'installed',\n\t\t\t\t\tnicename: nfi18n.installed\n\t\t\t\t} \n\t\t\t);\n\n\t\t\tthis.availableActions = new TypeCollection(\n\t\t\t\t_.filter( actionTypeData, function( type ) {\n\t\t\t\t\treturn type.section == 'available';\n\t\t\t\t\t} \n\t\t\t\t),\n\t\t\t\t{\n\t\t\t\t\tslug: 'available',\n\t\t\t\t\tnicename: nfi18n.available\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:type', this.getType, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:installedActions', this.getInstalledActions, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:availableActions', this.getAvailableActions, this );\n\t\t},\n\n\t\t/**\n\t\t * Return a field type by id\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string \t\t\tid \tfield type\n\t\t * @return backbone.model    \tfield type model\n\t\t */\n\t\tgetType: function( id ) {\n\t\t\t// Search our installed actions first\n\t\t\tvar type = this.installedActions.get( id );\n\t\t\tif ( ! type ) {\n\t\t\t\ttype = this.availableActions.get( id );\n\t\t\t}\n        \treturn type;\n        },\n\n        /**\n         * Return the installed action type collection\n         *\n         * @since  3.0\n         * @return backbone.collection    \tfield type collection\n         */\n\t\tgetInstalledActions: function() {\n        \treturn this.installedActions;\n        },\n\n        /**\n         * Return the available action type collection\n         *\n         * @since  3.0\n         * @return backbone.collection    \tfield type collection\n         */\n\t\tgetAvailableActions: function() {\n        \treturn this.availableActions;\n        },\n\n        /**\n         * Add a field type to our staging area when the field type button is clicked.\n         *\n         * @since 3.0\n         * @param Object e event\n         * @return void\n         */\n        addStagedField: function( e ) {\n        \tvar type = jQuery( e.target ).data( 'id' );\n        \tnfRadio.channel( 'fields' ).request( 'add:stagedField', type );\n        },\n\n        /**\n         * Return our field type settings sections\n         *\n         * @since  3.0\n         * @return backbone.collection field type settings sections\n         */\n        getTypeSections: function() {\n            return this.fieldTypeSections;\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Model that represents our form action.\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/actions/actionModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tobjectType: 'Action',\n\t\t\tobjectDomain: 'actions',\n\t\t\teditActive: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Listen for model attribute changes\n\t\t\tthis.on( 'change', this.changeSetting, this );\n\n\t\t\t// Get our parent field type.\n\t\t\tvar actionType = nfRadio.channel( 'actions' ).request( 'get:type', this.get( 'type' ) );\n\n\t\t\tif( 'undefined' == typeof actionType ) return;\n\n\t\t\t// Loop through our action type \"settingDefaults\" and add any default settings.\n\t\t\tvar that = this;\n\t\t\t_.each( actionType.get( 'settingDefaults' ), function( val, key ) {\n\t\t\t\tif ( ! that.get( key ) ) {\n\t\t\t\t\tthat.set( key, val, { silent: true } );\n\t\t\t\t}\n\t\t\t} );\n\t\t\t\n\t\t\t/*\n\t\t\t * Trigger an init event on three channels:\n\t\t\t * \n\t\t\t * actions\n\t\t\t * action-type\n\t\t\t *\n\t\t\t * This lets specific field types modify model attributes before anything uses them.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'actions' ).trigger( 'init:actionModel', this );\n\t\t\tnfRadio.channel( 'actions-' + this.get( 'type' ) ).trigger( 'init:actionModel', this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\n\t\t},\n\n\t\t/**\n\t\t * When we change the model attributes, fire an event saying we've changed something.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeSetting: function( model, options ) {\n            nfRadio.channel( 'actionSetting-' + _.keys( this.changedAttributes() )[0] ).trigger( 'update:setting', this, options.settingModel ) ;\n\t\t\tnfRadio.channel( 'actions').trigger( 'update:setting', this, options.settingModel );\n            nfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\n\t\t},\n\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our action models. \n * This is the actual action data created by the user.\n *\n * We listen to the add and remove events so that we can push the new id to either the new action or removed action property.\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/actions/actionCollection',['models/actions/actionModel'], function( actionModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: actionModel,\n\t\tcomparator: 'order',\n\t\ttmpNum: 1,\n\n\t\tinitialize: function() {\n\t\t\tthis.on( 'add', this.addAction, this );\n\t\t\tthis.on( 'remove', this.removeAction, this );\n\t\t\tthis.newIDs = [];\n\t\t},\n\n\t\t/**\n\t\t * When we add a field, push the id onto our new action property.\n\t\t * This lets us tell the server that this is a new field to be added rather than a field to be updated.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param void\n\t\t */\n\t\taddAction: function( model ) {\n\t\t\tthis.newIDs.push( model.get( 'id' ) );\n\t\t},\n\n\t\t/**\n\t\t * When we remove a field, push the id onto our removed action property.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param void\n\t\t */\n\t\tremoveAction: function( model ) {\n\t\t\tthis.removedIDs[ model.get( 'id' ) ] = model.get( 'id' );\n\t\t}\n\t} );\n\treturn collection;\n} );\n","/**\n * Handles interactions with our actions collection.\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/data',['models/actions/actionCollection', 'models/actions/actionModel'], function( actionCollection, actionModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Load our action collection from our localized form data\n\t\t\tthis.collection = new actionCollection( preloadedFormData.actions );\n\t\t\tthis.collection.tmpNum = 1;\n\n\t\t\tif ( 0 != this.collection.models.length ) {\n\t\t\t\tvar that = this;\n\t\t\t\t_.each( this.collection.models, function( action ) {\n\t\t\t\t\tif ( ! jQuery.isNumeric( action.get( 'id' ) ) ) {\n\t\t\t\t\t\tthat.collection.tmpNum++;\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\t\t\t// Set our removedIDs to an empty object. This will be populated when a action is removed so that we can add it to our 'deleted_actions' object.\n\t\t\tthis.collection.removedIDs = {};\n\n\t\t\t// Respond to requests for data about actions and to update/change/delete actions from our collection.\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:collection', this.getCollection, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:action', this.getAction, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:tmpID', this.getTmpID, this );\n\n\t\t\tnfRadio.channel( 'actions' ).reply( 'add', this.addAction, this );\n\t\t\tnfRadio.channel( 'actions' ).reply( 'delete', this.deleteAction, this );\n\t\t},\n\n\t\tgetCollection: function() {\n\t\t\treturn this.collection;\n\t\t},\n\n\t\tgetAction: function( id ) {\n\t\t\treturn this.collection.get( id );\n\t\t},\n\n\t\t/**\n\t\t * Add a action to our collection. If silent is passed as true, no events will trigger.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param Object \tdata \taction data to insert\n\t\t * @param bool \t\tsilent \tprevent events from firing as a result of adding\t \t\n\t\t */\n\t\taddAction: function( data, silent ) {\n\t\t\tsilent = silent || false;\n\n\t\t\tif ( false === data instanceof Backbone.Model ) {\n\t\t\t\tvar model = new actionModel( data );\n\t\t\t} else {\n\t\t\t\tvar model = data;\n\t\t\t}\n\n\t\t\tthis.collection.add( model, { silent: silent } );\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\n\t\t\treturn model;\n\t\t},\n\n\t\t/**\n\t\t * Delete a action from our collection.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  backbone.model \tmodel \taction model to be deleted\n\t\t * @return void\n\t\t */\n\t\tdeleteAction: function( model ) {\n\t\t\tthis.collection.remove( model );\n\t\t\t// Set our 'clean' status to false so that we get a notice to publish changes\n\t\t\tnfRadio.channel( 'app' ).request( 'update:setting', 'clean', false );\n\t\t\tnfRadio.channel( 'app' ).request( 'update:db' );\n\n\t\t},\n\n\n\t\t/**\n\t\t * Return a new tmp id for our actions.\n\t\t * Gets the action collection length, adds 1, then returns that prepended with 'tmp-'.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return string\n\t\t */\n\t\tgetTmpID: function() {\n\t\t\tvar tmpNum = this.collection.tmpNum;\n\t\t\tthis.collection.tmpNum++;\n\t\t\treturn 'tmp-' + tmpNum;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Fetches settings models so that we can get setting information\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/actionSettings',['models/app/settingCollection'], function( settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.collection = new settingCollection( actionSettings, { objectType: 'actions' } );\n\n\t\t\t// Responds to requests for settings models.\n\t\t\tnfRadio.channel( 'actions' ).reply( 'get:settingModel', this.getSettingModel, this );\n\t\t},\n\n\t\tgetSettingModel: function( name ) {\n\t\t\treturn this.collection.findWhere( { name: name } );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles adding and removing the active class from a action currently being edited.\n * \n * @package Ninja Forms builder\n * @subpackage Actions - Edit Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/editActive',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests to remove the active class from all our actions.\n\t\t\tnfRadio.channel( 'actions' ).reply( 'clear:editActive', this.clearEditActive, this );\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\n\t\t},\n\n\t\t/**\n\t\t * Loops through our actions collection and sets editActive to false.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n        clearEditActive: function() {\n            var actionCollection = nfRadio.channel( 'actions' ).request( 'get:collection' );\n            _.each( actionCollection.models, function( action ) {\n\t\t\t\taction.set( 'editActive', false );\n            } );\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * @package Ninja Forms builder\n * @subpackage Actions - Action Settings Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/emailFromSetting',[], function( ) {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'actionSetting-from_address' ), 'update:setting', this.updateFromAddress );\n        },\n\n        updateFromAddress: function( dataModel, settingModel ) {\n            if( 'undefined' == typeof settingModel ) return;\n\n            var value = dataModel.get( 'from_address' ).trim();\n\n            if( '{wp:admin_email}' == value ) {\n                return settingModel.set( 'warning', false );\n            }\n\n            if( value && ( ! this.isValidEmail( value ) ) || nfAdmin.home_url_host != value.replace(/.*@/, \"\") ){\n                return settingModel.set( 'warning', nfi18n.errorInvalidEmailFromAddress );\n            }\n\n            return settingModel.set( 'warning', false );\n        },\n\n        isValidEmail: function(email) {\n            return /^.+@.+\\..+$/.test(email);\n        }\n    });\n    return controller;\n} );\n","/**\n * Handles clicks and dragging for our action types.\n * \n * @package Ninja Forms builder\n * @subpackage Fields - New Field Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/addActionTypes',['models/actions/actionCollection', 'models/actions/actionModel'], function( actionCollection, actionModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'actions' ), 'click:addAction', this.addAction );\n\n\t\t\tnfRadio.channel( 'actions' ).reply( 'add:actionType', this.addAction, this );\n\t\t},\n\n\t\t/**\n\t\t * Add an action to our collection. If silent is passed as true, no events will trigger.\n\t\t * \n\t\t * @since 3.0\n\t\t * @param Object \tdata \taction data to insert\n\t\t * @param bool \t\tsilent \tprevent events from firing as a result of adding\t \t\n\t\t */\n\t\taddAction: function( type ) {\n\n\t\t\tvar data = {\n\t\t\t\tid: nfRadio.channel( 'actions' ).request( 'get:tmpID' ),\n\t\t\t\ttype: type.get( 'id' ),\n\t\t\t\tlabel: type.get( 'settingDefaults').label || type.get( 'nicename' )\n\t\t\t}\n\n\t\t\tvar newModel = nfRadio.channel( 'actions' ).request( 'add', data );\n\n\t\t\tvar label = {\n\t\t\t\tobject: 'Action',\n\t\t\t\tlabel: newModel.get( 'label' ),\n\t\t\t\tchange: 'Added',\n\t\t\t\tdashicon: 'plus-alt'\n\t\t\t};\n\n\t\t\tvar data = {\n\t\t\t\tcollection: nfRadio.channel( 'actions' ).request( 'get:collection' )\n\t\t\t}\n\n\t\t\tnfRadio.channel( 'changes' ).request( 'register:change', 'addObject', newModel, null, label, data );\n\t\t\tnfRadio.channel( 'app' ).trigger( 'click:edit', {}, newModel );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles the logic for our action type draggables.\n * \n * @package Ninja Forms builder\n * @subpackage Actions - New Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/typeDrag',[], function( ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our action type draggables and run the appropriate function.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'startDrag:type', this.startDrag );\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'stopDrag:type', this.stopDrag );\n\t\t\t/*\n\t\t\t * Respond to requests for our helper clone.\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'drawer-addAction' ).reply( 'get:typeHelperClone', this.getCurrentDraggableHelperClone, this );\n\t\t},\n\n\t\t/**\n\t\t * When we start dragging:\n\t\t * get our drawer element\n\t\t * set its overflow property to visible !important -> forces the type drag element to be on at the top of the z-index.\n\t\t * get our main element\n\t\t * est its overflow propery to visible !important -> forces the type drag element to be on top of the z-index.\n\t\t * set our dragging helper clone\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\n\t\t * @return void\n\t\t */\n\t\tstartDrag: function( context, ui ) {\n\t\t\tthis.drawerEl = nfRadio.channel( 'app' ).request( 'get:drawerEl' );\n\t\t\tthis.mainEl = nfRadio.channel( 'app' ).request( 'get:mainEl' );\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'visible', 'important' );\n\n\t\t\tthis.draggableHelperClone = jQuery( ui.helper ).clone();\n\n\t\t},\n\n\t\t/**\n\t\t * When we stop dragging, reset our overflow property to hidden !important.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  object context \tThis function is going to be called from a draggable. Context is the \"this\" reference to the draggable.\n\t\t * @param  object ui      \tObject sent by jQuery UI draggable.\n\t\t * @return {[type]}         [description]\n\t\t */\n\t\tstopDrag: function( context, ui ) {\n\t\t\tjQuery( this.drawerEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t\t// jQuery( this.mainEl )[0].style.setProperty( 'overflow', 'hidden', 'important' );\n\t\t},\n\n\t\tgetCurrentDraggableHelperClone: function() {\n\t\t\treturn this.draggableHelperClone;\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles the logic for our action type droppable.\n * \n * @package Ninja Forms builder\n * @subpackage Actions - New Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/droppable',[], function( ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * Respond to requests for our helper clone.\n\t\t\t * This is used by other parts of the application to modify what the user is dragging in real-time.\n\t\t\t */ \n\t\t\tnfRadio.channel( 'app' ).reply( 'drop:actionType', this.dropActionType, this );\n\t\t},\n\n\t\tdropActionType: function( e, ui ) {\n\t\t\tvar type_slug = jQuery( ui.helper ).data( 'type' );\n\t\t\tvar type = nfRadio.channel( 'actions' ).request( 'get:type', type_slug );\n\t\t\tnfRadio.channel( 'actions' ).request( 'add:actionType', type );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Model for our action type\n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/actions/typeModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Collection that holds our action type models. \n * \n * @package Ninja Forms builder\n * @subpackage Actions\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/actions/typeCollection',['models/actions/typeModel'], function( actionTypeModel ) {\n\tvar collection = Backbone.Collection.extend( {\n\t\tmodel: actionTypeModel,\n\t} );\n\treturn collection;\n} );\n","/**\n * Filters our action type collection.\n * \n * @package Ninja Forms builder\n * @subpackage Actions - New Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/filterTypes',['models/actions/typeCollection'], function( typeCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen to our change filter event.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-addAction' ), 'change:filter', this.filterActionTypes );\n\t\t},\n\n\t\t/**\n\t\t * Filter our action types in the add new action drawer\n\t\t * \n\t\t * Takes a search string and finds any action types that match either the name or alias.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string\t search \tstring being searched for\n\t\t * @param  object \t e      \tKeyup event\n\t\t * @return void\n\t\t */\n\t\tfilterActionTypes: function( search, e ) {\n\n\t\t\t// Make sure that we aren't dealing with an empty string.\n\t\t\tif ( '' != jQuery.trim( search ) ) {\n\n        \t\tvar filteredInstalled = [];\n        \t\t/**\n        \t\t * Call the function that actually filters our collection,\n        \t\t * and then loop through our collection, adding each model to our filteredInstalled array.\n        \t\t */\n\t\t\t\tvar installedActions = nfRadio.channel( 'actions' ).request( 'get:installedActions' );\n        \t\t_.each( this.filterCollection( search, installedActions ), function( model ) {\n        \t\t\tfilteredInstalled.push( model );\n        \t\t} );\n\n        \t\tvar filteredAvailable = [];\n        \t\tvar availableActions = nfRadio.channel( 'actions' ).request( 'get:availableActions' );\n        \t\t_.each( this.filterCollection( search, availableActions ), function( model ) {\n        \t\t\tfilteredAvailable.push( model );\n        \t\t} );\n\n        \t\t// Create a new Action Type Section collection with the filtered array.\n        \t\tvar newInstalled = new typeCollection( filteredInstalled );\n        \t\tnewInstalled.slug = 'installed';\n        \t\tnewInstalled.nicename = 'Installed';\n\n        \t\tvar newAvailable = new typeCollection( filteredAvailable );\n        \t\tnewAvailable.slug = 'available';\n\t\t\t\tnewAvailable.nicename = 'Available';\n\n        \t\t// Request that our action types filter be applied, passing the collection we created above.\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'filter:actionTypes', newInstalled, newAvailable );\n        \t\t// If we've pressed the 'enter' key, add the action to staging and clear the filter.\n        \t\tif ( e.addObject ) {\n        \t\t\tif ( 0 < newInstalled.length ) {\n        \t\t\t\tnfRadio.channel( 'actions' ).request( 'add:actionType', newInstalled.models[0] );\n        \t\t\t\tnfRadio.channel( 'drawer' ).request( 'clear:filter' );\n        \t\t\t}\n        \t\t}\n        \t} else {\n        \t\t// Clear our filter if the search text is empty.\n        \t\tnfRadio.channel( 'drawer' ).trigger( 'clear:filter' );\n        \t}\n        },\n\n        /**\n         * Search our action type collection for the search string.\n         * \n         * @since  3.0\n         * @param  string\t search \tstring being searched for\n         * @return backbone.collection\n         */\n        filterCollection: function( search, collection ) {\n        \tsearch = search.toLowerCase();\n        \t/*\n        \t * Backbone collections have a 'filter' method that loops through every model,\n        \t * waiting for you to return true or false. If you return true, the model is kept.\n        \t * If you return false, it's removed from the filtered result.\n        \t */\n\t\t\tvar filtered = collection.filter( function( model ) {\n\t\t\t\tvar found = false;\n\t\t\t\t\n\t\t\t\t// If we match either the ID or nicename, return true.\n\t\t\t\tif ( model.get( 'id' ).toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t} else if ( model.get( 'nicename' ).toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\tfound = true;\n\t\t\t\t}\n\n\t\t\t\t/*\n\t\t\t\t * TODO: Hashtag searching. Doesn't really do anything atm.\n\t\t\t\t */\n\t\t\t\tif ( model.get( 'tags' ) && 0 == search.indexOf( '#' ) ) {\n\t\t\t\t\t_.each( model.get( 'tags' ), function( tag ) {\n\t\t\t\t\t\tif ( search.replace( '#', '' ).length > 1 ) {\n\t\t\t\t\t\t\tif ( tag.toLowerCase().indexOf( search.replace( '#', '' ) ) != -1 ) {\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t}\t\t\t\t\t\t\t\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\t// If we match any of the aliases, return true.\n\t\t\t\tif ( model.get( 'alias' ) ) {\n\t\t\t\t\t_.each( model.get( 'alias' ), function( alias ) {\n\t\t\t\t\t\tif ( alias.toLowerCase().indexOf( search ) != -1 ) {\n\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\n\t\t\t\treturn found;\n\t\t\t} );\n\n\t\t\t// Return our filtered collection.\n\t\t\treturn filtered;\n        }\n\t});\n\n\treturn controller;\n} );\n","/**\n * @package Ninja Forms builder\n * @subpackage Actions - New Action Drawer\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/actions/newsletterList',[], function( ) {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            this.listenTo( nfRadio.channel( 'setting-newsletter_list' ),             'show:setting',      this.defaultFields );\n            this.listenTo( nfRadio.channel( 'setting-type-newsletter_list' ),        'click:extra',       this.clickListUpdate );\n            this.listenTo( nfRadio.channel( 'actionSetting-newsletter_list' ),       'update:setting',    this.maybeRenderFields );\n            this.listenTo( nfRadio.channel( 'actionSetting-newsletter_list' ),       'update:setting',    this.maybeRenderGroups );\n            this.listenTo( nfRadio.channel( 'setting-name-newsletter_list_fields' ), 'init:settingModel', this.registerFieldsListener );\n            this.listenTo( nfRadio.channel( 'setting-name-newsletter_list_groups' ), 'init:settingModel', this.registerGroupsListener );\n        },\n\n        defaultFields: function( settingModel, dataModel ) {\n            this.maybeRenderFields( dataModel, settingModel );\n            this.maybeRenderGroups( dataModel, settingModel );\n        },\n\n        registerFieldsListener: function ( model ) {\n            model.listenTo( nfRadio.channel( 'newsletter_list_fields' ), 'update:fieldMapping', this.updateFieldMapping, model );\n        },\n\n        registerGroupsListener: function ( model ) {\n            model.listenTo( nfRadio.channel( 'newsletter_list_groups' ), 'update:interestGroups', this.updateInterestGroups, model );\n        },\n\n        clickListUpdate: function( e, settingModel, dataModel, settingView ) {\n\n            var data = {\n                action: 'nf_' + dataModel.attributes.type + '_get_lists',\n                security: nfAdmin.ajaxNonce\n            };\n\n            var that = this;\n            jQuery( e.srcElement ).addClass( 'spin' );\n            jQuery.post( ajaxurl, data, function( response ){\n                var response = JSON.parse( response );\n                that.updateLists( settingModel, response.lists, settingView, dataModel );\n                dataModel.set( 'newsletter_list', response.lists[0].value, { settingModel: settingModel } );\n            }).always( function() {\n                jQuery( e.srcElement ).removeClass( 'spin' );\n            });\n        },\n\n        updateLists: function( settingModel, lists, settingView, dataModel ) {\n            settingModel.set( 'options', lists );\n            settingView.render();\n        },\n\n        maybeRenderFields: function( dataModel, settingModel ) {\n\n            if( 'undefined' == typeof settingModel ) return;\n\n            var selectedList = dataModel.get( 'newsletter_list' );\n            var lists = settingModel.get( 'options' );\n            _.each( lists, function( list ) {\n                if ( selectedList == list.value ) {\n                    nfRadio.channel( 'newsletter_list_fields').trigger( 'update:fieldMapping', list.fields );\n                }\n            } );\n\n            dataModel.set( 'newsletter_list_fields', 0 );\n        },\n\n        maybeRenderGroups: function( dataModel, settingModel ) {\n            if( 'undefined' == typeof settingModel ) return;\n\n            var selectedList = dataModel.get( 'newsletter_list' );\n            var lists = settingModel.get( 'options' );\n            _.each( lists, function( list ) {\n                if ( selectedList == list.value ) {\n                    nfRadio.channel( 'newsletter_list_groups').trigger( 'update:interestGroups', list.groups );\n                }\n            } );\n\n            dataModel.set( 'newsletter_list_fields', 0 );\n        },\n\n        updateFieldMapping: function( fields ) {\n           var settings = this.get( 'settings' );\n            settings.reset();\n            _.each( fields, function( field ){\n\n                settings.add({\n                    name: field.value,\n                    type: 'textbox',\n                    label: field.label,\n                    width: 'full',\n                    use_merge_tags: { exclude: [ 'user', 'post', 'system', 'querystrings' ] }\n                });\n            });\n            this.set( 'settings', settings );\n        },\n\n        updateInterestGroups: function( groups ) {\n            var settings = this.get( 'settings' );\n            settings.reset();\n            _.each( groups, function( group ){\n\n                settings.add({\n                    name: group.value,\n                    type: 'toggle',\n                    label: group.label,\n                    width: 'full',\n                });\n            });\n            this.set( 'settings', settings );\n        },\n\n    });\n\n    return controller;\n} );\n\n","/**\n * Listens to field deletion, removing any merge tags that reference the field.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1.7\n */\ndefine( 'controllers/actions/deleteFieldListener',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * When we init an action model, register a listener for field deletion.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'actions' ), 'init:actionModel', this.registerListener );\n\t\t},\n\n\t\tregisterListener: function( actionModel ) {\n\t\t\tactionModel.listenTo( nfRadio.channel( 'fields' ), 'delete:field', this.maybeUpdateSettings );\n\t\t},\n\n\t\tmaybeUpdateSettings: function( fieldModel ) {\n\t\t\tvar newObject, filteredCollection,\n\t\t\t\tfieldMergeTag = '{field:' + fieldModel.get( 'key' ) + '}';\n\t\t\t\n\t\t\t/*\n\t\t\t * Loop through our action attributes to see if the field mergetag exists in our action.\n\t\t\t *\n\t\t\t * If it does:\n\t\t\t * \t- Replace the field mergetag in strings with ''.\n\t\t\t * \t- Remove any items with the field merge tag if they are in an array.\n\t\t\t */\n\t\t\t_.each( this.attributes, function( attr, key ) {\n\t\t\t\tif ( _.isString( attr ) ) {\n\t\t\t\t\t// If our attribute is a string, replace any instances of the field merge tag with an empty string.\n\t\t\t\t\tthis.set( key, attr.replace( fieldMergeTag, '' ) );\n\t\t\t\t} else if ( _.isArray( attr ) ) {\n\t\t\t\t\t// If our attribute is an array, search the contents for field merge tag and remove items that match.\n\t\t\t\t\t_.each( attr, function( val, index ) {\n\t\t\t\t\t\tif ( _.isString( val ) ) {\n\t\t\t\t\t\t\t// If val is a string, search it for the field mergetag.\n\t\t\t\t\t\t\tconsole.log( 'string replace' );\n\t\t\t\t\t\t} else if ( _.isArray( val ) ) {\n\t\t\t\t\t\t\t// If val is an array, search it for the field mergetag.\n\t\t\t\t\t\t\tconsole.log( 'array search' );\n\t\t\t\t\t\t} else if ( _.isObject( val ) ) {\n\t\t\t\t\t\t\t// If val is a object, search it for the field mergetag.\n\t\t\t\t\t\t\tnewObject = _.mapObject( val, function( value, key ) {\n\t\t\t\t\t\t\t\tif ( _.isString( value ) ) {\n\t\t\t\t\t\t\t\t\tif ( -1 != value.indexOf( fieldMergeTag ) ) {\n\t\t\t\t\t\t\t\t\t\tattr.splice( index, 1 );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\treturn value;\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\tthis.set( key, attr );\n\t\t\t\t\t\t}\n\t\t\t\t\t}, this );\n\t\t\t\t} else if ( attr instanceof Backbone.Collection ) {\n\t\t\t\t\t// This is a Backbone Collection, so we need to loop through the models and remove any that have an attribute containing the field merge tag.\n\t\t\t\t\tvar filteredCollection = attr.filter( function ( model ) {\n\t\t\t\t\t\t// Make sure that EVERY model attribute does NOT reference the field merge tag.\n\t\t\t\t\t    return _.every( model.attributes, function( val ) {\n\t\t\t\t\t    \t/*\n\t\t\t\t\t    \t * Currently only handles items that are one-level deep.\n\t\t\t\t\t    \t * TODO: Add support for further nesting of values.\n\t\t\t\t\t    \t */\n\t\t\t\t\t    \tif ( _.isString( val ) ) {\n\t\t\t\t\t    \t\tif ( -1 != val.indexOf( fieldMergeTag ) ) {\n\t\t\t\t\t    \t\t\treturn false;\n\t\t\t\t\t    \t\t}\n\t\t\t\t\t    \t}\n\t\t\t\t\t    \treturn true;\n\t\t\t\t\t    });;\n\t\t\t\t\t});\n\t\t\t\t\t// Update our key with the filtered collection value.\n\t\t\t\t\tthis.set( key, filteredCollection );\n\t\t\t\t}\n\t\t\t}, this );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a collect payment setting, add our number fields and total fields to the data model.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1.7\n */\ndefine( 'controllers/actions/collectPaymentFields',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Listen for messages that are fired before a setting view is rendered.\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n\t\t},\n\n\t\tbeforeRenderSetting: function( settingModel, dataModel, view ) {\n\t\t\tif ( 'field' != settingModel.get( 'total_type' ) ) return false;\n\n\t\t\tvar fields = this.getFields( settingModel );\n\n\t\t\t/*\n\t\t\t * If the field in the payment total isn't in our field list, add it.\n\t\t\t *\n\t\t\t * Remove the merge tag stuff to get the field key.\n\t\t\t */\n\t\t\t\n\t\t\tvar field_key = dataModel.get( 'payment_total' );\n\t\t\tfield_key = field_key.replace( '{field:', '' );\n\t\t\tfield_key = field_key.replace( '}', '' );\n\t\t\tvar fieldModel = nfRadio.channel( 'fields' ).request( 'get:field', field_key );\n\n\t\t\tif ( 'undefined' != typeof fieldModel ) {\n\t\t\t\tif ( 'undefined' == typeof _.findWhere( fields, { value: dataModel.get( 'payment_total' ) } ) ) {\n\t\t\t\t\tfields.push( { label: fieldModel.get( 'label' ), value: '{field:' + fieldModel.get( 'key' ) + '}' } );\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\t * Update our fields options.\n\t\t\t */\n\t\t\tsettingModel.set( 'options', fields );\n\t\t\t\n\t\t},\n\n\t\tgetFields: function( settingModel ) {\n\t\t\tvar returnFields = [ settingModel.get( 'default_options' ) ];\n\t\t\t// Update our dataModel with all of our product fields.\n\t\t\tvar fields = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t_.each( fields.models, function( field ) {\n\t\t\t\tif ( 'number' == field.get( 'type' ) || 'total' == field.get( 'type' ) || 'checkbox' == field.get( 'type' ) ) {\n\t\t\t\t\treturnFields.push( { label: field.get( 'label' ), value: '{field:' + field.get( 'key' ) + '}' } );\n\t\t\t\t}\n\t\t\t} );\n\n\t\t\treturnFields = _.sortBy( returnFields, function( field ) { return field.label } );\n\n\t\t\treturn returnFields;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we're rendering a collect payment setting, add our calculations to the data model.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1.7\n */\ndefine( 'controllers/actions/collectPaymentCalculations',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            // Listen for messages that are fired before a setting view is rendered.\n            this.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n        },\n\n        beforeRenderSetting: function( settingModel, dataModel, view ) {\n            if ( 'calc' == settingModel.get( 'total_type' ) ) {\n                var calcModels = nfRadio.channel( 'app' ).request( 'get:formModel' );\n                var calcs = this.getCalcs( calcModels, settingModel );\n\n                settingModel.set( 'options', calcs );\n            }\n        },\n\n        getCalcs: function( calcModels, settingModel ) {\n            var returnCalcs = [ settingModel.get( 'default_options' ) ];\n\n            // Update our dataModel with all of our product fields.\n            var calcs = calcModels.get( 'settings' ).get( 'calculations' );\n\n            _.each( calcs.models, function( calc ) {\n                returnCalcs.push( { label: calc.get( 'name' ), value: '{calc:' + calc.get( 'name' ) + '}' } );\n            } );\n\n            returnCalcs = _.sortBy( returnCalcs, function( calc ) { return calc.label } );\n\n            return returnCalcs;\n        }\n\n    });\n\n    return controller;\n} );\n","/**\n * Listens to our app channel for settings views being rendered.\n *\n * If we haven't set a total_type, then set the total_type to fixed.\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1.7\n */\ndefine( 'controllers/actions/collectPaymentFixed',[], function() {\n    var controller = Marionette.Object.extend( {\n        initialize: function() {\n            // Listen for messages that are fired before a setting view is rendered.\n            this.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.beforeRenderSetting );\n        },\n\n        beforeRenderSetting: function( settingModel, dataModel, view ) {\n\n            if ( 'payment_total_type' != settingModel.get( 'name' ) || _.isEmpty( dataModel.get( 'payment_total' ) ) ) return false;\n\n            /*\n             * If we don't have a payment total type and we have a payment total, set our total type to the appropriate total type.\n             */\n            if ( ( 'undefined' == dataModel.get( 'payment_total_type' ) || _.isEmpty( dataModel.get( 'payment_total_type' ) ) ) ) {\n                /*\n                 * If payment_total is a field merge tag, set payment_total_type to \"field\"\n                 */\n\n                if ( -1 != dataModel.get( 'payment_total' ).indexOf( '{field' ) ) {\n                    dataModel.set( 'payment_total_type', 'field' );\n                } else if ( -1 != dataModel.get( 'payment_total' ).indexOf( '{calc' ) ) {\n                    dataModel.set( 'payment_total_type', 'calc' );\n                } else {\n                    dataModel.set( 'payment_total_type', 'fixed' );\n                }   \n            }\n        },\n\n    });\n\n    return controller;\n} );\n","/**\n * When we init a collect payment action, listen for calc changes\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1.7\n */\ndefine( 'controllers/actions/collectPayment',[], function( settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * When we init a collect payment action model, register a listener for calc changes.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'actions-collectpayment' ), 'init:actionModel', this.initCollectPayment );\n\t\t\t\n\t\t\t/*\n\t\t\t * Before we render our total field, we may want to update its value.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'before:renderSetting', this.maybeClearTotal );\n\t\t},\n\n\t\t/**\n\t\t * When a collect payment action is init'd, register a listener for calc changes and update our data appropriately.\n\t\t * @since  3.1.7\n\t\t * @param  {backbone.model} actionModel \n\t\t * @return {void}\n\t\t */\n\t\tinitCollectPayment: function( actionModel )  {\n\t\t\tactionModel.listenTo( nfRadio.channel( 'calcs' ), 'update:calcName', this.maybeUpdateTotal );\n        },\n\n\t\t//TODO: Add in an error that will not allow drawer to close until total type and total value is selected.\n\t\tmaybeError: function(){},\n\n\t\tmaybeUpdateTotal: function( optionModel, oldName ) {\n\t\t\t/*\n\t\t\t * We have changed a calculation. Make sure that 'calc' is our payment total type.\n\t\t\t */\n\t\t\tif ( 'calc' != this.get( 'payment_total_type' ) ) {\n\t\t\t\treturn\n\t\t\t}\n\t\t\t\n\t\t\t/*\n\t\t\t * Check our payment_total setting for the old merge tag and replace it with the new one.\n\t\t\t */\n\t\t\tvar newVal = this.get( 'payment_total' ).replace( '{calc:' + oldName + '}', '{calc:' + optionModel.get( 'name' ) + '}' );\n\t\t\tthis.set( 'payment_total', newVal );\n\t\t},\n\n\t\tmaybeClearTotal: function( settingModel, dataModel, view ) {\n            /*\n             * If our payment_total is a merge tag, clear it when we select the \"fixed\" option.\n             */\n            if ( 'fixed' == dataModel.get( 'payment_total_type' ) ) {\n                if ( -1 != dataModel.get( 'payment_total' ).indexOf( '{field' ) || -1 != dataModel.get( 'payment_total' ).indexOf( '{calc' ) ) {\n                    dataModel.set( 'payment_total', '' );\n                }\n            }\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * When we init a save action, listen for form changes\n *\n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2017 WP Ninjas\n * @since 3.1.7\n */\ndefine( 'controllers/actions/save',[], function( settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'actions-save' ), 'init:actionModel', this.initSave );\n\t\t},\n\n\t\t/**\n\t\t * Set listeners up to listen for add/delete fields for Save action\n\t\t */\n\t\tinitSave: function( actionModel ) {\n\n\t\t\tthis.model = actionModel;\n\n\t\t\t/*\n\t\t\t * When we init a save action model, register a listener for new\n\t\t\t  * fields\n\t\t\t */\n\t\t\tthis.listenTo( Backbone.Radio.channel( 'fields' ), 'add:field',\n\t\t\t\tthis.checkFieldAdded );\n\n\t\t\t/*\n\t\t\t * When we init a save action model, register a listener for deleted\n\t\t\t  * fields\n\t\t\t */\n\t\t\tthis.listenTo( Backbone.Radio.channel( 'fields' ), 'delete:field',\n\t\t\t\tthis.checkFieldDeleted );\n\t\t},\n\n\t\t/**\n\t\t * When a save action is init'd, check to see if a new field added\n\t\t * is an email and decide if it needs to be the 'submitter_email'\n\t\t * for privacy regulation functionality\n\t\t *\n\t\t * @param  {backbone.model} actionModel\n\t\t * @return {void}\n\t\t */\n\t\tcheckFieldAdded: function( newFieldModel ) {\n\t\t\tif( 'email' == newFieldModel.get( 'type' ) ) {\n\t\t\t\tvar submitter_email = this.model.get('submitter_email');\n\n\t\t\t\tif( '' === submitter_email ) {\n\t\t\t\t\tthis.model.set( 'submitter_email', newFieldModel.get( 'key' ) );\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * When a save action is init'd, check to see if a field that has been\n\t\t * deleted is an email and rearrance the submitter email setting\n\t\t * for privacy regulation functionality\n\t\t *\n\t\t * @param  {backbone.model} actionModel\n\t\t * @return {void}\n\t\t */\n\t\tcheckFieldDeleted: function( fieldModel ) {\n\t\t\tvar submitter_email = this.model.get( 'submitter_email' );\n\t\t\t\n\t\t\tif( submitter_email == fieldModel.get( 'key' ) ) {\n\t\t\t\tthis.model.set( 'submitter_email', '' );\n\t\t\t}\n\t\t},\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Creates and stores a collection of form setting types. This includes all of the settings shown when editing a field.\n *\n * Loops over our preloaded data and adds that to our form setting type collection\n *\n * Also responds to requests for data about form setting types\n *\n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/types',[\n\t\t'models/app/typeCollection'\n\t],\n\tfunction(\n\t\tTypeCollection\n\t) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Create our field type collection\n\t\t\tthis.collection = new TypeCollection( formSettingTypeData );\n\n\t\t\t// Respond to requests to get field type, collection, settings, and sections\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:type', this.getType, this );\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:typeCollection', this.getCollection, this );\n\t\t},\n\n\t\t/**\n\t\t * Return a field type by id\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string \t\t\tid \tfield type\n\t\t * @return backbone.model    \tfield type model\n\t\t */\n\t\tgetType: function( id ) {\n\t\t\treturn this.collection.get( id );\n        },\n\n        /**\n         * Return the installed action type collection\n         *\n         * @since  3.0\n         * @return backbone.collection    \tfield type collection\n         */\n\t\tgetCollection: function() {\n        \treturn this.collection;\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Model that represents our form settings.\n * \n * @package Ninja Forms builder\n * @subpackage Form Settings\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'models/advanced/settingsModel',[], function() {\n\tvar model = Backbone.Model.extend( {\n\t\tdefaults: {\n\t\t\tobjectType: 'Form Setting',\n\t\t\teditActive: false\n\t\t},\n\n\t\tinitialize: function() {\n\t\t\t// Listen for model attribute changes\n\t\t\tthis.bind( 'change', this.changeSetting, this );\n\t\t\t/*\n\t\t\t * Check to see if we have any setting defaults to set.\n\t\t\t */\n\t\t\tvar formSettings = nfRadio.channel( 'settings' ).request( 'get:collection' );\n\t\t\t_.each( formSettings.models, function( settingModel ) {\n\t\t\t\tif ( 'undefined' == typeof this.get( settingModel.get( 'name' ) ) ) {\n\t\t\t\t\tthis.set( settingModel.get( 'name' ), settingModel.get( 'value' ), { silent: true } );\n\t\t\t\t}\n\t\t\t\tnfRadio.channel( settingModel.get( 'type' ) ).trigger( 'init:dataModel', this, settingModel );\n\t\t\t}, this );\n\n\t\t\tthis.listenTo( nfRadio.channel( 'app' ), 'fire:updateFieldKey', this.updateFieldKey );\n\t\t},\n\n\t\t/**\n\t\t * When we change the model attributes, fire an event saying we've changed something.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n\t\tchangeSetting: function( model, options) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'update:setting', this, options.settingModel );\n\t\t},\n\n\t\tupdateFieldKey: function( keyModel, settingModel ) {\n\t\t\tnfRadio.channel( 'app' ).trigger( 'replace:fieldKey', this, keyModel, settingModel );\n\t\t}\n\t} );\n\t\n\treturn model;\n} );\n","/**\n * Handles interactions with our form settings collection.\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/data',['models/advanced/settingsModel'], function( settingsModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Load our action collection from our localized form data\n\t\t\tthis.model = new settingsModel( preloadedFormData.settings );\n\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:settings', this.getSettings, this );\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:setting', this.getSetting, this );\n\t\t\tnfRadio.channel( 'settings' ).reply( 'update:setting', this.updateSetting, this );\n\t\t},\n\n\t\tgetSettings: function() {\n\t\t\treturn this.model;\n\t\t},\n\n\t\tupdateSetting: function( name, value, silent ) {\n\t\t\tsilent = silent || false;\n\t\t\tthis.model.set( name, value, { silent: silent } );\n\t\t},\n\n\t\tgetSetting: function( name ) {\n\t\t\treturn this.model.get( name );\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Fetches settings models so that we can get setting information\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/formSettings',['models/app/settingCollection'], function( settingCollection ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.collection = new settingCollection( formSettings, { objectType: 'settings' } );\n\t\t\t\t\t\n\t\t\t// Responds to requests for settings models.\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:settingModel', this.getSettingModel, this );\n\n\t\t\t// Responds to requests for our setting collection\n\t\t\tnfRadio.channel( 'settings' ).reply( 'get:collection', this.getSettingCollection, this );\n\t\t},\n\n\t\tgetSettingModel: function( name ) {\n\t\t\treturn this.collection.findWhere( { name: name } );\n\t\t},\n\n\t\tgetSettingCollection: function() {\n\t\t\treturn this.collection;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","/**\n * Handles adding and removing the active class from form settings currently being edited.\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/editActive',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Respond to requests to remove the active class from all our fields.\n\t\t\tnfRadio.channel( 'settings' ).reply( 'clear:editActive', this.clearEditActive, this );\n\t\t\t// Listen for the closing drawer so that we can remove all of our active classes.\n\t\t\tthis.listenTo( nfRadio.channel( 'drawer-editSettings' ), 'before:closeDrawer', this.clearEditActive );\n\t\t},\n\n\t\t/**\n\t\t * Loops through our fields collection and sets editActive to false.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return void\n\t\t */\n        clearEditActive: function() {\n            var collection = nfRadio.channel( 'settings' ).request( 'get:typeCollection' );\n            _.each( collection.models, function( field ) {\n\t\t\t\tfield.set( 'editActive', false );\n            } );\n        }\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Listens for clicks on our form settings sections.\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/clickEdit',['models/advanced/settingsModel'], function( settingsModel ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\tthis.listenTo( nfRadio.channel( 'settings' ), 'click:edit', this.clickEdit );\n\t\t},\n\n\t\tclickEdit: function( e, typeModel ) {\n\t\t\tvar model = nfRadio.channel( 'settings' ).request( 'get:settings' );\n\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'editSettings', { model: model, groupCollection: typeModel.get( 'settingGroups' ), typeModel: typeModel } );\n\t\t\tvar preventClose = nfRadio.channel( 'drawer' ).request( 'get:preventClose' );\n\t\t\tif ( ! preventClose ) {\n\t\t\t\ttypeModel.set( 'editActive', true );\n\t\t\t}\n\t\t}\n\t});\n\n\treturn controller;\n} );\n","/**\n * Makes sure that calculations don't reference calculations with a lower order.\n *\n * For example, our first caclulation can't reference the second, but the second can reference the first.\n * \n * @package Ninja Forms builder\n * @subpackage Advanced\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'controllers/advanced/calculations',[], function() {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t/*\n\t\t\t * When someone types in the \"name\" or \"eq\" portion of our calculation, we need to make sure\n\t\t\t * that they haven't duplicated a name or made a bad EQ reference.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'keyup:option', this.keyUp );\n\t\t\t/*\n\t\t\t * Same thing for when our calculation option is updated\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'update:option', this.updateCalc );\n\t\t\t/*\n\t\t\t * When we sort our calcluations, we need to make sure that we don't get any bad EQ\n\t\t\t * references.\n\t\t\t */\n\t\t\tthis.listenTo( nfRadio.channel( 'option-repeater-calculations' ), 'sort:option', this.sortCalc );\n\t\t},\n\n\t\tkeyUp: function( e, optionModel ) {\n\t\t\t// Get our current value\n\t\t\tvar value = jQuery( e.target ).val();\n\t\t\t// Check to see if we're editing a name or eq\n            var id = jQuery( e.target ).data( 'id' );\n\t\t\tif( 'name' == id ) { // We are editing the name field\n\t\t\t\t// Check to see if our name already exists.\n\t\t\t\tthis.checkName( value, optionModel );\n\t\t\t\tthis.checkEQ( optionModel.get( 'eq' ), optionModel );\n\t\t\t} else if( 'eq' == id ) { // We're editing the eq\n\t\t\t\t// Check to see if there are any calcs referenced in our eq\n\t\t\t\tthis.checkEQ( value, optionModel );\n\t\t\t} else if( 'dec' == id ) { // We're editing the dec\n                // Check to see that we have a non-negative integer\n                this.checkDec( value, optionModel );\n            }\n\t\t},\n\n\t\tupdateCalc: function( optionModel ) {\n\t\t\tthis.checkName( optionModel.get( 'name' ), optionModel, false );\n\t\t\tthis.checkEQ( optionModel.get( 'eq' ), optionModel );\n\t\t\tthis.checkDec( optionModel.get( 'dec' ), optionModel );\n\n\t\t\tBackbone.Radio.channel( 'calcs' ).trigger( 'update:calc', optionModel );\n\t\t},\n\n\t\tsortCalc: function( optionModel, setting ) {\n\t\t\tthis.checkAllCalcs( setting.collection );\n\t\t},\n\n\t\t/**\n\t\t * Check to see if a calc name exists.\n\t\t * \n\t\t * @since  3.0\n\t\t * @param  string \t\t\tname        calc name to check\n\t\t * @param  backbone.model \toptionModel \n\t\t * @return void\n\t\t */\n\t\tcheckName: function( name, optionModel, silent ) {\n\t\t\tsilent = silent || true;\n\t\t\t// Get our current errors, if any.\n\t\t\tvar errors = optionModel.get( 'errors' );\n\t\t\t// Search our calc collection for our name\n\t\t\tvar found = optionModel.collection.where( { name: jQuery.trim( name ) } );\n\n\t\t\t// If the name that was passed is the same as our current name, return false.\n\t\t\tif ( name == optionModel.get( 'name' ) ) {\n\t\t\t\tfound = [];\n\t\t\t}\n\n\t\t\t// If our name exists, add an errors to the option model\n\t\t\tif ( 0 != found.length ) {\n\t\t\t\terrors.nameExists = 'Calculation names must be unique. Please enter another name.';\n\t\t\t} else {\n\t\t\t\tvar oldName = optionModel.get( 'name' );\n\t\t\t\toptionModel.set( 'name', name, { silent: silent } );\n\t\t\t\tnfRadio.channel( 'calcs' ).trigger( 'update:calcName', optionModel, oldName );\n\t\t\t\tdelete errors.nameExists;\n\t\t\t}\n\n\t\t\toptionModel.set( 'errors', errors );\n\t\t\toptionModel.trigger( 'change:errors', optionModel );\n\t\t},\n\n\t\t/**\n\t\t * Check to see if an eq contains a reference to a calc at a lower priority.\n\t\t *\n\t\t * @since  3.0\n\t\t * @param  string \t\t\teq          our equation\n\t\t * @param  backbone.model \toptionModel\n\t\t * @return void\n\t\t */\n\t\tcheckEQ: function( eq, optionModel ) {\n\t\t\t// Get any current errors on our optionModel\n\t\t\tvar errors = optionModel.get( 'errors' );\n\t\t\t/*\n\t\t\t * We're looking for two errors:\n\t\t\t * - Calculations that are below the current one can't be processed.\n\t\t\t * - Calculations can't refer to themselves.\n\t\t\t */ \n\t\t\tvar errorSelfRef = false;\n\t\t\tvar errorFutureCalc = false;\n\t\t\t// Regex that searches for {calc:key}\n\t\t\tvar calcs = eq.match( new RegExp( /{calc:(.*?)}/g ) );\n\t\t\t/*\n\t\t\t * Calcs will be an array like:\n\t\t\t * ['{calc:test}'], ['{calc:another}']\n\t\t\t * \n\t\t\t * If we have any calcs in the eq, loop through them and search for the errors.\n\t\t\t */\n\t\t\tif ( calcs ) {\n\t\t\t\tvar calculations = optionModel.collection;\n\t\t\t\t// Maps a function to each item in our calcs array.\n\t\t\t\tcalcs = calcs.map( function( calc ) {\n\t\t\t\t\t// calc will be {calc:name}\n\t\t\t\t\tvar name = calc.replace( '}', '' ).replace( '{calc:', '' );\n\t\t\t\t\t// Get our optionModel from our calculations collection.\n\t\t\t\t\tvar targetCalc = calculations.findWhere( { name: name } );\n\t\t\t\t\tif ( name == optionModel.get( 'name' ) ) {\n\t\t\t\t\t\t// If we already have a calc with this name, set an error.\n\t\t\t\t\t\terrors.selfRef = 'A calculation can\\'t reference itself!';\n\t\t\t\t\t\terrorSelfRef = true;\n\t\t\t\t\t} else if ( targetCalc && targetCalc.get( 'order' ) > optionModel.get( 'order' ) ) {\n\t\t\t\t\t\t// If the calc is after this one, set an error. \n\t\t\t\t\t\terrorFutureCalc = true;\n\t\t\t\t\t\terrors.futureCalc = 'Can\\'t reference a future calculation!';\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t}\n\n\t\t\t// If we didn't find any self ref errors, remove the key.\n\t\t\tif ( ! errorSelfRef ) {\n\t\t\t\tdelete errors.selfRef;\n\t\t\t}\n\n\t\t\t// If we didn't find any future calc errors, remove the key.\n\t\t\tif ( ! errorFutureCalc ) {\n\t\t\t\tdelete errors.futureCalc;\n\t\t\t}\n\n\t\t\t// Set errors and trigger our optionModel change.\n\t\t\toptionModel.set( 'errors', errors );\n\t\t\toptionModel.trigger( 'change:errors', optionModel );\n\n\t\t},\n\n        /**\n         * Ceck to see if a dec is an integer value.\n         * \n         * @since 3.1\n         * @param string            dec         our decimal value\n         * @param backbone.model    optionModel\n         * @return void\n         */\n        checkDec: function( dec, optionModel ) {\n            // If dec isn't defined, bail...\n            if( 'undefined' === typeof(dec) ) return false;\n\t\t\t// Get our current errors, if any.\n\t\t\tvar errors = optionModel.get( 'errors' );\n            /**\n             * We're looking for one error:\n             * - dec is not a non-negative integer.\n             */\n            var errorNonIntDec = false;\n            \n            // Get our target value and see if it matches what we got.\n            var checked = Math.abs( parseInt( dec.trim() ) );\n            if ( dec.trim() !== '' && checked.toString() !== dec.trim() ) {\n                errorNonIntDec = true;\n                errors.nonIntDec = 'Decimals must be a non-negative integer!';\n            }\n            \n            // If our dec value is a non-negative integer.\n            if ( ! errorNonIntDec ) {\n                delete errors.nonIntDec;\n            }\n            \n\t\t\t// Set errors and trigger our optionModel change.\n\t\t\toptionModel.set( 'errors', errors );\n\t\t\toptionModel.trigger( 'change:errors', optionModel );\n            \n        },\n        \n\t\tcheckAllCalcs: function( collection ) {\n\t\t\tvar that = this;\n\t\t\tcollection.models.map( function( opt ) {\n\t\t\t\tthat.checkName( opt.get( 'name' ), opt );\n\t\t\t\tthat.checkEQ( opt.get( 'eq' ), opt );\n                that.checkDec( opt.get( 'dec' ), opt );\n\t\t\t} );\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n\n","/**\n * Loads all of our controllers using Require JS.\n * \n * @package Ninja Forms builder\n * @subpackage Fields\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine(\n\t'controllers/loadControllers',[\n\t\t/*\n\t\t * Application controllers\n\t\t */\n\t\t'controllers/app/remote',\n\t\t'controllers/app/drawer',\n\t\t'controllers/app/drawerConfig',\n\t\t'controllers/app/domainConfig',\n\t\t'controllers/app/data',\t\t\n\t\t'controllers/app/drawerToggleSettingGroup',\n\t\t'controllers/app/updateDB',\n\t\t'controllers/app/formData',\n\t\t'controllers/app/previewLink',\n\t\t'controllers/app/menuButtons',\n\t\t'controllers/app/trackChanges',\n\t\t'controllers/app/undoChanges',\n\t\t'controllers/app/publishResponse',\n\t\t'controllers/app/changeDomain',\n\t\t'controllers/app/pushstate',\n\t\t'controllers/app/hotkeys',\n\t\t'controllers/app/cleanState',\n\t\t'controllers/app/coreUndo',\n\t\t'controllers/app/cloneModelDeep',\n\t\t'controllers/app/getSettingChildView',\n\t\t'controllers/app/changeSettingDefault',\n\t\t'controllers/app/fieldset',\n\t\t'controllers/app/toggleSetting',\n\t\t'controllers/app/buttonToggleSetting',\n\t\t'controllers/app/numberSetting',\n\t\t'controllers/app/radioSetting',\n\t\t'controllers/app/itemControls',\n\t\t'controllers/app/mergeTags',\n\t\t'controllers/app/mergeTagBox',\n\t\t'controllers/app/itemSettingFill',\n\t\t'controllers/app/confirmPublish',\n\t\t'controllers/app/rte',\n\t\t'controllers/app/settingFieldSelect',\n\t\t'controllers/app/settingFieldList',\n\t\t'controllers/app/settingHTML',\n\t\t'controllers/app/settingColor',\n\t\t'controllers/app/changeMenu',\n\t\t'controllers/app/mobile',\n\t\t'controllers/app/notices',\n\t\t'controllers/app/unloadCheck',\n\t\t'controllers/app/formContentFilters',\n\t\t'controllers/app/formContentGutterFilters',\n\t\t'controllers/app/cloneCollectionDeep',\n\t\t'controllers/app/trackKeyDown',\n\t\t'controllers/app/perfectScroll',\n\t\t'controllers/app/getNewSettingGroupCollection',\n\t\t'controllers/app/settingMedia',\n\t\t'controllers/app/publicLink',\n\t\t/*\n\t\t * Fields domain controllers\n\t\t */\n\t\t'controllers/fields/types',\n\t\t'controllers/fields/fieldTypeDrag',\n\t\t'controllers/fields/stagingDrag',\n\t\t'controllers/fields/staging',\n\t\t'controllers/fields/stagingSortable',\n\t\t'controllers/fields/filterTypes',\n\t\t'controllers/fields/sortable',\n\t\t'controllers/fields/data',\n\t\t'controllers/app/optionRepeater',\n\t\t'controllers/app/imageOptionRepeater',\n\t\t'controllers/fields/editActive',\n\t\t'controllers/fields/fieldSettings',\n\t\t'controllers/fields/fieldCreditCard',\n\t\t'controllers/fields/fieldList',\n\t\t'controllers/fields/fieldPassword',\n\t\t'controllers/fields/fieldQuantity',\n\t\t'controllers/fields/fieldShipping',\n\t\t'controllers/fields/key',\n\t\t'controllers/fields/notices',\n\t\t'controllers/fields/mobile',\n\t\t'controllers/fields/savedFields',\n\t\t'controllers/fields/fieldDatepicker',\n\t\t'controllers/fields/fieldDisplayCalc',\n\t\t'controllers/fields/fieldRepeater',\n\n\t\t/*\n\t\t * TODO: Actions domain controllers\n\t\t */\n\t\t'controllers/actions/types',\n\t\t'controllers/actions/data',\n\t\t'controllers/actions/actionSettings',\n\t\t'controllers/actions/editActive',\n\t\t'controllers/actions/emailFromSetting',\n\t\t'controllers/actions/addActionTypes',\n\t\t'controllers/actions/typeDrag',\n\t\t'controllers/actions/droppable',\n\t\t'controllers/actions/filterTypes',\n\t\t'controllers/actions/newsletterList',\n\t\t'controllers/actions/deleteFieldListener',\n\t\t'controllers/actions/collectPaymentFields',\n\t\t'controllers/actions/collectPaymentCalculations',\n\t\t'controllers/actions/collectPaymentFixed',\n\t\t'controllers/actions/collectPayment',\n\t\t'controllers/actions/save',\n\n\t\t/*\n\t\t * TODO: Settings domain controllers\n\t\t */\n\t\t'controllers/advanced/types',\n\t\t'controllers/advanced/data',\n\t\t'controllers/advanced/formSettings',\n\t\t'controllers/advanced/editActive',\n\t\t'controllers/advanced/clickEdit',\n\t\t'controllers/advanced/calculations'\n\t],\n\tfunction(\n\t\t/*\n\t\t * Application controllers\n\t\t */\n\t\tRemote,\n\t\tDrawer,\n\t\tDrawerConfig,\n\t\tDomainConfig,\n\t\tAppData,\n\t\tDrawerToggleSettingGroup,\n\t\tUpdateDB,\n\t\tFormData,\n\t\tPreviewLink,\n\t\tAppMenuButtons,\n\t\tAppTrackChanges,\n\t\tAppUndoChanges,\n\t\tAppPublishResponse,\n\t\tAppChangeDomain,\n\t\tPushstate,\n\t\tHotkeys,\n\t\tCleanState,\n\t\tCoreUndo,\n\t\tCloneModelDeep,\n\t\tDrawerSettingChildView,\n\t\tChangeSettingDefault,\n\t\tFieldset,\n\t\tToggleSetting,\n\t\tButtonToggleSetting,\n\t\tNumberSetting,\n\t\tRadioSetting,\n\t\tItemControls,\n\t\tMergeTags,\n\t\tMergeTagsBox,\n\t\tItemSettingFill,\n\t\tConfirmPublish,\n\t\tRTE,\n\t\tSettingFieldSelect,\n\t\tSettingFieldList,\n\t\tSettingHTML,\n\t\tSettingColor,\n\t\tChangeMenu,\n\t\tAppMobile,\n\t\tAppNotices,\n\t\tAppUnloadCheck,\n\t\tFormContentFilters,\n\t\tFormContentGutterFilters,\n\t\tCloneCollectionDeep,\n\t\tTrackKeyDown,\n\t\tPerfectScroll,\n\t\tGetNewSettingGroupCollection,\n\t\tSettingMedia,\n\t\tPublicLink,\n\t\t/*\n\t\t * Fields domain controllers\n\t\t */\n\t\tFieldTypes,\n\t\tFieldTypeDrag,\n\t\tFieldStagingDrag,\n\t\tStagedFieldsData,\n\t\tStagedFieldsSortable,\n\t\tDrawerFilterFieldTypes,\n\t\tMainContentFieldsSortable,\n\t\tFieldData,\n\t\tOptionRepeater,\n\t\timageOptionRepeater,\n\t\tFieldsEditActive,\n\t\tFieldSettings,\n\t\tFieldCreditCard,\n\t\tFieldList,\n\t\tFieldPassword,\n\t\tFieldQuantity,\n\t\tFieldShipping,\n\t\tFieldKey,\n\t\tNotices,\n\t\tFieldsMobile,\n\t\tSavedFields,\n\t\tFieldDatepicker,\n\t\tFieldDisplayCalc,\n\t\tFieldRepeater,\n\t\t/*\n\t\t * TODO: Actions domain controllers\n\t\t */\n\t\tActionTypes,\n\t\tActionData,\n\t\tActionSettings,\n\t\tActionEditActive,\n\t\tActionEmailFromSetting,\n\t\tActionAddTypes,\n\t\tActionTypeDrag,\n\t\tActionDroppable,\n\t\tActionFilterTypes,\n\t\tActionNewsletterList,\n\t\tActionDeleteFieldListener,\n\t\tActionCollectPaymentFields,\n\t\tActionCollectPaymentCalculations,\n\t\tActionCollectPaymentFixed,\n\t\tActionCollectPayment,\n\t\tActionSave,\n\n\t\t/*\n\t\t * TODO: Settings domain controllers\n\t\t */\n\t\tSettingTypes,\n\t\tSettingData,\n\t\tFormSettings,\n\t\tSettingsEditActive,\n\t\tSettingsClickEdit,\n\t\tAdvancedCalculations\n\t\t\n\t) {\n\t\tvar controller = Marionette.Object.extend( {\n\t\t\tinitialize: function() {\n\t\t\t\t/*\n\t\t\t\t * Application controllers\n\t\t\t\t */\n\t\t\t\tnew FormContentFilters();\n\t\t\t\tnew FormContentGutterFilters();\n\t\t\t\tnew Hotkeys();\n\t\t\t\tnew Remote();\n\t\t\t\tnew Drawer();\n\t\t\t\tnew DrawerConfig();\n\t\t\t\tnew DomainConfig();\n\t\t\t\tnew DrawerToggleSettingGroup();\n\t\t\t\tnew PreviewLink();\n\t\t\t\tnew AppMenuButtons();\n\t\t\t\tnew AppTrackChanges();\n\t\t\t\tnew AppUndoChanges();\n\t\t\t\tnew AppPublishResponse();\n\t\t\t\tnew AppChangeDomain();\n\t\t\t\tnew CleanState();\n\t\t\t\tnew CoreUndo();\n\t\t\t\tnew CloneModelDeep();\n\t\t\t\tnew ItemControls();\n\t\t\t\tnew ConfirmPublish();\n\t\t\t\tnew RTE();\n\t\t\t\tnew SettingFieldSelect();\n\t\t\t\tnew SettingFieldList();\n\t\t\t\tnew SettingHTML();\n\t\t\t\tnew SettingColor();\n\t\t\t\tnew SettingMedia();\n\t\t\t\tnew ChangeMenu();\n\t\t\t\tnew AppMobile();\n\t\t\t\tnew AppNotices();\n\t\t\t\tnew AppUnloadCheck();\n\t\t\t\tnew UpdateDB();\n\t\t\t\tnew CloneCollectionDeep();\n\t\t\t\tnew TrackKeyDown();\n\t\t\t\tnew PerfectScroll();\n\t\t\t\tnew GetNewSettingGroupCollection();\n\t\t\t\tnew PublicLink();\n\t\t\t\t// new Pushstate();\n\t\t\t\t/*\n\t\t\t\t * Fields domain controllers\n\t\t\t\t * \n\t\t\t\t * Field-specific controllers should be loaded before our field type controller.\n\t\t\t\t * This ensures that any 'init' hooks are properly registered.\n\t\t\t\t */\n\t\t\t\tnew Fieldset();\n\t\t\t\tnew OptionRepeater();\n\t\t\t\tnew imageOptionRepeater();\n\t\t\t\tnew FieldTypes();\n\t\t\t\tnew FieldTypeDrag();\n\t\t\t\tnew FieldStagingDrag();\n\t\t\t\tnew StagedFieldsData();\n\t\t\t\tnew StagedFieldsSortable();\n\t\t\t\tnew DrawerFilterFieldTypes();\n\t\t\t\tnew MainContentFieldsSortable();\n\t\t\t\tnew ChangeSettingDefault();\n\t\t\t\tnew ToggleSetting();\n\t\t\t\tnew ButtonToggleSetting();\n\t\t\t\tnew NumberSetting();\n\t\t\t\tnew RadioSetting();\n\t\t\t\tnew DrawerSettingChildView();\n\t\t\t\tnew FieldsEditActive();\n\t\t\t\tnew FieldSettings();\n\t\t\t\tnew FieldCreditCard();\n\t\t\t\tnew FieldList();\n\t\t\t\tnew FieldPassword;\n\t\t\t\tnew FieldQuantity();\n\t\t\t\tnew FieldShipping();\n\t\t\t\tnew FieldKey();\n\t\t\t\tnew Notices();\n\t\t\t\tnew FieldsMobile();\n\t\t\t\tnew SavedFields();\n\t\t\t\tnew FieldDatepicker();\n\t\t\t\tnew FieldDisplayCalc();\n\t\t\t\tnew FieldRepeater();\n\t\t\t\t/*\n\t\t\t\t * TODO: Actions domain controllers\n\t\t\t\t */\n\t\t\t\tnew ActionNewsletterList();\n\t\t\t\tnew ActionDeleteFieldListener();\n\t\t\t\tnew ActionCollectPaymentCalculations();\n\t\t\t\tnew ActionCollectPayment();\n\t\t\t\tnew ActionSave();\n\t\t\t\tnew ActionTypes();\n\t\t\t\tnew ActionData();\n\t\t\t\tnew ActionSettings();\n\t\t\t\tnew ActionEditActive();\n\t\t\t\tnew ActionEmailFromSetting();\n\t\t\t\tnew ActionAddTypes();\n\t\t\t\tnew ActionTypeDrag();\n\t\t\t\tnew ActionDroppable();\n\t\t\t\tnew ActionFilterTypes();\n\t\t\t\tnew ActionCollectPaymentFields();\n\t\t\t\tnew ActionCollectPaymentFixed();\n\n\t\t\t\t/*\n\t\t\t\t * TODO: Settings domain controllers\n\t\t\t\t */\n\t\t\t\tnew SettingTypes();\n\t\t\t\tnew FormSettings();\n\t\t\t\tnew AdvancedCalculations();\n\t\t\t\tnew SettingData();\n\t\t\t\tnew SettingsEditActive();\n\t\t\t\tnew SettingsClickEdit();\n\t\t\t\t\n\t\t\t\t/*\n\t\t\t\t * Data controllers need to be set after every other controller has been setup, even if they aren't domain-specific.\n\t\t\t\t * AppData() was after FormData();\n\t\t\t\t */\n\t\t\t\tnew AppData();\n\t\t\t\tnew FieldData();\n\t\t\t\tnew FormData();\n\t\t\t\tnew MergeTags();\n\t\t\t\tnew MergeTagsBox();\n\t\t\t\tnew ItemSettingFill();\n\t\t\t}\n\t\t});\n\n\t\treturn controller;\n} );\n\n","define( 'views/fields/mainContentEmpty',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-main-content-fields-empty',\n\n\t\tonBeforeDestroy: function() {\n\t\t\tjQuery( this.el ).parent().removeClass( 'nf-fields-empty-droppable' ).droppable( 'destroy' );\n\t\t},\n\n\t\tonRender: function() {\n\t\t\tthis.$el = this.$el.children();\n\t\t\tthis.$el.unwrap();\n\t\t\tthis.setElement( this.$el );\n\t\t},\n\n\t\tonShow: function() {\n\t\t\tif ( jQuery( this.el ).parent().hasClass( 'ui-sortable' ) ) {\n\t\t\t\tjQuery( this.el ).parent().sortable( 'destroy' );\n\t\t\t}\n\t\t\tjQuery( this.el ).parent().addClass( 'nf-fields-empty-droppable' );\n\t\t\tjQuery( this.el ).parent().droppable( {\n\t\t\t\taccept: function( draggable ) {\n\t\t\t\t\tif ( jQuery( draggable ).hasClass( 'nf-stage' ) || jQuery( draggable ).hasClass( 'nf-field-type-button' ) ) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tactiveClass: 'nf-droppable-active',\n\t\t\t\thoverClass: 'nf-droppable-hover',\n\t\t\t\ttolerance: 'pointer',\n\t\t\t\tover: function( e, ui ) {\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'over:fieldsSortable', ui );\n\t\t\t\t},\n\t\t\t\tout: function( e, ui ) {\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'out:fieldsSortable', ui );\n\t\t\t\t},\n\t\t\t\tdrop: function( e, ui ) {\n\t\t\t\t\tui.item = ui.draggable;\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'receive:fieldsSortable', ui );\n\t\t\t\t\tvar fieldCollection = nfRadio.channel( 'fields' ).request( 'get:collection' );\n\t\t\t\t\tfieldCollection.trigger( 'reset', fieldCollection );\n\t\t\t\t},\n\t\t\t} );\n\t\t}\n\t});\n\n\treturn view;\n} );\n","/**\n * Renders our form title.\n *\n * @package Ninja Forms builder\n * @subpackage App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/app/formTitle',[], function() {\n\tvar view = Marionette.ItemView.extend({\n\t\ttagName: 'div',\n\t\ttemplate: '#tmpl-nf-header-form-title',\n\n\t\tinitialize: function() {\n\t\t\t// When we change the model (to disable it, for example), re-render.\n\t\t\tthis.model.on( 'change:title', this.render, this );\n\t\t},\n\n\t\t/**\n\t\t * These functions are available to templates, and help us to remove logic from template files.\n\t\t * \n\t\t * @since  3.0\n\t\t * @return Object\n\t\t */\n\t\ttemplateHelpers: function() {\n\t\t\tvar that = this;\n\t    \treturn {\n\t    \t\trenderTitle: function(){\n\t    \t\t\tvar formData = nfRadio.channel( 'app' ).request( 'get:formModel' );\n\t    \t\t\treturn _.escape( formData.get( 'settings' ).get( 'title' ) );\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\n\t});\n\n\treturn view;\n} );\n","/**\n * Return views that might be used in extensions.\n * These are un-instantiated views.\n * \n * @package Ninja Forms builder\n * @subpackage Main App\n * @copyright (c) 2015 WP Ninjas\n * @since 3.0\n */\ndefine( 'views/loadViews',[ 'views/fields/fieldItem', 'views/fields/mainContentEmpty', 'views/app/formTitle' ], function( fieldItemView, mainContentEmptyView, FormTitleView ) {\n\tvar controller = Marionette.Object.extend( {\n\t\tinitialize: function() {\n\t\t\t// Reply to requests for our field item view.\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:fieldItem', this.getFieldItem );\n\t\t\n\t\t\t// Reply to requests for our empty content view.\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:mainContentEmpty', this.getMainContentEmpty );\n\t\t\n\t\t\t// Reply to requests for our form title view.\n\t\t\tnfRadio.channel( 'views' ).reply( 'get:formTitle', this.getFormTitle );\n\t\t},\n\n\t\tgetFieldItem: function( model ) {\n\t\t\treturn fieldItemView;\n\t\t},\n\n\t\tgetMainContentEmpty: function() {\n\t\t\treturn mainContentEmptyView;\n\t\t},\n\n\t\tgetFormTitle: function() {\n\t\t\treturn FormTitleView;\n\t\t}\n\n\t});\n\n\treturn controller;\n} );\n","var nfRadio = Backbone.Radio;\n\njQuery( document ).ready( function( $ ) {\n\trequire( ['views/app/builder', 'controllers/loadControllers', 'views/loadViews'], function( BuilderView, LoadControllers, LoadViews ) {\n\n\t\tvar NinjaForms = Marionette.Application.extend( {\n\n\t\t\tinitialize: function( options ) {\n\n\t\t\t\tvar that = this;\n\t\t\t\tMarionette.Renderer.render = function(template, data){\n\t\t\t\t\tvar template = that.template( template );\n\t\t\t\t\treturn template( data );\n\t\t\t\t};\n\n\t\t\t\t// Trigger an event before we load our controllers.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'before:loadControllers', this );\n\t\t\t\t// Load our controllers.\n\t\t\t\tvar loadControllers = new LoadControllers();\n\t\t\t\t// Trigger an event after we load our controllers.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:loadControllers', this );\n\n\t\t\t\t// Trigger an event before we load un-instantiated views\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'before:loadViews', this );\n\t\t\t\tvar loadViews = new LoadViews();\n\t\t\t\t// Trigger an event after we load un-instantiated views.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:loadViews', this );\n\n\t\t\t\tnfRadio.channel( 'app' ).reply( 'get:template', this.template );\n\t\t\t},\n\n\t\t\tonStart: function() {\n\t\t\t\tvar builderView = new BuilderView();\n\t\t\t\t// Trigger our after start event.\n\t\t\t\tnfRadio.channel( 'app' ).trigger( 'after:appStart', this );\n\n\t\t\t\t/*\n\t\t\t\t * If we're on the new forms builder, open the add fields drawer.\n\t\t\t\t */\n\t\t\t\tif ( 0 == nfAdmin.formID ) {\n\t\t\t\t\tnfRadio.channel( 'app' ).request( 'open:drawer', 'addField' );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\ttemplate: function( template ) {\n\t\t\t\treturn _.template( $( template ).html(),  {\n\t\t\t\t\tevaluate:    /<#([\\s\\S]+?)#>/g,\n\t\t\t\t\tinterpolate: /\\{\\{\\{([\\s\\S]+?)\\}\\}\\}/g,\n\t\t\t\t\tescape:      /\\{\\{([^\\}]+?)\\}\\}(?!\\})/g,\n\t\t\t\t\tvariable:    'data'\n\t\t\t\t} );\n\t\t\t}\n\t\t} );\n\t\n\t\tvar ninjaForms = new NinjaForms();\n\t\tninjaForms.start();\n\t} );\n} );\ndefine(\"main\", function(){});\n\n"]}